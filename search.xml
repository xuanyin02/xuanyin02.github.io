<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker+K8S</title>
    <url>/2023/060663789.html</url>
    <content><![CDATA[<p>Docker</p>
<p>为什么学Docker？</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230606145241038.png" alt="image-20230606145241038"><figcaption>image-20230606145241038</figcaption></figure></p>
<p>Docker的正式学习</p>
<p>一、基本概念</p>
<p>1 概念</p>
<p>Docker是基于Google公司推出的Golang语言开发而来，基于Linux内核的Cgroups、NameSpace，以及Union FS等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。<br>由于隔离的进程独立于宿主机和其他隔离的进程，也被称之为容器。<br>最初的Docker的基于LXC的，后来取出LXC转而使用自行开发的Libcontainer。<br>Docker被定义为开源的容器引擎，可以方便的对容器进行管理。例如对镜像打包封装，引入Docker Registry对镜像统一管理。<br>利用Docker可以实现开发，测试，生产环境的部署一致性，极大的减少运维成本。</p>
<p>2 解决的问题：</p>
<ol>
<li><p>统一标准</p>
<p>应用构建</p>
<p>应用分享</p>
<p>应用运行</p>
</li>
<li><p>资源隔离</p>
<p>cpu、memory资源隔离与限制</p>
<p>访问设备隔离与限制</p>
<p>网络隔离与限制</p>
<p>用户、用户组隔离限制</p>
</li>
</ol>
<p>2 容器化技术：</p>
<ol>
<li>基础镜像MB级别</li>
<li>创建简单</li>
<li>隔离性强</li>
<li>启动速度秒级</li>
<li>移植和分享方便</li>
</ol>
<p>3 架构</p>
<p>Docker引擎</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230606151205372.png" alt="image-20230606151205372"><figcaption>image-20230606151205372</figcaption></figure></p>
<p>Docker平台组成</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230606151304523.png" alt="image-20230606151304523"><figcaption>image-20230606151304523</figcaption></figure></p>
<p>Docker最核心的组件：</p>
<ul>
<li>Image镜像，构建容器（应用程序运行所需的环境，打包为镜像文件）</li>
<li>Container，容器（应用程序就跑在容器中）</li>
<li>镜像仓库（docker hub）（保存镜像文件，提供上传、下载镜像）作用好比github</li>
<li>Dockerfile，将你部署项目的操作，写成一个部署脚本，这就是Dockerfile，且该脚本还能够构建出镜像文件</li>
</ul>
]]></content>
      <categories>
        <category>云原生</category>
      </categories>
      <tags>
        <tag>Docker+K8S</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop面试常见问题</title>
    <url>/2023/05169473.html</url>
    <content><![CDATA[<h4 id="一-什么是Hadoop？"><a href="#一-什么是Hadoop？" class="headerlink" title="一 什么是Hadoop？"></a>一 什么是Hadoop？</h4><p>Hadoop是一个开源的分布式计算平台，可以处理大规模数据集。它由两个核心组件组成：HDFS文件系统 和 MapReduce计算框架。</p>
<h4 id="二-Hadoop的优点是什么？"><a href="#二-Hadoop的优点是什么？" class="headerlink" title="二 Hadoop的优点是什么？"></a>二 Hadoop的优点是什么？</h4><p>  可以处理大规模数据集，支持PB级别的数据存储和处理</p>
<p>  可以在廉价的硬件上运行，降低了成本</p>
<p>  可以通过数据冗余和自动故障转移来提高可靠性</p>
<p>  可以通过水平扩展来提高性能</p>
<p>  可以通过MapReduce计算框架来处理复杂的数据分析任务</p>
<h4 id="三-Hadoop的工作流程是什么？"><a href="#三-Hadoop的工作流程是什么？" class="headerlink" title="三 Hadoop的工作流程是什么？"></a>三 Hadoop的工作流程是什么？</h4><p>  数据被分割成块并存储在HDFS中</p>
<p>  MapReduce框架将任务分配给集群中的节点</p>
<p>  每个节点运行Map任务来处理数据块</p>
<p>  Map任务输出键值对，这些键值对被shuffle后传递给Reduce任务</p>
<p>  Reduce任务对键值对进行聚合和处理，并将结果写回HDFS</p>
<h4 id="四-Hadoop的数据复制是如何实现的？–涉及HDFS数据写入流程"><a href="#四-Hadoop的数据复制是如何实现的？–涉及HDFS数据写入流程" class="headerlink" title="四 Hadoop的数据复制是如何实现的？–涉及HDFS数据写入流程"></a>四 Hadoop的数据复制是如何实现的？–涉及HDFS数据写入流程</h4><p>  Hadoop的数据复制是通过HDFS实现的，当数据被写入HDFS时，它被分成块并复制到多个节点上。默认情况下，每个块会被复制到三个节点上，以提高数据的可靠性。如果一个节点失效，HDFS会自动将数据块复制到其他节点上，以保证数据的可用性。</p>
<h4 id="五-Hadoop是数据压缩是如何实现的？"><a href="#五-Hadoop是数据压缩是如何实现的？" class="headerlink" title="五 Hadoop是数据压缩是如何实现的？"></a>五 Hadoop是数据压缩是如何实现的？</h4><p>  Hadoop是数据压缩是通过MapReduce框架中的压缩器实现的。压缩器可以在Map和Reduce任务之间压缩和解压缩数据。Hadoop支持多种压缩算法，包括Gzip、Bzip2和Snappy等。</p>
<h4 id="六-Hadoop的数据安全是如何实现的？"><a href="#六-Hadoop的数据安全是如何实现的？" class="headerlink" title="六 Hadoop的数据安全是如何实现的？"></a>六 Hadoop的数据安全是如何实现的？</h4><p>  Hadoop的数据安全是通过HDFS中的访问控制列表（ACL）和MapReduce框架中的用户身份验证实现的。ACL可以控制对HDFS中文件和目录的访问权限。MapReduce框架可以通过用户身份验证来确保只有授权用户才能运行作业。</p>
<h4 id="七-Hadoop的调优技巧有哪些？"><a href="#七-Hadoop的调优技巧有哪些？" class="headerlink" title="七 Hadoop的调优技巧有哪些？"></a>七 Hadoop的调优技巧有哪些？</h4><p>  增加节点数：通过增加节点数来提高性能</p>
<p>  调整块大小：通过调整块大小来提高性能</p>
<p>  使用压缩：通过使用压缩来减少数据传输量和磁盘空间</p>
<p>  调整内存和CPU：通过调整内存和CPU来提高性能</p>
<p>  使用本地磁盘：通过使用本地磁盘来提高性能</p>
<p>  避免数据倾斜：通过避免数据倾斜来提高性能</p>
<h4 id="八-Hadoop是常见问题有哪些？"><a href="#八-Hadoop是常见问题有哪些？" class="headerlink" title="八 Hadoop是常见问题有哪些？"></a>八 Hadoop是常见问题有哪些？</h4><p>  数据倾斜：当数据分布不均匀时，会导致某些节点的负载过重，从而影响性能</p>
<p>  网络带宽限制：当集群中的节点之间的网络带宽不足时，会影响性能</p>
<p>  硬件故障：当节点硬件故障时，会影响数据可靠性和性能</p>
<p>  数据丢失：当数据丢失时，会影响数据可靠性和性能</p>
<p>  安全问题：当Hadoop集群存在安全漏洞时，会影响数据安全性和性能</p>
<h4 id="九-如何解决Hadoop是常见问题？"><a href="#九-如何解决Hadoop是常见问题？" class="headerlink" title="九 如何解决Hadoop是常见问题？"></a>九 如何解决Hadoop是常见问题？</h4><p>  数据倾斜：通过数据预处理、数据分区和数据复制等方法来避免数据倾斜</p>
<p>  网络带宽限制：通过增加网络带宽、优化数据传输和调整数据块大小等方法来解决网络带宽限制问题</p>
<p>  硬件故障：通过使用冗余节点、自动故障转移和备份等方法来提高数据可靠性</p>
<p>  数据丢失：通过使用数据备份、数据恢复和数据冗余等方法来提高数据可靠性</p>
<p>  安全问题：通过使用访问控制列表、用户身份验证和加密等方法来提高数据安全性</p>
<h4 id="十-请说下HDFS读写流程"><a href="#十-请说下HDFS读写流程" class="headerlink" title="十 请说下HDFS读写流程"></a>十 请说下HDFS读写流程</h4><p>HDFS写流程：</p>
<ol>
<li>Client发送上传请求，通过RPC与NameNode建立通信，NameNode检查用户是否有上传权限，以及上传的文件是否在HDFS对应的目录下不重名，如果这两者有任意一个不满足，则直接报错，如果两者都满足，则返回给客户端一个可以上传的信息；</li>
<li>Client根据文件的大小进行切分，默认128M一块，切分完成之后给NameNode发送请求第一个block块上传到哪些服务器上；</li>
<li>NameNode收到请求之后，根据网络拓扑和机架感知以及副本机制进行文件分配，返回可用的DataNode的地址；</li>
<li>Cilent收到地址之后与服务器地址列表中的一个节点如A进行通信，本质上就是RPC调用，建立pipeline，A收到请求后会继续调用B，B再调用C，将整个pipeline建立完成，逐级返回Client；</li>
<li>Cilent开始向A上发送第一个block（先从磁盘读取数据然后放到本地缓存），以packet（数据包，64kb）为单位，A收到一个packet就会发送给B，然后B发送给C，A每传完一个packet就会放入一个应答队列等待应答；</li>
<li>数据被分隔成一个个的packet数据包在pipeline上依次传输，在pipeline反向传输中，逐个发送ack（命令正确应答），最终由pipeline中第一个DataNode节点A将pipeline ack发送给Cilent；</li>
<li>当一个block传输完成之后，Client再次请求NameNode上传第二个block，NameNode重新选择三台DataNode给Client。</li>
</ol>
<p>HDFS读流程：</p>
<ol>
<li>Client向NameNode发送RPC请求，请求block的位置；</li>
<li>NameNode收到请求之后会检查用户权限以及是否有这个文件，如果都符合，则会视情况返回部分或全部的block列表，对于每个block，NameNode都会返回含有该block副本的DataNode地址；这些返回的DataNode地址，会按照集群拓扑结构得出DataNode与客户端的距离，然后进行排序，排序两个规则：网络拓扑结构中距离Client近的排靠前；心跳机制中超时汇报的DataNode状态为STALE，这样的排靠后；</li>
<li>Client选取排序靠前的DataNode来读取block，如果Client本身就是DataNode，那么将从本地直接获取数据（短路读取特性）；</li>
<li>底层本质上是建立Socket Stream（FSDataInputStream），重复的调用父类DataInputStream的read方法，知道这个块上的数据读取完毕；</li>
<li>当读完列表的block后，若文件读取还没有结束，Client会继续向NameNode获取下一批的block列表；</li>
<li>读取完一个block都会进行checksum验证，如果读取DataNode时出现错误，Client会通知NameNode，然后再从下一个拥有该block副本的DataNode继续读；</li>
<li>read方法是并行的读取block信息，不是一块一块的读取；NameNode只是返回Client请求包含块的DataNode地址，并不是返回请求块是数据；</li>
<li>最终读取来所有的block会合并成一个完整的最终文件。</li>
</ol>
<h4 id="十一-什么是HDFS的安全模式？"><a href="#十一-什么是HDFS的安全模式？" class="headerlink" title="十一 什么是HDFS的安全模式？"></a>十一 什么是HDFS的安全模式？</h4><p>HDFS的安全模式，即HDFS safe mode，是HDFS文件系统的一种特殊状态，在该状态下，HDFS文件系统只接收数据请求，而不接收删除、修改等变更操作，也不能复制底层的block及其副本</p>
<h4 id="十二-进入安全模式的两种方式"><a href="#十二-进入安全模式的两种方式" class="headerlink" title="十二 进入安全模式的两种方式"></a>十二 进入安全模式的两种方式</h4><p><strong>被动进入</strong>：使用命令—&gt; hdfs dfsadmin -safemode enter</p>
<p><strong>主动进入</strong>：为了保证整个文件系统的数据一致性&#x2F;整个文件系统不丢失数据</p>
<ul>
<li>​    根本原因：</li>
</ul>
<ol>
<li><p>与namenode保持定期心跳的datanode的个数没有达到指定阈值（阈值通过dfs.namenode.safemode.min.datanodes指定）</p>
</li>
<li><p>没有足够的block拥有指定的副本数（也就是没达到阈值，最小副本数通过参数dfs.namenode.replication.min指定，阈值通过dfs.namenode.safemode.threshold-pct指定，默认是0.999f）</p>
</li>
</ol>
<blockquote>
<p>正常情况下，HDFS启动过程中，会主动进入安全模式一段时间，这是HDFS的分布式架构决定的。因为namenode启动成功后，需要等待datanode启动成功并通过心跳汇报datanode上存储的block信息，有足够的block拥有指定的副本数之后，并等待特定时间后（通过参数dfs.namenode.safemode.extensions 30000控制），主动退出安全模式。</p>
</blockquote>
<ul>
<li>直接原因：</li>
</ul>
<ol>
<li>部分datanode启动失败或者因为网络原因与namenode心跳连接失败</li>
<li>部分datanode节点存储hdfs数据的磁盘卷有损坏，导致存储在该磁盘卷中的数据无法提取</li>
<li>部分datanode节点存储hdfs数据的磁盘分区空间满，导致存储在该磁盘卷中的数据无法正常读取</li>
</ol>
<h4 id="十三-修复问题–修复数据"><a href="#十三-修复问题–修复数据" class="headerlink" title="十三 修复问题–修复数据"></a>十三 修复问题–修复数据</h4><p>比如如果有datanode未成功启动，则尝试修复并启动对应的datanode<br>比如如果有datanode存储hdfs数据的磁盘分区空间满，则尝试扩展磁盘分区空间<br>比如如果有datanode存在存储卷故障，则尝试修复存储卷，如果无法修复则需要替换存储卷（会丢失存储卷上的数据）</p>
<p>需要注意的是，如果出现了某些datanode彻底损坏无法启动，或某些datanode节点磁盘卷故障彻底无法修复的情况，则这些数据对应的block及block上层的hdfs文件，就被丢失了，就需要补数据（从上游重新拉取数据，或重新运行作业生成数据），也可能无法补。</p>
<h4 id="十四-HDFS在读取文件的时候，如果其中一个块突然损坏了怎么办？"><a href="#十四-HDFS在读取文件的时候，如果其中一个块突然损坏了怎么办？" class="headerlink" title="十四 HDFS在读取文件的时候，如果其中一个块突然损坏了怎么办？"></a>十四 HDFS在读取文件的时候，如果其中一个块突然损坏了怎么办？</h4><p>  Cilent读取完DataNode上的块之后会进行checksum验证，也就是把客户端读取到本地的块与HDFS上的原始块进行校验，如果发现校验结果不一致，客户端会通知NameNode，然后再从下一个拥有该block副本的DataNode继续读。</p>
<h4 id="十五-HDFS在上传文件的时候，如果其中一个DataNode突然挂掉了怎么办？"><a href="#十五-HDFS在上传文件的时候，如果其中一个DataNode突然挂掉了怎么办？" class="headerlink" title="十五 HDFS在上传文件的时候，如果其中一个DataNode突然挂掉了怎么办？"></a>十五 HDFS在上传文件的时候，如果其中一个DataNode突然挂掉了怎么办？</h4><p>  客户端上传文件时与DataNode建立pipeline管道，管道的正方向是客户端向DataNode发送的数据包，管道反方向是DataNode向客户端发送ack确认，也就是正确接收到数据包之后发送一个已确认接收到的应答。</p>
<p>  当DataNode突然挂掉了，客户端接收不到这个DataNode发送的ack确认，客户端会通知NameNode，NameNode检查该块的副本与规定的不符，NameNode会通知DataNode去复制副本，并将挂掉的DataNode做下线处理，不再让它参与文件上传与下载。</p>
<h4 id="十六-NameNode在启动的时候会做哪些操作？"><a href="#十六-NameNode在启动的时候会做哪些操作？" class="headerlink" title="十六 NameNode在启动的时候会做哪些操作？"></a>十六 NameNode在启动的时候会做哪些操作？</h4><p>NameNode数据存储在内存和本地磁盘，本地磁盘数据存储在fsimage镜像文件和edits编辑日志文件。</p>
<p>首次启动NameNode：</p>
<ol>
<li><p>格式化文件系统，为了生成fsimage镜像文件</p>
</li>
<li><p>启动NameNode：</p>
<ol>
<li>读取fsimage文件，将文件内容加载进内容</li>
<li>等待DataNode注册与发送block report</li>
</ol>
</li>
<li><p>启动DataNode：</p>
<ol>
<li>向NameNode注册</li>
<li>发送block report</li>
<li>检查fsimage中记录的块的数量和block report中的块是总数是否相同</li>
</ol>
</li>
<li><p>对文件系统进行操作（创建目录、上传文件、删除文件等）：</p>
<p>此时内存中已经有文件系统改变的信息，但是磁盘中没有文件系统改变的信息，此时会将这些改变信息写入edits中，edits文件中存储的是文件系统元数据改变的信息</p>
</li>
</ol>
<p>第二次启动NameNode：</p>
<ol>
<li>读取fsimage和edits文件；</li>
<li>将fsimage和edits文件合并成新的fsimage文件；</li>
<li>创建新的edits文件，内容开始为空；</li>
<li>启动DataNode</li>
</ol>
<h4 id="十七-谈谈对Secondary-NameNode的了解，它的工作机制是怎样的？"><a href="#十七-谈谈对Secondary-NameNode的了解，它的工作机制是怎样的？" class="headerlink" title="十七 谈谈对Secondary NameNode的了解，它的工作机制是怎样的？"></a>十七 谈谈对Secondary NameNode的了解，它的工作机制是怎样的？</h4><p>Secondary NameNode是合并NameNode的edits logs到fsimage文件中。</p>
<p>它的具体工作机制：</p>
<ol>
<li>Secondary NameNode询问NameNode是否需要checkpoint。直接带回结果；</li>
<li>Secondary NameNode请求执行checkpoint；</li>
<li>NameNode滚动正在写的edits日志；</li>
<li>将滚动前的edits日志和fsimage镜像文件拷贝到Secondary NameNode；</li>
<li>Secondary NameNode加载edits日志和fsimage镜像文件到内存，并合并；</li>
<li>生成新的镜像文件fsimage.checkpoint；</li>
<li>拷贝到fsimage.checkpoint到NameNode；</li>
<li>NameNode将fsimage.checkpoint重新命名成fsimage；</li>
</ol>
<p>所以如果NameNode中的元数据丢失，是可以从Secondary NameNode恢复一部分元数据信息的，但不是全部，因为NaneNode正在写的edits日志还没有拷贝到Secondary NameNode，这部分恢复不了。</p>
<h4 id="十八-Secondary-NameNode不能恢复NameNode的全部数据，那如何保证NameNode数据存储安全？"><a href="#十八-Secondary-NameNode不能恢复NameNode的全部数据，那如何保证NameNode数据存储安全？" class="headerlink" title="十八 Secondary NameNode不能恢复NameNode的全部数据，那如何保证NameNode数据存储安全？"></a>十八 Secondary NameNode不能恢复NameNode的全部数据，那如何保证NameNode数据存储安全？</h4><p>这个问题就要说NameNode的高可用了，即NameNode HA。</p>
<p>一个NameNode有单点故障问题，那就配置两个NameNode，配置有两个关键点，一是必须要保证这两个NameNode的元数据信息必须要同步的，二是一个NameNode挂掉之后另一个要立马补上。</p>
<ol>
<li>元数据信息同步在HA方案中采用的是“共享存储”。每次写文件时，需要将日志同步写入共享存储，这个步骤成功才能认定写文件成功。然后备份节点定期从共享存储同步日志，以便进行主备切换。</li>
<li>监控NameNode状态采用zookeeper，两个NameNode节点的状态存放在zookeeper中，另外，两个NameNode节点分别有一个进程监控程序–ZKFC，实时读取zookeeper中NameNode的状态，来判断当前的NameNode是不是已经宕机。如果Standby的NameNode节点的ZKFC发现主节点已经挂掉，那么就会强制给原本的Active NameNode节点发送强制关闭请求，之后将Standby的NameNode设置为Active。</li>
</ol>
<h4 id="十九-在NameNode-HA中，会出现脑裂问题吗？怎么解决脑裂？"><a href="#十九-在NameNode-HA中，会出现脑裂问题吗？怎么解决脑裂？" class="headerlink" title="十九 在NameNode HA中，会出现脑裂问题吗？怎么解决脑裂？"></a>十九 在NameNode HA中，会出现脑裂问题吗？怎么解决脑裂？</h4><p>会出现脑裂问题：假设 NameNode1 当前为 Active 状态，NameNode2 当前为 Standby 状态。如果某一时刻 NameNode1 发生了“假死”现象（在进行垃圾回收时 和 网络延迟大时 可能发生），那么 Zookeeper 服务端会认为 NameNode1 挂掉了，根据前面的主备切换逻辑，NameNode2 会替代 NameNode1 进入 Active 状态。但是此时 NameNode1 可能仍然处于 Active 状态正常运行，这样 NameNode1 和 NameNode2 都处于 Active 状态，都可以对外提供服务。这种情况称为脑裂。</p>
<p>脑裂对于NameNode这类对数据一致性要求非常高的系统来说是灾难性的，数据会发生错乱且无法恢复。zookeeper社区对这种问题的解决方法叫做fencing（隔离），也就是想办法把旧是Active NameNode隔离起来，使它不能正常对外提供服务。</p>
<p>在进行fencing的时候，会执行以下操作：</p>
<ol>
<li>首先尝试调用这个旧Active NameNode的HAServiceProtocol RPC接口的transition ToStandby方法，看能不能把它转换为Standby状态。</li>
<li>如果失败，那么就执行Hadoop配置文件之中预定义的隔离措施，Hadoop目前主要提供两种隔离措施，通常会选择sshfence：<ol>
<li>sshfence：通过SSH登录到目标机器上，执行命令fuser将对应的进程杀死；</li>
<li>shellfence：执行一个用户自定义的shell脚本来将对应的进程隔离。</li>
</ol>
</li>
</ol>
<h4 id="二十-小文件过多会有什么危害，如何避免？"><a href="#二十-小文件过多会有什么危害，如何避免？" class="headerlink" title="二十 小文件过多会有什么危害，如何避免？"></a>二十 小文件过多会有什么危害，如何避免？</h4><p>Hadoop上大量HDFS元数据信息存储在NameNode内存中，因此过多的小文件必定会压垮NameNode的内存。</p>
<p>每个元数据对象约占50byte，所以如果有1千万个小文件，每个文件占用一个block，则NameNode大约需要2G空间。如果存储1亿个文件，则NameNode需要20G空间。</p>
<p>显而易见的解决这个问腿的方法就是合并小文件，可以选择在客户端上传时执行一定的策略先合并，或者是使用Hadoop的CombineFileInputFormat&lt;K,V&gt;实现小文件的合并。</p>
<h4 id="二十一-请说下HDFS的组织架构"><a href="#二十一-请说下HDFS的组织架构" class="headerlink" title="二十一 请说下HDFS的组织架构"></a>二十一 请说下HDFS的组织架构</h4><ol>
<li>Client：客户端<ol>
<li>切分文件。文件上传HDFS的时候，Client将文件切分成一个一个的Block，然后进行存储</li>
<li>与NameNode交互，获取文件的位置信息</li>
<li>与DataNode交互，读取或者写入数据</li>
<li>Client提供一些命令来管理HDFS，比如启动关闭HDFS、访问HDFS目录及内容（hdfs dfs -ls &#x2F;）等</li>
</ol>
</li>
<li>NameNode：名称节点，也称主节点，存储数据的元数据信息，不存储具体的数据<ol>
<li>管理HDFS的名称空间</li>
<li>管理数据块映射信息</li>
<li>配置副本策略</li>
<li>处理客户端读写请求</li>
</ol>
</li>
<li>DataNode：数据节点，也称从节点。NameNode下达命令，DataNode执行实际的操作<ol>
<li>存储实际的数据块</li>
<li>执行数据块的读&#x2F;写操作</li>
</ol>
</li>
<li>Secondary NameNode：并非NameNode的热备。当NameNode挂掉的时候，它并不能马上替换NameNode并提供服务<ol>
<li>辅助NameNode，分担其工作量</li>
<li>定期合并Fsimage和Edits，并推送给NameNode</li>
<li>在紧急情况下，可辅助恢复NameNode</li>
</ol>
</li>
</ol>
<h4 id="二十二-请说下MR中的Map-Task的工作机制"><a href="#二十二-请说下MR中的Map-Task的工作机制" class="headerlink" title="二十二 请说下MR中的Map Task的工作机制"></a>二十二 请说下MR中的Map Task的工作机制</h4><p>简单概述：</p>
<p>inputFile通过split被切割为多个split文件，通过Record按行读取内容给map（自己写的处理逻辑的方法），数据被map处理完之后，交给OutputCollect收集器，对其结果key进行分区（默认使用的hashPartitioner），然后写入buffer，每个map task都有一个内存缓冲区（环形缓冲区），存放着map的输出结果，当缓冲区快满的时候需要将缓冲区的数据以一个临时文件的方式溢写到磁盘，当整个map task结束后再对磁盘中这个map task产生的所有临时文件做合并，生成最终的正式输出文件，然后等待reduce task的拉取。</p>
<p>详细步骤：</p>
<ol>
<li>读取数据组件 InputFormat（默认 TextInputFormat）会通过 getSplits 方法对输入目录中的文件进行逻辑切片规划得到InputSplit，有多少个InputSplit就对应启动多少个map task</li>
<li>将输入文件切分为InputSplit之后，由RecordReader对象（默认是LineRecordReader）进行读取，以 \n 作为分隔符，读取一行数据，返回&lt;key,value&gt;，key表示每行首字符偏移量，value表示这一行文本内容</li>
<li>读取InputSplit返回&lt;key,value&gt;，进入用户自己继承的Mapper类中，执行用户重写的map函数，RecordReader读取一行这里调用一次</li>
<li>Mapper逻辑结束之后，将Mapper的每条结果通过 context.write进行collect数据收集。在collect中，会先对其进行分区处理，默认使用HashPartitioner</li>
<li>接下来，会将数据写入内存，内存中这片区域叫做环形缓冲区（默认100M），缓冲区的作用是批量收集Mapper结果，减少磁盘IO的影响。我们的key&#x2F;value键值对以及Partition的结果都会被写入缓冲区。当然，写入之前，key与value值都会被序列化成字节数组</li>
<li>当环形缓冲区的数据达到溢写比例（默认0.8），也就是80M时，溢写线程启动，需要对这80M空间内的数据做排序和合并。排序是MR模型默认的行为，这里的排序也是对序列化的字节做的排序</li>
<li>合并溢写文件，每次溢写会在磁盘上生成一个临时溢出文件（写之前判断是否有Combiner），如果Mapper的输出结果真的很大，有多次这样的溢写发生，磁盘上相应的就会有多个临时溢出文件存在。当整个数据处理结束之后开始对磁盘中的所有临时文件进行Merge归并、排序，因为最终的文件只有一个写入磁盘，并且为这个文件提供了一个索引文件，以记录每个reduce对应数据的偏移量</li>
</ol>
<h4 id="二十三-请说下MR中Reduce-Task的工作机制"><a href="#二十三-请说下MR中Reduce-Task的工作机制" class="headerlink" title="二十三 请说下MR中Reduce Task的工作机制"></a>二十三 请说下MR中Reduce Task的工作机制</h4><p>简单描述：</p>
<p>Reduce大致分为copy、sort、reduce三个阶段，重点在前两个阶段</p>
<p>copy阶段包含一个eventFetcher来获取已完成的map列表，由Fetcher线程去copy数据，在此过程中启动两个merge线程，分别为inMemoryMerger和onDiskMerger，分别将内存中的数据merge到磁盘和磁盘中是数据进行merge。待数据copy完成之后，copy阶段就完成了。</p>
<p>开始sort阶段，sort阶段主要是执行finalMerge操作，纯粹的sort阶段，完成之后就是reduce阶段，调用用户定义的reduce函数进行处理</p>
<p>详细步骤：</p>
<ol>
<li><p>Copy阶段：简单地拉取数据。Reduce进程启动一些数据copy线程（Fetcher），通过HTTP方式请求map task获取属于自己的文件（map task的分区会标识每个map task属于哪个reduce task，默认reduce task的标识从0开始）</p>
</li>
<li><p>Merge阶段：在远程拷贝数据的同时，Reduce Task启动了两个后台线程对内存和磁盘上的文件进行合并，以防止内存使用过多或磁盘文件过多</p>
<p>merge有三种形式：内存到内存；内存到磁盘；磁盘到磁盘。默认情况下第一种形式不启用。当内存中的数据量到达一定阈值，就直接启动内存到磁盘的merge。与map端类似，这也是溢写的过程，这个过程中如果你设置有Combiner，也是会启用的，然后在磁盘中生成了众多的溢写文件。内存到磁盘的merge方式一直在运行，直到没有map端的数据时才结束，然后启动第三种磁盘到磁盘的merge方式生成最终的文件</p>
</li>
<li><p>合并排序：把分散的数据合并成一个大的数据后，还会再对合并后的数据排序</p>
</li>
<li><p>对排序后的键值对调用reduce方法：键相等的键值对调用一次reduce方法，每次调用会产生零个或者多个键值对，最后把这些输出的键值对写入到HDFS文件中</p>
</li>
</ol>
<h4 id="二十四-请说下MR中的shuffle阶段"><a href="#二十四-请说下MR中的shuffle阶段" class="headerlink" title="二十四 请说下MR中的shuffle阶段"></a>二十四 请说下MR中的shuffle阶段</h4><p>shuffle阶段分为四个步骤：分区、排序、规约、分组，其中前三个步骤在map阶段完成，最后一个步骤在reduce阶段完成</p>
<p>shuffle是MR的核心，它分布在MR的map阶段和reduce阶段。一般把从map产生输出开始到reduce取得数据作为输入之前的过程称作shuffle</p>
<ol>
<li>Collect阶段：将Map Task的结果输出到默认为100M的环形缓冲区，保存的是key&#x2F;value，Partition分区信息等</li>
<li>Spill阶段：当内存中的数据量达到一定的阈值的时候，就会将数据写入本地磁盘，在将数据写入磁盘之前需要对数据进行一次排序的操作，如果配置了Combiner，还会将有相同分区号和key的数据进行排序</li>
<li>Map Task阶段的Merge：把所有溢出的临时文件进行一次合并操作，以确保一个Map Task最终只产生一个中间数据文件</li>
<li>Copy阶段：Reduce Task启动Fetcher线程到已完成Map Task的节点上复制一份属于自己的数据，这些数据默认会保存在内存的缓冲区中，当内存的缓冲区达到一定阈值的时候，就会将数据写到磁盘上</li>
<li>Reduce Task阶段的Merge：在Reduce Task远程复制数据的同时，会在后台开启两个线程对内存到本地的数据文件进行合并操作</li>
<li>Sort阶段：在对数据进行合并的同时，会进行排序操作，由于Map Task阶段已经对数据进行了局部的排序，Reduce Task只需保证copy的数据的最终整体有效性即可</li>
</ol>
<p>Shuffle中的缓冲区大小会影响到MR程序的执行效率，原则上说，缓冲区越大，磁盘io的次数越少，执行速度越快。缓冲区的大小可以通过参数调整，参数：mapreduce.task.io.sort.mb 默认100M</p>
<h4 id="二十五-shuffle阶段的数据压缩机制了解吗？"><a href="#二十五-shuffle阶段的数据压缩机制了解吗？" class="headerlink" title="二十五 shuffle阶段的数据压缩机制了解吗？"></a>二十五 shuffle阶段的数据压缩机制了解吗？</h4><p>在shuffle阶段，可以看到数据通过大量拷贝，从map阶段输出的数据，都要通过网络拷贝，发送到reduce阶段，这一过程中，涉及到大量的网络IO，如果数据能够进行压缩，那么数据的发送量就会少很多</p>
<p>hadoop当中支持的压缩算法：gzip、bzip2、LZO、LZ4、Snappy，这几种压缩算法综合压缩和解压缩的速率，谷歌的Snappy是最优的，一般都选择Snappy压缩。</p>
<h4 id="二十六-在写MR时，什么情况下可以使用规约？"><a href="#二十六-在写MR时，什么情况下可以使用规约？" class="headerlink" title="二十六 在写MR时，什么情况下可以使用规约？"></a>二十六 在写MR时，什么情况下可以使用规约？</h4><p>规约（Combiner）是不能够影响任务的运行结果的局部汇总，适用于求和类，不适用于求平均值，如果reduce的输入参数类型和输出参数的类型是一样的，则规约的类可以使用reduce类，只需要在驱动类中指明规约的类即可</p>
<h4 id="二十七-YARN集群的架构和工作原理知道多少？"><a href="#二十七-YARN集群的架构和工作原理知道多少？" class="headerlink" title="二十七 YARN集群的架构和工作原理知道多少？"></a>二十七 YARN集群的架构和工作原理知道多少？</h4><p>YARN的基本设计思想是将MapReduce V1中的JobTracker拆分为两个独立的服务：ResourceManager和ApplicationMaster</p>
<p>ResourceManager负责整个系统的资源管理和分配，ApplicationMaster负责单个应用程序的管理</p>
<ol>
<li><p>ResourceManager：RM是一个全局的资源管理器，负责整个系统的资源管理和分配，它由两个部分组成：调度器（Scheduler）和应用程序管理器（Application Manager）</p>
<p>调度器根据容量、队列等限制条件，将系统中的资源分配给正在运行的应用程序，在保证容量、公平性和服务等级的前提下，优化集群资源利用率，让所有的资源都被充分利用。应用程序管理器负责管理整个系统中的所有的应用程序，包括应用程序的提交、与调度器协商资源以启动ApplicationMaster、监控ApplicationMaster运行状态并在失败时重启它。</p>
</li>
<li><p>ApplicationMaster：用户提交的一个应用程序会ApplicationMaster，它的主要功能有：</p>
<ol>
<li>与RM调度器协商以获得资源，资源以Container表示</li>
<li>将得到的任务进一步分配给内部的任务</li>
<li>与NM通信与启动&#x2F;停止任务</li>
<li>监控所有的内部任务状态，并在任务运行失败的时候重新为任务申请资源以重启任务</li>
</ol>
</li>
<li><p>NodeManager：NodeManager是每个节点上的资源和任务管理器，一方面，它会定期地向RM汇报本节点上的资源使用情况和各个Container的运行状态；另一方面，他接收并处理来自AM的Container启动和停止使用请求</p>
</li>
<li><p>Container：Container是YARN中的资源抽象，封装了各种资源。一个应用程序会分配一个Container，这个应用程序只能使用Container中描述的资源。不同于MapReduce V1中槽位solt的资源封装，Container是一个动态资源的划分单位，更能充分利用资源。</p>
</li>
</ol>
<blockquote>
<p>可以把YARN中的ResourceManager比作一个工程公司，其中调度器比作财务部，负责财务（资源）的管理；应用程序管理器比作研发部，负责管理研发任务；ApplicationMaster比作研发部门的小组，但是不是事先存在的，有任务才产生；NodeManager比作研发小组中的组员；Container比作给的钱。<br>当一个研发任务被客户提交给公司，研发部跟财务部协商，打第一份钱来组成研发小组，研发小组成立，如果还有足够余钱（因为组成这个小组会花钱，比如配电脑什么的），就直接分配任务和钱给组员。否则就向财务部申请money，再分配给组员。在这个过程中，组员会向小组汇报任务进程，小组会向研发部汇报进程。</p>
</blockquote>
<h4 id="二十八-YARN的任务提交流程是怎样的？"><a href="#二十八-YARN的任务提交流程是怎样的？" class="headerlink" title="二十八 YARN的任务提交流程是怎样的？"></a>二十八 YARN的任务提交流程是怎样的？</h4><p>当JobClient向YARN提交一个应用程序后，YARN将分两个阶段运行这个应用程序：一是启动ApplicationMaster；二是由ApplicationMaster创建应用程序，为它申请资源，监控运行直到结束。具体步骤如下：</p>
<ol>
<li>用户向YARN提交一个应用程序，并指定ApplicationMaster程序、启动ApplicationMaster、用户程序</li>
<li>RM为这个应用程序分配第一个Container，并与之对应的NM通讯，要求他在这个Container中启动应用程序ApplicationMaster</li>
<li>ApplicationMaster向RM注册，然后拆分为内部各个子任务，为各个内部任务申请资源，并监控这些任务的运行，直到结束</li>
<li>AM采用轮询的方式向RM申请和领取资源</li>
<li>RM为AM分配资源，以Container形式返回</li>
<li>AM申请到资源后，便与之对应的NM通讯，要求NM启动任务</li>
<li>NodeManager为任务设置好运行环境，将任务启动命令写到一个脚本中，并通过运行这个脚本启动任务</li>
<li>各个任务向AM汇报自己的状态和进度，以便当任务失败时可以重启任务</li>
<li>应用程序完成后，ApplicationMaster向ResourceManager注销并关闭自己</li>
</ol>
<h4 id="二十九-YARN的资源调度三种模型了解吗？"><a href="#二十九-YARN的资源调度三种模型了解吗？" class="headerlink" title="二十九 YARN的资源调度三种模型了解吗？"></a>二十九 YARN的资源调度三种模型了解吗？</h4><p>在YARN中有三种调度器可以选择：FIFO Scheduler、Capacity Scheduler、Fair Scheduler</p>
<p>Apache版本的hadoop默认使用的是Capacity Scheduler调度方式。CDH版本的默认使用的是Fair Scheduler调度方式</p>
<p>FIFO Scheduler（先来先服务）：</p>
<p>FIFO Scheduler把应用按提交的顺序排成一个队列，这是一个先进先出队列，在进行资源分配的时候，先给队列中最头上的应用分配资源，待最头上的应用需求满足后再给下一个分配</p>
<p>FIFO Scheduler是最简单也是最容易理解的调度器，也不需要任何配置，但它并不适用于共享集群。大的应用可能会占用所有集群资源，这就导致其他应用被阻塞。</p>
<p>Capacity Scheduler（能力调度器）：</p>
<p>对于Capacity调度器，有一个专门的队列用来运行小任务，但是为小任务专门设置一个队列会预先占用一定的集群资源，这就导致大任务的执行时间会落后于使用FIFO Scheduler调度器时的时间</p>
<p>Fair Scheduler（公平调度器）：</p>
<p>在Fair调度器中，我们不需要预先占用一定的系统资源，Fair调度器会为所有的job动态的调整系统资源</p>
<p>比如：当第一个大job提交时，只有这一个job在运行，此时它获得了所有集群资源；当第二个小job提交后，Fair调度器会分配一半资源给这个小job，让这两个任务公平的共享集群资源</p>
<p>需要注意的是，在Fair调度器中，第二个任务从提交到获得资源会有一定延迟，因为它需要等待第一个任务释放占用的Container。小任务执行完成之后，也会释放自己占用的资源，大人物又获得了全部的系统资源。最终的效果就是Fair调度器即得到了高的资源利用率又能保证小任务及时完成。</p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>Java SSM框架</title>
    <url>/2023/06069152.html</url>
    <content><![CDATA[<h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><h3 id="Spring-Framework系统架构"><a href="#Spring-Framework系统架构" class="headerlink" title="Spring Framework系统架构"></a>Spring Framework系统架构</h3><p>Spring Framework是Spring生态圈中最基础的项目，是其他项目的根基</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230606215746774.png" alt="image-20230606215746774"><figcaption>image-20230606215746774</figcaption></figure></p>
<h3 id="Spring核心"><a href="#Spring核心" class="headerlink" title="Spring核心"></a>Spring核心</h3><p>代码书写现状：耦合性偏高<br>解决方案：使用对象时，在程序中不要注定使用new产生对象，转换为由<strong>外部</strong>提供对象</p>
<h4 id="IoC（Inversion-of-Control）控制反转"><a href="#IoC（Inversion-of-Control）控制反转" class="headerlink" title="IoC（Inversion of Control）控制反转"></a>IoC（Inversion of Control）控制反转</h4><p>使用对象时，由主动new产生对象转换为<strong>由外部提供对象</strong>，此过程中对象的创建控制权由程序转移到<strong>外部</strong>，这种思想称为控制反转</p>
<p>Spring技术对IOC思想进行了实现：Spring提供了一个容器，称为<strong>IoC容器</strong>（系统架构中的Core Container），用来充当IoC思想的“<strong>外部</strong>”。<br>IoC容器负责对象的创建、初始化等一系列工作，被创建或被管理的对象在IoC容器中被称为<strong>Bean</strong></p>
<h4 id="DI-Dependency-Injection-依赖注入"><a href="#DI-Dependency-Injection-依赖注入" class="headerlink" title="DI (Dependency Injection) 依赖注入"></a>DI (Dependency Injection) 依赖注入</h4><p>在容器中建立Bena与Bean之间的依赖关系的整个过程,称为依赖注入</p>
<p>目标:充分解耦</p>
<ol>
<li>使用IoC容器管理bean (IoC)</li>
<li>在IoC容器内将有依赖关系的bean进行绑定 (DI)</li>
</ol>
<p>最终效果:使用对象时不仅可以直接从IoC容器中获取,并且获取到的bean已经绑定了所有的依赖关系</p>
<h5 id="Bean实例化方式"><a href="#Bean实例化方式" class="headerlink" title="Bean实例化方式"></a>Bean实例化方式</h5><ul>
<li>无参构造实例化bean</li>
<li>静态工厂实例化bean</li>
<li>实例工厂实例化bean</li>
<li>FactoryBean实例化bean</li>
</ul>
<h5 id="Bean的生命周期"><a href="#Bean的生命周期" class="headerlink" title="Bean的生命周期"></a>Bean的生命周期</h5><p>生命周期：从创建到消亡的完整过程<br>Bean生命周期：bean从创建到销毁的整体过程（对象从创建到销毁）<br>Bean生命周期控制：在bean创建后到销毁前做一些事情</p>
<p>1、bean生命周期控制：</p>
<ul>
<li><p>配置</p>
<p>init-method</p>
<p>destory-method</p>
</li>
<li><p>接口</p>
<p>InitializingBean</p>
<p>DisposableBean</p>
</li>
</ul>
<p>2、关闭容器：</p>
<ul>
<li><p>ConfigurableApplicationContext</p>
<p>close()</p>
<p>registerShutdownHook()</p>
</li>
</ul>
<h5 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h5><p>向一个类中传递数据的方式：</p>
<ul>
<li>普通方法（set方法）</li>
<li>构造方法</li>
</ul>
<p>创建Bean依赖的数据类型：</p>
<ul>
<li>引用类型</li>
<li>简单类型（基本数据类型与String）</li>
</ul>
<p>依赖注入方式：</p>
<ul>
<li><p>setter注入</p>
<p>简单类型</p>
<p>引用类型</p>
</li>
<li><p>构造器注入</p>
<p>简单类型</p>
<p>引用类型</p>
</li>
</ul>
<p>依赖注入方式选择：</p>
<ol>
<li>强制依赖使用构造器进行，使用setter注入有概率不进行注入导致null对象出现</li>
<li>可选依赖使用setter注入进行，灵活性强</li>
<li>Spring框架倡导使用构造器，第三方框架内部大多数采用构造器注入的形式进行数据初始化，相对严谨</li>
<li>如果有必要可以两者同时使用，使用构造器注入完成强制依赖的注入，使用setter注入完成可选依赖的注入</li>
<li>实际开发过程中还要根据实际情况分析，如果受控对象没有提供setter方法就必须使用构造器注入</li>
<li>自己开发的模块推荐使用setter注入</li>
</ol>
<p>依赖自动装配：</p>
<p>​    IoC容器根据bean所依赖的资源在容器中<strong>自动查找并注入</strong>到bean中的过程称为自动装配</p>
<p>自动装配方式：</p>
<ul>
<li>按类型（常用）</li>
<li>按名称</li>
<li>按构造方法</li>
<li>不启用自动装配</li>
</ul>
<p>依赖自动装配特征：</p>
<ul>
<li>自动装配用于引用类型依赖注入，不能对简单类型进行操作</li>
<li>使用按类型装配时（byType）必须保障容器中相同类型的bean唯一，推荐使用</li>
<li>使用按名称装配时（byName）必须保障容器中具有指定名称的bean，因变量名与配置耦合，不推荐使用</li>
<li>自动装配优先级低于setter注入与构造器注入，同时出现自动装配配置失效</li>
</ul>
<h5 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h5><p>创建容器：</p>
<ul>
<li>ClassPathXmlApplicationContext</li>
<li>FileSystemXmlApplicationContext</li>
</ul>
<p>获取bean：</p>
<ul>
<li>获取之后强转</li>
<li>获取时添加获取的类型参数</li>
<li>按照类型获取</li>
</ul>
<h4 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h4><h5 id="注解开发定义bean"><a href="#注解开发定义bean" class="headerlink" title="注解开发定义bean"></a>注解开发定义bean</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//加载配置类初始化容器</span>
ApplicationContext ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>SpringConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
</code></pre>
<p>@Configuration注解用于设定当前类为配置类<br>@ComponentScan注解用于设定扫描路径，此注解只能添加一次，多个数据请用数组格式</p>
<p>Spring提供@Componemt注解的三个衍生注解</p>
<ol>
<li>@Controller：用于表现层bean定义</li>
<li>@Service：用于业务层bean定义</li>
<li>@Repository：用于数据层bean定义</li>
</ol>
<p>@Autowired注解用于自动装配类型<br>@Value注解用于设定简单类型的值<br>@PropertySource注解加载properties文件</p>
<h4 id="AOP（Aspect-Oriented-Programming）面向切面编程"><a href="#AOP（Aspect-Oriented-Programming）面向切面编程" class="headerlink" title="AOP（Aspect Oriented Programming）面向切面编程"></a>AOP（Aspect Oriented Programming）面向切面编程</h4><p>一种编程范式，指导开发者如何组织程序结构–（OOP（Object Oriented Programming）面向对象编程）</p>
<blockquote>
<p>作用：在不惊动原始设计的基础上为其进行<strong>功能增强</strong><br>Spring理念：无入侵式&#x2F;无侵入式</p>
</blockquote>
<h5 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h5><ul>
<li>连接点（JoinPoint）：程序执行过程中的任意位置，粒度为执行方法、抛出异常、设置变量等<br>在SpringAOP中，理解为方法的执行</li>
<li>切入点（PointCut）：要进行功能增强的方法<br>切入点表达式：匹配连接点的式子<br>在SpringAOP中，一个切入点表达式可以只描述一个具体方法，也可以匹配多个方法<br>一个具体方法：com.itheima.dao包下的BookDao接口中的无形参无返回值的save方法<br>匹配多个方法：所有的save方法，所有的get开头的方法，所有以Dao结尾的接口中的任意方法，所有带有一个参数的方法</li>
<li>通知（Advice）：在切入点处执行的操作，也就是共性功能<br>在SpringAOP中，功能最终以方法的形式呈现</li>
<li>通知类：定义通知的类</li>
<li>切面（Aspect）：描述通知与切入点的对应关系</li>
</ul>
<h5 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h5><ol>
<li><p>Spring容器启动</p>
</li>
<li><p>读取所有切面配置中的切入点</p>
</li>
<li><p>初始化bean，判定bean对应的类中的方法是否匹配到任意切入点</p>
<p>匹配失败，创建对象</p>
<p>匹配成功，创建原始对象（<strong>目标对象</strong>）的<strong>代理</strong>对象</p>
</li>
<li><p>获取bean执行方法</p>
<p>获取bean，调用方法并执行，完成操作</p>
<p> 获取的bean是代理对象时，根据代理对象的运行模式运行原始方法与增强的内容，完成操作</p>
</li>
</ol>
<p>目标对象（Target）：原始功能去掉共性功能对应的类产生的对象，这种对象是无法直接完成最终工作的</p>
<p>代理（Proxy）：目标对象无法直接完成的工作，需要对其进行功能回填，通过原始对象的代理对象实现</p>
<blockquote>
<p>SpringAOP本质：代理模式</p>
</blockquote>
<h5 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h5><p>切入点表达式标准格式：动作关键字（访问修饰符 返回值 包名.类&#x2F;接口名.方法名（参数） 异常名）</p>
<blockquote>
<p>Execution (public User com.itheima.service.UserService.findById(int))</p>
</blockquote>
<ul>
<li>动作关键字：描述切入点的行为动作，例如execution表示执行到指定切入点</li>
<li>可以使用通配符描述切入点，快速描述</li>
</ul>
<h5 id="通知获取数据"><a href="#通知获取数据" class="headerlink" title="通知获取数据"></a>通知获取数据</h5><ul>
<li><p>获取切入点方法的参数</p>
<p>JoinPoint：适用于前置、后置、返回后、抛出异常后通知</p>
<p>ProceedJoinPoint：适用于环绕通知</p>
</li>
<li><p>获取切入点方法返回值</p>
<p>返回后通知</p>
<p>环绕通知</p>
</li>
<li><p>获取切入点方法运行异常信息</p>
<p> 抛出异常后通知</p>
<p>环绕通知</p>
</li>
</ul>
<h4 id="Spring事务"><a href="#Spring事务" class="headerlink" title="Spring事务"></a>Spring事务</h4><p>事务简介</p>
<p>Spring事务作用：在<strong>数据层或业务层</strong>保障一系列的数据库操作同成功同失败</p>
<p>开启事务步骤：</p>
<ol>
<li>在业务层接口上添加Spring事务管理</li>
<li>设置事务管理器</li>
<li>开启注解式事务驱动</li>
</ol>
<blockquote>
<p>注意事项：Spring注解式事务通常添加在业务层接口中而不会添加到业务层实现类中，降低耦合。注解式事务可以添加到业务方法上表示当前方法开启事务，也可以添加到接口上表示当前接口所有方法开启事务。</p>
</blockquote>
<p>事务角色</p>
<ul>
<li>事务管理员：发起事务方，在Spring中通常指代业务层开启事务的方法</li>
<li>事务协调员：加入事务方，在Spring中通常指代数据层方法，也可以是业务层方法</li>
</ul>
<p>事务属性</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230607225604276.png" alt="image-20230607225604276"><figcaption>image-20230607225604276</figcaption></figure></p>
<h3 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h3><h4 id="SpringMVC简介"><a href="#SpringMVC简介" class="headerlink" title="SpringMVC简介"></a>SpringMVC简介</h4><p>概述</p>
<p>SpringMVC技术与Servlet技术功能等同，均属于web层开发技术</p>
<p>SpringMVC是一种表现层框架技术，用于表现层功能开发</p>
<p>SpringMVC是一种基于Javahi实现MVC模型的轻量级WEB框架</p>
<p>优点</p>
<ul>
<li>使用简单，开发便捷</li>
<li>灵活性强</li>
</ul>
<h5 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h5><p>名称：@Controller<br>类型：类注解<br>位置：SpringMVC控制器类定义上方<br>作用：设定SpringMVC的核心控制器bean<br>范例：     </p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p>名称：@ResponseBody<br>类型：方法注解<br>位置：SpringMVC控制器方法定义上方<br>作用：设置当前控制器方法响应内容为当前返回值，无需解析<br>范例：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/save"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ResponseBody</span>
<span class="token keyword">public</span> String <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user save ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">"&amp;#123;'info':'springmvc'&amp;#125;"</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h6 id="SpringMVC入门程序开发总结（1-N）"><a href="#SpringMVC入门程序开发总结（1-N）" class="headerlink" title="SpringMVC入门程序开发总结（1+N）"></a>SpringMVC入门程序开发总结（1+N）</h6><p>1次工作:</p>
<ul>
<li>创建工程，设置服务器，加载工程</li>
<li>导入坐标</li>
<li>创建Web容器启动类，加载SpringMVC配置，并设置SpringMVC请求拦截路径</li>
<li>SpringMVC核心配置类（设置配置类，扫描controller包，加载Controller控制器bean）</li>
</ul>
<p>N次工作:</p>
<ul>
<li>定义处理请求的控制器类</li>
<li>定义处理请求的控制器方法，并配置映射路径（@RequestMapping）与返回json数据（@ResponseBody）</li>
</ul>
<h6 id="入门案例工作流程分析"><a href="#入门案例工作流程分析" class="headerlink" title="入门案例工作流程分析"></a>入门案例工作流程分析</h6><p>启动服务器初始化过程：</p>
<ol>
<li><p>服务器启动，执行ServletContainerInitConfig类，初始化web容器</p>
</li>
<li><p>执行createServletApplicationContext方法，创建了WebApplicationContext对象</p>
</li>
<li><p>加载SpringMvcConfig</p>
</li>
<li><p>执行@ComponentScan加载对应的bean</p>
</li>
<li><p>加载UserController，每个@RequestMapping的名称对应一个具体的方法</p>
</li>
<li><p>执行getServletMapping方法，定义所有的请求都通过SpringMVC</p>
<figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230609230510011.png" alt="image-20230609230510011" style="zoom: 50%;"><figcaption>image-20230609230510011</figcaption></figure></li>
</ol>
<p>单次请求过程：</p>
<ol>
<li>发送请求localhost&#x2F;save</li>
<li>web容器发现所有请求都经过SpringMVC，将请求交给SpringMVC处理</li>
<li>解析请求路径&#x2F;save</li>
<li>由&#x2F;save匹配执行对应的方法save()</li>
<li>执行save()</li>
<li>检测到有@ResponseBody直接将save()方法的返回值作为响应体返回给请求方</li>
</ol>
<h5 id="Bean加载控制"><a href="#Bean加载控制" class="headerlink" title="Bean加载控制"></a>Bean加载控制</h5><p>Controller加载控制与业务bean加载控制：（加载属于自己的bean）</p>
<p>SpringMVC相关bean（表现层bean）</p>
<p>Spring控制的bean：</p>
<ul>
<li>业务bean（Service）</li>
<li>功能bean（DataSource等）</li>
</ul>
<p>SpringMVC相关bean加载控制：</p>
<ul>
<li>SpringMVC加载的bean对应的包均在com.itheima.controller包内</li>
</ul>
<p>Spring相关bean加载控制：</p>
<ul>
<li>方式一：Spring加载的bena设定扫描范围为com.itheima，排除掉controller包内的bean</li>
<li>方式二：Spring加载的bean设定扫描范围为精准范围，例如service包、dao包等</li>
<li>方式三：不区分Spring和SpringMVC的环境，加载到同一个环境中</li>
</ul>
<p>名称：@ComponentScan<br>类型：类注解<br>范例：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"com.itheima"</span><span class="token punctuation">,</span>
excludeFilters <span class="token operator">=</span> <span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">.</span><span class="token function">Filter</span><span class="token punctuation">(</span>
        type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>ANNOTATION<span class="token punctuation">,</span>
        classes <span class="token operator">=</span> Controller<span class="token punctuation">.</span><span class="token keyword">class</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p>属性：</p>
<ul>
<li>excludeFilters：排除扫描路径中加载的bean，需要指定类别(type)与具体项(classes)</li>
<li>includeFilters：加载指定的bean，需要指定类别(type)与具体项(classes)</li>
</ul>
<h4 id="请求与响应"><a href="#请求与响应" class="headerlink" title="请求与响应"></a>请求与响应</h4><h5 id="请求映射路径"><a href="#请求映射路径" class="headerlink" title="请求映射路径"></a>请求映射路径</h5><p>名称：@RequestMapping<br>类型：方法注解	类注解<br>位置：SpringMVC控制器方法定义上方<br>作用：设置当前控制器方法请求访问路径，如果设置在类上统一设置当前控制器方法请求访问路径前缀<br>范例：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/save"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ResponseBody</span>
    <span class="token keyword">public</span> String <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user save ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"&amp;#123;'module':'user save'&amp;#125;"</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p>属性：</p>
<ul>
<li>value(默认)：请求访问路径，或访问路径前缀</li>
</ul>
<h5 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h5><p>Get请求</p>
<p>Post请求</p>
<blockquote>
<p>SpringMVC中需要解决Post请求中文乱码问题</p>
</blockquote>
<h5 id="请求参数"><a href="#请求参数" class="headerlink" title="请求参数"></a>请求参数</h5><h6 id="普通参数"><a href="#普通参数" class="headerlink" title="普通参数"></a>普通参数</h6><p>普通参数：请求参数名与形参变量名不同，使用@RequestParam绑定参数关系<br>(@RequestParam(“”name) Strign userName, int age)<figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230610003158201.png" alt="image-20230610003158201"><figcaption>image-20230610003158201</figcaption></figure></p>
<p>POJO参数：请求参数名与形参对象属性名相同，定义POJO类型参即可接收参数<br>(User user)<figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230610003227859.png" alt="image-20230610003227859"><figcaption>image-20230610003227859</figcaption></figure></p>
<p>嵌套POJO参数：请求参数名与形参对象属性名相同，按照对象<strong>层次结构关系</strong>即可接收嵌套POJO属性参数<br>(User user)<figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230610002515153.png" alt="image-20230610002515153"><figcaption>image-20230610002515153</figcaption></figure></p>
<p>数组参数：请求参数名与形参对象属性名相同且请求参数为多个，定义数组类型形参即可接收参数<br>(String[] likes)<figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230610002719066.png" alt="image-20230610002719066"><figcaption>image-20230610002719066</figcaption></figure></p>
<p>集合保存普通参数：请求参数名与形参集合对象名相同且请求参数为多个，@RequestParam绑定参数关系<br>(@RequestParam List<String> likes)<figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230610002945086.png" alt="image-20230610002945086"><figcaption>image-20230610002945086</figcaption></figure></String></p>
<h6 id="JSON数据参数"><a href="#JSON数据参数" class="headerlink" title="JSON数据参数"></a>JSON数据参数</h6><ol>
<li><p>发送数据<figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="/./Java-SSM%E6%A1%86%E6%9E%B6/image-20230610003759113.png" alt="image-20230610003759113"><figcaption>image-20230610003759113</figcaption></figure></p>
</li>
<li><p>开启自动转换json数据的支持（在SpringMvcConfig中）<br>@EnableWebMvc</p>
</li>
<li><p>设置接收数据</p>
<p>JSON数据参数：(@RequestBody List<String> likes)–发送数据如上图</String></p>
<p>POJO参数：json数据与形参对象属性名相同，定义POJO类型形参即可接收参数<br>(@RequestBody User user)<figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="/./Java-SSM%E6%A1%86%E6%9E%B6/image-20230610004305035.png" alt="image-20230610004305035"><figcaption>image-20230610004305035</figcaption></figure></p>
<p>POJO集合参数：json数组数据与集合泛型 属性名形同，定义List类型形参即可接收参数<br>(@RequestBody List<User> list)<figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="/./Java-SSM%E6%A1%86%E6%9E%B6/image-20230610004751808.png" alt="image-20230610004751808"><figcaption>image-20230610004751808</figcaption></figure></User></p>
</li>
</ol>
<h6 id="比较-RequestBody与-RequestParam"><a href="#比较-RequestBody与-RequestParam" class="headerlink" title="比较@RequestBody与@RequestParam"></a>比较@RequestBody与@RequestParam</h6><p>区别：</p>
<ul>
<li>@RequestParam用于接收url地址传参，表单传参[application&#x2F;x-www-form-urlencoded]</li>
<li>@RequestBody用于接收json数据[application&#x2F;json]</li>
</ul>
<p>应用：</p>
<ul>
<li>后期开发中，发送json格式数据为主，@RequestBody应用较广</li>
<li>如果发送非json格式数据，选用@RequestParam接收请求参数</li>
</ul>
<h6 id="日期类型参数"><a href="#日期类型参数" class="headerlink" title="日期类型参数"></a>日期类型参数</h6><p>名称：@DateTimeFormat<br>类型：类注解<br>位置：SpringMVC控制器方法形参前面<br>作用：设定日期时间型数据格式<br>范例：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/dataParam"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ResponseBody</span>
<span class="token keyword">public</span> String <span class="token function">dataParam</span><span class="token punctuation">(</span><span class="token annotation punctuation">@DateTimeFormat</span><span class="token punctuation">(</span>pattern<span class="token operator">=</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span> Date date<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"参数传递 date ==> "</span><span class="token operator">+</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">"&amp;#123;'module':'data param'&amp;#125;"</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p>属性：pattern：日期时间格式字符串</p>
<p>日期类型参数：(Date date,<br>@DateTimeFormat(pattern&#x3D;”yyyy-MM-dd”) Date date1,<br>@DateTimeFormat(pattern&#x3D;”yyyy&#x2F;MM&#x2F;dd HH:mm:ss”) Date date2)</p>
<h6 id="类型转换器"><a href="#类型转换器" class="headerlink" title="类型转换器"></a>类型转换器</h6><p>Converter接口</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Converter</span><span class="token operator">&lt;</span>S<span class="token punctuation">,</span>T<span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Nullable</span>
    T <span class="token function">convert</span><span class="token punctuation">(</span>S var1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<ul>
<li>请求参数年龄数据（String -&gt; Integer）</li>
<li>日期格式数据（String -&gt; Date）</li>
</ul>
<blockquote>
<p>@EnableWebMvc功能之一：根据类型匹配对应的类型转换器</p>
</blockquote>
<h5 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h5><p>响应页面</p>
<p>响应数据</p>
<ul>
<li>文本数据</li>
<li>json数据</li>
</ul>
<p>名称：@ResponseBody<br>类型：方法注解<br>位置：SpringMVC控制器方法定义上方<br>作用：设置当前控制器返回值作为响应体<br>范例：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/save"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ResponseBody</span>
<span class="token keyword">public</span> String <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"save ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">"&amp;#123;'info':'springmvc'&amp;#125;"</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="REST风格"><a href="#REST风格" class="headerlink" title="REST风格"></a>REST风格</h4><h5 id="REST简介"><a href="#REST简介" class="headerlink" title="REST简介"></a>REST简介</h5><p>REST(Representational State Transfer)，表现形式转换–<strong>访问网络资源的格式</strong></p>
<p>传统风格资源描述形式：</p>
<ul>
<li><a class="link" href="http://localhost/user/getById?id=1">http://localhost/user/getById?id=1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link" href="http://localhost/user/saveUser">http://localhost/user/saveUser <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<p>REST风格描述形式：</p>
<ul>
<li><a class="link" href="http://localhost/user/1">http://localhost/user/1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link" href="http://localhost/user/">http://localhost/user/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<p>优点：</p>
<ul>
<li>隐藏资源的访问行为，无法通过地址得知对资源是何种操作</li>
<li>书写简化</li>
</ul>
<p>按照REST风格访问资源时使用<strong>行为动作</strong>区分对资源进行了何种操作：</p>
<ul>
<li><a class="link" href="http://localhost/users">http://localhost/users <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>			查询全部用户信息			GET（查询）</li>
<li><a class="link" href="http://localhost/users/1">http://localhost/users/1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>		查询指定用户信息			GET（查询）</li>
<li><a class="link" href="http://localhost/users">http://localhost/users <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>			添加用户信息					POST（新增&#x2F;保存）</li>
<li><a class="link" href="http://localhost/users">http://localhost/users <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>			修改用户信息					PUT（修改&#x2F;更新）</li>
<li><a class="link" href="http://localhost/users/1">http://localhost/users/1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>		删除用户信息					DELETE（删除）</li>
</ul>
<blockquote>
<p>注意事项：上述行为是约定方式，约定不是规范，可以打破，所以称REST风格，而不是REST规范<br>描述模块的名称通常使用复数，也就是加s的格式描述，表示此类资源，而非单个资源，例如：users、books、accounts …</p>
</blockquote>
<p><strong>根据REST风格对资源进行访问称为<em>RESTful</em></strong></p>
<h5 id="RESTful入门案例"><a href="#RESTful入门案例" class="headerlink" title="RESTful入门案例"></a>RESTful入门案例</h5><p>步骤：</p>
<ol>
<li><p>设定http请求动作（动词）</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/users"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>
</code></pre>
</li>
<li><p>设定请求参数（路径变量）</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/users/&amp;#123;id&amp;#125;"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>
<span class="token annotation punctuation">@ResponseBody</span>
<span class="token keyword">public</span> String <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Integer id<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user delete ..."</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">"&amp;#123;'module':'user delet'&amp;#125;"</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
</li>
</ol>
<h5 id="REST快速开发"><a href="#REST快速开发" class="headerlink" title="REST快速开发"></a>REST快速开发</h5><p>名称：@RestController<br>类型：类注解<br>位置：基于SpringMVC的RESTful开发控制器类定义上方<br>作用：设置当前控制器类为RESTful风格，等同于@Controller与@ResponseBody两个注解组合功能<br>范例：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookController</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p>名称：@GetMapping	@PostMapping	@PutMapping	@DeleteMapping<br>类型：方法注解<br>位置：基于SpringMVC的RESTful开发控制器方法定义上方<br>作用：设置当前控制器方法请求访问路径与请求动作，每种对应一个请求动作，例如@GetMapping对应GET请求<br>范例：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/&amp;#123;id&amp;#125;"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> String <span class="token function">getById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Integer id<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"book getById ..."</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">"&amp;#123;'module':'book getById'&amp;#125;"</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h5 id="案例：基于RESTful页面数据交互"><a href="#案例：基于RESTful页面数据交互" class="headerlink" title="案例：基于RESTful页面数据交互"></a>案例：基于RESTful页面数据交互</h5><p>步骤：</p>
<ol>
<li><p>制作SpringMVC控制器，并通过Postman测试</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/books"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookController</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@PostMapping</span>
    <span class="token keyword">public</span> String <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> Book book<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"book save ==> "</span> <span class="token operator">+</span> book<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"&amp;#123;'module':'book save success'&amp;#125;"</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@GetMapping</span>
    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Book<span class="token operator">></span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"book getAll is running ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        List<span class="token operator">&lt;</span>Book<span class="token operator">></span> bookList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Book<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Book book1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        book1<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token string">"计算机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        book1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"SpringMVC入门教程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        book1<span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token string">"小试牛刀"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bookList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>book1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//模拟数据...</span>
        <span class="token keyword">return</span> bookList<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
</li>
<li><p>设置对静态资源放行</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringMvcSupport</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurationSupport</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span>ResourceHandlerRegistry registry<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//当访问/pages/???时候，走/pages目录下的内容</span>
        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">"/pages/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">"/pages/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
</li>
<li><p>前端页面通过异步提交访问后天控制器</p>
<pre class=" language-html"><code class="language-html">//添加
saveBook()<span class="token entity" title="&#123;">&amp;#123;</span>
    axios.post("/books",this.formData).then((res)=><span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#125;">&amp;#125;</span>);
<span class="token entity" title="&#125;">&amp;#125;</span>,	//this.formData表示要保存的数据

//主页列表查询
getAll()<span class="token entity" title="&#123;">&amp;#123;</span>
    axios.get("/books").then((res)=><span class="token entity" title="&#123;">&amp;#123;</span>
        this.dataList = res.data;
    <span class="token entity" title="&#125;">&amp;#125;</span>)
<span class="token entity" title="&#125;">&amp;#125;</span>	//res.data是返回的数据
</code></pre>
</li>
</ol>
]]></content>
      <categories>
        <category>Java开发</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java面试常见问题</title>
    <url>/2023/05188946.html</url>
    <content><![CDATA[<h3 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h3><h4 id="Java语言特点"><a href="#Java语言特点" class="headerlink" title="Java语言特点"></a>Java语言特点</h4><ul>
<li>Java为纯面向对象的语言；</li>
<li>具有平台无关性；</li>
<li>Java为解释型语言；</li>
<li>Java提供了很多内置库。如对多线程支持、对网络通信支持；</li>
<li>Java具有较好的安全性和健壮性。Java提供了异常处理和垃圾回收机制。</li>
</ul>
<h4 id="简述Java访问修饰符"><a href="#简述Java访问修饰符" class="headerlink" title="简述Java访问修饰符"></a>简述Java访问修饰符</h4><ul>
<li>default：默认访问修饰符，在同一包内可见</li>
<li>private：用private修饰的类成员，只能被该类自身的方法访问和修改，而不能被任何其他类（包括该类的子类）访问和引用，不能修饰外部类</li>
<li>protected：对同一包内的类和所有的子类可见，不能修饰外部类</li>
<li>public：对所有类可见</li>
</ul>
<h4 id="构造函数、成员变量、代码块初始化顺序"><a href="#构造函数、成员变量、代码块初始化顺序" class="headerlink" title="构造函数、成员变量、代码块初始化顺序"></a>构造函数、成员变量、代码块初始化顺序</h4><p>顺序：静态成员变量 -&gt; 静态代码块 -&gt; 非静态成员变量 -&gt; 非静态代码块 -&gt; 构造函数<br>详细顺序：父类静态变量、父类静态代码块、子类静态变量、子类静态代码块、父类非静态变量、父类非静态代码块、父类构造函数、子类非静态变量、子类非静态代码块、子类构造函数</p>
<h4 id="Java三大特性"><a href="#Java三大特性" class="headerlink" title="Java三大特性"></a>Java三大特性</h4><ul>
<li><p><strong>封装</strong>：利用抽象数据类型（类）将数据（属性）和基于数据的操作（基于属性的方法）绑定在一起，使其构成一个不可分隔的独立实体。</p>
</li>
<li><p><strong>继承</strong>：子类继承自父类，从而获得父类非private的属性和方法，且子类可以修改或新增新的方法<br>继承应该遵循里氏替换原则<br>那么什么是里氏替换原则呢？：子类对象的行为应该与父类对象期望的行为一致（子类对象的行为造成的结果不能出现父类对象方法中未出现的结果）<br>父类引用指向子类对象 称为向上转型<br>父类 父类引用 &#x3D; new 子类()  –》 Animal animal &#x3D; new Cat()</p>
</li>
<li><p><strong>多态</strong>：多态是同一个行为具有多个不同表现形式或形态的能力（多态就是同一个接口，使用不同实例而执行不同的操作）</p>
<figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230525232630820.png" alt="image-20230525232630820" style="zoom:50%;"><figcaption>image-20230525232630820</figcaption></figure>

<p>分为编译时多态和运行时多态<br>编译时多态主要指方法的重载<br>运行时多态指程序中定义的对象引用所指向的具体类型在运行期间才确定<br>运行时多态有三个条件：继承、重写、向上转型<br>多态：多种不同形态<br>如：ArrayList是List的一种形态；LinkedList也是List的一种形态</p>
</li>
</ul>
<h4 id="接口和抽象类的相同点和不同点"><a href="#接口和抽象类的相同点和不同点" class="headerlink" title="接口和抽象类的相同点和不同点"></a>接口和抽象类的相同点和不同点</h4><p>相同点：</p>
<ul>
<li>都不能被实例化</li>
<li>接口的实现类或抽象类需实现接口或抽象类中相应的方法才能被实例化</li>
</ul>
<p>不同点：</p>
<ul>
<li>接口只能有方法定义，不能有方法的实现，而抽象类可以有方法的定义与实现</li>
<li>实现接口的关键字为 implements，继承的抽象类的关键字类 extends。一个类可以实现多个接口，只能继承一个抽象类</li>
<li>当子类和父类存在逻辑上的层次结构，体现的是is-a的关系，推荐使用抽象类，有利于功能的累积。当功能不需要，希望支持差别较大的两个或更多对象间的特定交互行为，体现为can的关系，推荐使用接口。使用接口能降低软件系统的耦合度，便于日后维护或添加删除方法</li>
</ul>
<h4 id="简述内部类及其作用"><a href="#简述内部类及其作用" class="headerlink" title="简述内部类及其作用"></a>简述内部类及其作用</h4><ul>
<li>成员内部类：作为成员对象的内部类。可以访问 private 及以上外部类的属性和方法。外部类想要访问内部类属性或方法时，必须要创建一个内部类对象，然后通过该对象访问内部类的属性或方法。外部类也可访问 private 修饰的内部类属性</li>
<li>局部内部类：存在于方法中的内部类。访问权限类似局部变量，只能访问外部类的 final 变量</li>
<li>匿名内部类：只能使用一次，没有类名，只能访问外部类的 final 变量</li>
<li>静态内部类：类似类的静态成员变量</li>
</ul>
<h4 id="Java-语言中关键字-static-的作用是什么"><a href="#Java-语言中关键字-static-的作用是什么" class="headerlink" title="Java 语言中关键字 static 的作用是什么"></a>Java 语言中关键字 static 的作用是什么</h4><ul>
<li>为某种特定数据类型或对象 分配 与创建对象个数无关的单一的存储空间。</li>
<li>使得某个方法或属性 与类而不是对象关联在一起，即在不创建对象的情况下可通过类直接调用方法或使用类的属性。</li>
</ul>
<p>具体而言 static 又可分为 4 种使用方式：</p>
<ol>
<li>修饰成员变量。用 static 关键字修饰的静态变量在内存中只有一个副本。只要静态变量所在的类被加载，这个静态变量就会被分配空间，可以使用“类.静态变量”和“对象.静态变量”的方法使用。</li>
<li>修饰成员方法。static 修饰的方法无需创建对象就可以被调用。static 方法中不能使用 this 和 super 关键字，不能调用非 static 方法，只能访问所属类的静态成员变量和静态成员方法。</li>
<li>修饰代码块。JVM 在加载类的时候会执行 static 代码块。static 代码块常用于初始化静态变量。static 代码块只会被执行一次。</li>
<li>修饰内部类。static 内部类可以不依赖外部类实例对象而被实例化。静态内部类不能与外部类有相同的名字，不能访问普通成员变量，只能访问外部类中的静态成员和静态成员方法。</li>
</ol>
<h4 id="为什么String不可变"><a href="#为什么String不可变" class="headerlink" title="为什么String不可变"></a>为什么String不可变</h4><p>String内部使用char数组value[ ]存储数据，该数组被声明为final，这意味着value数组初始化之后，不能再引用其他数组，并且String内部没有改变value数组的方法，因此String不可变。</p>
<p>不可变的好处：</p>
<ul>
<li>String作为HashMap的key。不可变的特性可以使得hash值也不可变。</li>
<li>节省空间，字符串常量存储在JVM的字符串池中可以被用户共享。</li>
<li>安全性，String作为参数，String不可变可以保证参数不变。</li>
<li>线程安全。</li>
</ul>
<h4 id="x3D-x3D-和-equals的区别"><a href="#x3D-x3D-和-equals的区别" class="headerlink" title="&#x3D;&#x3D; 和 equals的区别"></a>&#x3D;&#x3D; 和 equals的区别</h4><p>&#x3D;&#x3D;对比的是栈中的值，比较基本类型，比较的是值；比较引用类型，比较的是堆中的内存地址</p>
<p>equlas是Object类的方法，本质上与&#x3D;&#x3D;一样，但是有些类重写了equals方法，比如String的equals被重写后，比较的是内存地址，另外重写了equlas后，也必须重写hashcode()方法</p>
<h4 id="简述Object类常用方法"><a href="#简述Object类常用方法" class="headerlink" title="简述Object类常用方法"></a>简述Object类常用方法</h4><ul>
<li>hashCode：通过对象计算出散列码。用于map型或 equals方法。需要保证同一个对象多次调用该方法，总返回相同的整型值。</li>
<li>equals：判断两个对象是否一致。需保证equals方法相同对应的对象hashCode也相同。</li>
<li>toString：用字符串表示该对象。</li>
<li>clone：深拷贝一个对象。</li>
</ul>
<h4 id="简述Java异常的分类"><a href="#简述Java异常的分类" class="headerlink" title="简述Java异常的分类"></a>简述Java异常的分类</h4><p>Java异常分为Error（程序无法处理的错误）和Exception（程序本身可以处理的异常）。这两个异常均继承Throwable。</p>
<p>Error常见的有 StackOverFlowError、OutOfMempryError等。</p>
<p>Exception可分为运行时和非运行时异常。运行时异常可以利用try catch进行处理，也可不处理，非运行时异常必须处理。</p>
<p>出现在Java程序中的finally代码块是否一定会执行</p>
<p>当遇到下面情况不会执行：</p>
<ul>
<li>当程序在进入try语句块之前就出现异常时会直接结束</li>
<li>当程序在try快中强制退出时，如使用System.exit(0)，也不会执行finally块中的代码</li>
</ul>
<h4 id="final、finally-和-finalize-的区别是什么"><a href="#final、finally-和-finalize-的区别是什么" class="headerlink" title="final、finally 和 finalize 的区别是什么"></a>final、finally 和 finalize 的区别是什么</h4><ul>
<li>final 用于声明属性、方法和类，分别表示属性不可变、方法不可覆盖、类不可继承</li>
<li>finally 作为异常处理的一部分，只能在 try&#x2F;catch 语句中使用，finally 附带一个语句块用来表示这个语句最终一定被执行，经常被用在需要释放资源的情况下</li>
<li>finalize 是 Object 类的一个方法，在垃圾收集器执行的时候会调用被回收对象的 finalize()方法。当垃圾回收器准备好释放对象占用空间时，首先会调用 finalize()方法，并在下一次垃圾回收动作发生时真正回收对象占用的内存</li>
</ul>
<h4 id="什么是反射机制"><a href="#什么是反射机制" class="headerlink" title="什么是反射机制"></a>什么是反射机制</h4><p>Java反射机制是在运行状态中，对于任意一个类，都能知道这个类的属性和方法；对于任意一个对象，都能调用它的任意一个方法和属性；这种动态获取信息以及动态调用对象的方法的功能称为Java的反射机制。</p>
<p>如何通过反射获得x类的class对象</p>
<ol>
<li>x.class</li>
<li>x.getClass()</li>
<li>Class.foeName(“类名”)</li>
</ol>
<h4 id="序列化是什么"><a href="#序列化是什么" class="headerlink" title="序列化是什么"></a>序列化是什么</h4><p>序列化是一种将对象转换成字节序列的过程，用于解决在对对象流进行读写操作时所引发的问题。序列化可以将对象的状态写在流里进行网络传输，或者保存到文件、<a class="link" href="https://cloud.tencent.com/solution/database?from=20065&from_column=20065">数据库 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>等系统里，并在需要的时候把该流读取出来重新构造成一个相同的对象</p>
<h4 id="Concurrenthashmap的解析"><a href="#Concurrenthashmap的解析" class="headerlink" title="Concurrenthashmap的解析"></a>Concurrenthashmap的解析</h4><p>Concurrenthashmap是Java中线程安全的Map实现，它允许多个线程同时对Map进行读写操作，而不会导致数据不一致或者其他线程安全问题。它的主要特点包括：</p>
<ol>
<li>分段锁设计：Concurrenthashmap将整个Map分为多个 segment，每个segment都维护着一个独立的哈希表。在读写时，只需要锁定对应的segment，不需要锁定整个Map，从而提高了并发度。</li>
<li>基于CAS算法的并发控制：Concurrenthashmap的put()、get()、remove()等操作都是通过CAS实现的。在put()操作中，如果两个线程同时插入了同一个key，只有一个线程的操作会成功，另一个线程的操作会失败，从而保证了数据的正确性。</li>
<li>支持高并发读操作：Concurrenthashmap的读操作不需要锁定Map，多个线程可以同时对Map进行读操作，不会出现并发安全问题。</li>
<li>空间动态调整：Concurrenthashmap支持动态扩容和收缩，可以根据当前Map中的数据量自动调整容量。</li>
<li>不保证Map中的数据是按照插入顺序或者其他顺序排列的，因此不适合用于有序数据的存储和查询。</li>
</ol>
<h4 id="ArrayList-和-LinkedList-的区别"><a href="#ArrayList-和-LinkedList-的区别" class="headerlink" title="ArrayList 和 LinkedList 的区别"></a>ArrayList 和 LinkedList 的区别</h4><p>1、底层数据结构<br>ArrayList底层采用数组实现，因此支持随机访问，可以通过下标索引访问元素，时间复杂度为O(1)。但是在插入和删除操作时，需要移动后面的元素，时间复杂度为O(n)。<br>LinkedList底层采用双向链表实现，因此插入和删除操作只需要改变相邻节点的指针，时间复杂度为O(1)，但是随机访问需要遍历链表，时间复杂度为O(n)。</p>
<p>2、空间占用<br>ArrayList的内部是一个数组，当元素个数不足数组容量时，会浪费一部分内存空间。而LinkedList每个元素需要额外的空间来存储前后节点的指针，因此会占用更多的内存空间。</p>
<p>3、迭代器性能<br>在迭代操作时，ArrayList使用普通迭代器或增强for循环的性能比LinkedList更优。这是因为ArrayList的数据存储在连续的内存中，迭代时可以直接访问内存，而LinkedList需要通过遍历链表来访问每个元素。</p>
<p>4、使用场景<br>ArrayList适用于随机访问比较多，插入和删除操作较少的场景，例如缓存、排序、搜索等。而LinkedList适用于插入和删除操作较多，随机访问较少的场景，例如队列、栈等。</p>
<h4 id="Collection-和-Collections-有什么区别"><a href="#Collection-和-Collections-有什么区别" class="headerlink" title="Collection 和 Collections 有什么区别"></a>Collection 和 Collections 有什么区别</h4><ul>
<li>Collection 是一个集合接口，它提供了对集合对象进行基本操作的通用接口方法，所有集合都是它的子类，比如List、Set等</li>
<li>Collections 是一个包装类，包含了很多静态方法、不能被实例化，而是作为工具类使用，比如提供的排序方法：Collections.sort(list)；提供的反转方法：Collections.reverse(list)。</li>
</ul>
<h3 id="Spring基础"><a href="#Spring基础" class="headerlink" title="Spring基础"></a>Spring基础</h3><ul>
<li><p>IoC（Inversion of Control）控制反转<br>使用对象时，由主动new产生对象转换为由外部提供对象，此过程中对象的创建控制权由程序转移到外部，这种思想称为控制反转<br>Spring技术对IOC思想进行了实现<br>Spring提供了一个容器，称为IoC容器（系统架构中的Core Container），用来充当IoC思想的“外部“<br>IoC容器负责对象的创建、初始化等一系列工作，被创建或被管理的对象在IoC容器中被称为Bean</p>
</li>
<li><p>DI (Dependency Injection) 依赖注入<br>在容器中建立Bena与Bean之间的依赖关系的整个过程,称为依赖注入</p>
</li>
<li><p>AOP（Aspect Oriented Programming）面向切面编程<br>AOP 的实现方式是通过动态代理或字节码操作，在代码运行期间动态地将切面织入到目标对象的方法执行过程中，从而实现对目标对象方法的增强。</p>
</li>
</ul>
<h3 id="数据库基础"><a href="#数据库基础" class="headerlink" title="数据库基础"></a>数据库基础</h3><h4 id="数据库事务四大特性"><a href="#数据库事务四大特性" class="headerlink" title="数据库事务四大特性"></a>数据库事务四大特性</h4><ol>
<li>原子性：事务中的所有操作要么全部完成，要么全部不完成，不会只完成其中的一部分操作。如果一个操作失败，整个事务将被回滚到事务开始前的状态，所有的操作都将被撤销。</li>
<li>一致性：事务执行前后，数据库的状态必须保持一致。如果事务执行后，数据库的状态不符合预期，事务将被回滚到事务开始前的状态，以保证数据库的一致性。</li>
<li>隔离性：事务执行的过程中，对其他事务是隔离的。即每个事务都认为自己是唯一在操作数据库的事务，不受其他事务的干扰。事务隔离级别包括读未提交、读已提交、可重复读和串行化，不同的隔离级别会影响并发性能和数据的一致性。</li>
<li>持久性：事务完成后，对数据库的修改必须永久保存在数据库中，即使出现了系统故障或断点等情况，也不能丢失，为了实现持久性，数据库通常使用日志来记录所有的事务操作，以便在系统故障恢复后恢复数据。</li>
</ol>
<h4 id="数据库隔离级别"><a href="#数据库隔离级别" class="headerlink" title="数据库隔离级别"></a>数据库隔离级别</h4><p>首先解释一下幻读和不可重复读</p>
<p><strong>幻读</strong>是指在同一个事务内，第一次查询某个范围内的数据时，没有查询到某些行，但是在该事务内后续再次查询同一范围内的数据时，却发现有新的数据行被查到，就像是出现了幻觉一样，因此称之为“幻读”。</p>
<p><strong>不可重复读</strong>是指在同一个事务内，多次读取同一个数据的结果不一样</p>
<ul>
<li>读未提交：最低级别，事务可以读取其他事务未提交的数据，也就是脏读。虽然可以提高并发性能，但是会导致数据的不一致，一般不建议使用。</li>
<li>读已提交：事务只能读取其他事务已提交的数据，避免了脏读，但是可能出现不可重复度和幻读的问题。</li>
<li>可重复读：在同一个事务内，多次读取同一个数据的结果都是一样的，不会出现不可重复读的问题。但是可能会出现幻读的问题，即在同一个事务内，一个范围内的数据记录被其他事务修改或删除。</li>
<li>串行化：最高级别，事务之间相互完全隔离，每个事务都像是在独立的系统中执行，避免了所有并发问题，但是对系统性能影响比较大。</li>
</ul>
<h3 id="TCP三次握手"><a href="#TCP三次握手" class="headerlink" title="TCP三次握手"></a>TCP三次握手</h3><p>TCP 是一种可靠的、面向连接的协议，它需要在客户端和服务器之间建立连接，保证数据能够准确、及时地传输。而 TCP 建立连接的方式就是通过三次握手（Three-way Handshake）来完成的。</p>
<ol>
<li>客户端向服务器发送 SYN 请求（SYN &#x3D; Synchronize Sequence Numbers），表示客户端想要建<br>立连接。这时，客户端会随机生成一个起始序列号（Sequence Number）x，并将 SYN 标志位置<br>为 1，同时等待服务器的响应。</li>
<li>服务器收到客户端的 SYN 请求后，会回复一个 SYN+ACK（ACK &#x3D; Acknowledgment）的响应，表<br>示服务器已经接受了客户端的请求，并且想要建立连接。这时，服务器会随机生成一个起始序<br>列号 y，并将 SYN 和 ACK 标志位置为 1，确认号（Acknowledgment Number）设置为 x+1，同时<br>等待客户端的响应。</li>
<li>客户端收到服务器的 SYN+ACK 响应后，会发送一个 ACK 确认响应，表示客户端已经接受了服务<br>器的请求，并且可以开始发送数据了。这时，客户端会将确认号设置为 y+1，表示客户端已经<br>收到了服务器的响应，连接建立成功。</li>
</ol>
<h3 id="常用的设计模式"><a href="#常用的设计模式" class="headerlink" title="常用的设计模式"></a>常用的设计模式</h3><ol>
<li>工厂模式：定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂模式通过对象的创建与使用分离，从而使代码更加灵活、可扩展，常用于创建对象复杂、种类繁多的场景。</li>
<li>单例模式：确保一个类只有一个实例，并提供全局访问点。单例模式通过限制一个类只能被实例化一次，从而避免了资源的浪费和竞争条件的产生，常用于需要全局唯一实例的场景。</li>
<li>观察者模式：定义对象之间一种一对多的依赖关系，当一个对象状态发生改变时，所有依赖它的对象都得到通知并自动更新。观察者模式通过松散耦合的方式，将观察者与被观察者分离，从而使对象之间的关系更加灵活、可扩展。</li>
<li>装饰器模式：动态地将责任附加到对象上，扩展对象的功能。装饰器模式通过递归组合的方式，使对象可以被无限层次地装饰，从而实现动态地添加、修改、删除对象的功能。</li>
<li>模板方法模式：定义一个操作中的算法骨架，而将一些步骤延迟到子类中。模板方法模式通过定义一个模板方法，将算法的骨架和具体的实现分离，从而使算法可以在不同的场景下得到重复利用。</li>
</ol>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>WEB前端基础知识的学习</title>
    <url>/2023/04196383.html</url>
    <content><![CDATA[<h2 id="关于”WEB前端“基础知识的学习"><a href="#关于”WEB前端“基础知识的学习" class="headerlink" title="关于”WEB前端“基础知识的学习"></a>关于”WEB前端“基础知识的学习</h2><p>​				你也许会问为什么我会学习前端呢？难道是想成为一个全栈程序员，成为别人眼中的大佬？NO NO NO. 虽然我也想成为一个全栈程序员，更想成为大佬，但是目前–2023年4月18日21点37分42秒，学习前端只是为了满足课程基本要求。下面我将分享在学习前端基础时记的笔记。（此次课程学习了HTML+CSS+JavaScript，以及jQuery和Ajax）</p>
<h3 id="HTML："><a href="#HTML：" class="headerlink" title="HTML："></a>HTML：</h3><blockquote>
<p>网页的基本结构：</p>
</blockquote>
<pre class=" language-html"><code class="language-html">head是网页的头部，head中的内容不会在网页中直接出现，主要用来帮助浏览器或搜索引擎来解析网页
    titile中的内容会显示在浏览器的标题栏，搜索引擎会主要根据title中的内容来判断网页主要内容
    meta主要用于设置网页的一些元数据，元数据不是给用户看
            charset 指定网页的字符集
            name    指定数据的名称
            content 指定的数据内容
            keywords 表示网站的关键字，可以同时指定多个关键字，关键字间使用，隔开
            description 用于指定网站的描述
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>HTML5,CSS,前端<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>这是一个非常不错的网站<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>refresh<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3;url<span class="token punctuation">=</span>https://www.baidu.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>	//页面将在3秒后重定向到百度网
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>meta<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>	//title标签的内容会作为搜索结果的超链接上的文字显示
body是html的子元素，表示网页的主体，网页中所有的可见内容都应该写在body里
    h1网页的一级标题
</code></pre>
<blockquote>
<p>网页标签属性：</p>
</blockquote>
<pre class=" language-html"><code class="language-html">属性，在标签中（开始标签或自结束标签）还可以设置属性
        属性是一个键值对（x=y）
        属性用来设置标签中的内容如何显示
        
        属性和标签名或其他属性应该使用空格隔开
        属性不能瞎写，应该根据文档中的规定来编写
        有些属性有属性值，有些没有。如果有属性值，属性值应该使用引号引起来
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>这是我的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>第三个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span>网页！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
</code></pre>
<blockquote>
<p>语义化标签：</p>
</blockquote>
<pre><code>在网页中HTML专门用来负责网页的结构，所以在使用HTML标签时，应该关注的是标签的语义，而不是它的样式
块元素（block element）
    -在网页中一般通过块元素来对页面进行布局
行内元素（inline element）
    -行内元素主要用来包裹文字

    -一般情况下会在块元素中放行内元素，而不会在行内元素中放块元素
    -块元素中基本什么都能放
    -p元素中不能放任何的块

浏览器在解析网页时，会自动对网页中不符合规范的内容进行修正
    比如：
        标签写在了根元素的外部
        p元素中嵌套了块元素
        根元素中出现了head和body以外的子元素
       ...
常见块级元素：
   div、form、h1~h6、hr、p（标识段落）、table、ul等
常见内联元素：
   a、b、em（加重语调）、i、span、strong（强调）等
行内块级元素（特点：不换行、能够识别宽高）：
   button、img、input等
  
hgroup标签用来为标签分组，可以将一组相关的标题同时放入到hgroup
p标签标识页面中的一个段落
em标签用于表示语音语调的一个加重
strong表示强调，重要内容
blockquote表示一个长引用
q表示一个短引用
br表示页面中的换行
hr表示页面中出现一条水平线
...

布局标签（结构化语义标签）:
    header  表示网页的头部
    main    表示网页的主体部分(一个页面中只会有一个main)
    footer  表示网页的底部
    nav     表示网页中的导航
    aside   表示和主体相关的其他内容(侧边栏)
    article 表示一个独立的文章
    section 表示一个独立的区块，上边的标签不能表示时使用section

    div 没有语义，就用来表示一个区块，目前来说div还是我们主要的布局元素
    span    行内元素，没有任何的语义，一般用于在网页中选中文字
</code></pre>
<blockquote>
<p>列表：</p>
</blockquote>
<pre class=" language-html"><code class="language-html">列表（list）
1、铅笔
2、尺子
3、橡皮

在html中也可以创建列表，html列表一共有三种
1、有序列表
2、无序列表
3、定义列表

有序列表，使用ol标签来创建有序列表
使用li表示列表项

无序列表，使用ul标签来创建无序列表
使用li表示列表项

定义列表，使用dl标签来创建定义列表
使用dt来表示定义的内容
使用dd来对内容进行解释说明

列表之间可以互相嵌套

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>结构<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>表现<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>行为<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>结构<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>表现<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>行为<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>结构<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>结构用来表示网页的结构，结构用来规定网页中哪里是标题，哪里是段落<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span>
</code></pre>
<blockquote>
<p>表格：</p>
</blockquote>
<pre class=" language-html"><code class="language-html">表格标签：
       表格:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>
       行:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
       单元格（列）:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>
表格属性：
       border:设置表格的边框
       width:设置表格的宽度
       height:设置表格的高度
       
       示例：
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>尚学堂<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>黑马<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>多易<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>阿里<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>京东<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>腾讯<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>
快捷键生成表格：
            table>tr*2>td*3<span class="token entity" title="&#123;">&amp;#123;</span>文本信息<span class="token entity" title="&#125;">&amp;#125;</span>
</code></pre>
<blockquote>
<p>表格的合并：</p>
</blockquote>
<pre class=" language-html"><code class="language-html">水平合并：colspan--保留左边，删除右边
垂直合并：rowspan--保留上边，删除下边
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>单元格6单元格7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>单元格8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>单元格9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>单元格10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
</code></pre>
<blockquote>
<p>form表单：</p>
</blockquote>
<pre class=" language-html"><code class="language-html">表单是由容器和控件组成的，一个表单一般应该包含用户填写的信息的输入框，提交按钮等，
这些输入框，按钮叫做控件，表单就是容器，它能够容纳各种各样的控件

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get | post<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myform<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>
    action服务器地址
    name表单名称
    method中get和post的区别：
       数据提交方式，get把提交的数据url可以看到，post看不到
       get一般用于提交少量数据，post用来提交大量数据
</code></pre>
<blockquote>
<p>超链接：</p>
</blockquote>
<pre class=" language-html"><code class="language-html">超链接可以让我们从一个页面跳转到另一个页面，或者是当前页面的其他的位置
    使用a标签来定义超链接
         属性：
         href 指定跳转的目标路径
             -值可以是一个外部网站的地址
             -也可以写一个内部页面的地址
        超链接也是一个行内元素，在a标签中可以嵌套除它自身外任何的元素
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://www.baidu.com<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>超链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
        target属性：用来指定超链接打开的位置
             可选值：
             -self 默认值在当前页面中打开超链接
             _blank 在一个新的页面中打开超链接
</code></pre>
<p>内联框架：</p>
<pre class=" language-html"><code class="language-html">内联框架，用于向当前页面中引入一个其他的页面
       src 指定要引入的网页的路径
       frameborder 指定内联框架的边框
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://www.qq.com<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>800<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>600<span class="token punctuation">"</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span>
</code></pre>
<h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS:"></a>CSS:</h3><p>网页实际是一个多层的结构，通过CSS可以分别为网页的每一层来<em><strong>设置样式</strong></em>，而最终我们能看到只是网页的最上边一层</p>
<blockquote>
<p>使用CSS来设置样式的三种方式：</p>
</blockquote>
<pre class=" language-html"><code class="language-html">第一种方式：(内联样式，行内样式)
     -在标签内部通过style属性来设置元素的样式
     -问题：
          使用内联样式，样式只能对一个标签生效，如果希望影响到多个元素必须在每一个元素中都复制一遍
          并且当样式发生变化时，我们必须要一个一个的修改，非常的不方便
     -注意：开始时绝对不要使用内联样式
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span> <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>少小离家老大回，乡音无改鬓毛衰<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>

第二种方式(内部样式)：
     -将样式编写到head中的style标签里
          然后通过CSS的选择器来选中元素并为其设置各种样式
          可以同时为多个标签设置样式，并且修改只需要修改一处即可全部应用
     -内部样式表更加方便对样式进行复用
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
        p&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
            <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#00FF00</span><span class="token punctuation">;</span>
            <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>
        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>落霞与孤鹜齐飞，秋水共长天一色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>

第三种方式（外部样式表） 最佳实践
     -可以将css样式编写到一个外部的css文件中
          然后通过link标签来引入外部的css文件
     -外部样式表需要通过link标签进行引入，
          意味着只要想使用这些样式的网页都可以对其进行引用
          使样式可以在不同页面之间进行复用
     -将样式编写到外部的css文件中，可以使用到浏览器的缓存机制
          从而加快网页的加载速度，提高用户的体验
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./style.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
</code></pre>
<blockquote>
<p>选择器：</p>
</blockquote>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
        <span class="token comment" spellcheck="true">/* 全局选择器：
            可以与任何元素匹配，优先级最低，一般做样式初始化 */</span>
        *&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
            <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>
            <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/* 元素选择器：
            所有的标签，都可以是选择器
            标签选择器，选择的是页面上所有这种类型的标签，所以经常描述“共性”，无法描述某一个元素的“个性” */</span>
        p&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
            <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>
        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/* 类选择器：
            规定用圆点.来定义，针对你想要的所有标签使用
            class属性的特点：
                类选择器可以被多种标签使用
                类名不能以数字开头
                同一个标签可以使用多个类选择器，用空格隔开 */</span>
        <span class="token number">.</span>oneclass&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">800</span>px<span class="token punctuation">;</span>
        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>
        <span class="token number">.</span>content&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
            <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>
        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>HELLO<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>oneclass<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>你好<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>oneclass content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>世界<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
        <span class="token comment" spellcheck="true">/* ID选择器：
            针对某一个特定的标签来使用，只能使用一次。CSS中的ID选择器以#来定义
            ID是唯一的
            ID不能以数字开头 */</span>
        #mytitle&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
            <span class="token property">border</span><span class="token punctuation">:</span><span class="token number">3</span>px dashed green<span class="token punctuation">;</span>
        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/* 合并选择器：
            语法：选择器1,选择器2,...&amp;#123;&amp;#125;
            作用：提取共同的样式，减少重复代码 */</span>
        p,h<span class="token number">3</span>&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
            <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>
            <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/* 选择器的优先级：
            CSS中，权重用数字衡量
            元素选择器的权重为：1
            类选择器的权重为：10
            ID选择器的权重为：100
            内联样式的权重为：1000
            优先级从高到低：行内样式>ID选择器>类选择器>元素选择器 */</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>

关系选择器：
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
        <span class="token comment" spellcheck="true">/* 后代选择器：
            定义：选择所有被E元素包含的F元素，中间用空格隔开
            E F&amp;#123;&amp;#125; */</span>
        ul li&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
            <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/* 子代选择器：
            选择所有作为E元素的直接子元素F，对更深一层的元素不起作用，用>表示
            E>F&amp;#123;&amp;#125; */</span>
        div>p&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
            <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>
        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/* 相邻兄弟选择器：
            选择紧跟E元素后的F元素，选择相邻的第一个兄弟元素，用+号表示
            E+F&amp;#123;&amp;#125; */</span>
        h<span class="token number">1</span>+p&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
            <span class="token property">color</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span>
        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/* 通用兄弟选择器：
            选择E元素之后的所有兄弟元素F，作用于多个元素，用~隔开
            E~F&amp;#123;&amp;#125; */</span>
        h<span class="token number">3</span>~p&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
            <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>
        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span> 
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
</code></pre>
<blockquote>
<p>盒子模型：</p>
</blockquote>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
        <span class="token comment" spellcheck="true">/* 盒子模型：
            Margin(外边距)-清除边框外的区域，外边距是透明的
            Border(边框)-围绕在内边距和内容外的边框
            Padding(内边距)-清除内容周围的区域
            Content(内容)-盒子的内容，显示文本和图像 */</span>
        div&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>
            <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span>
            <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
            <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>
            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">2</span>px solid gray<span class="token punctuation">;</span>
            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>
        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
        <span class="token comment" spellcheck="true">/* 弹性盒子模型：
            弹性盒子由弹性容器（Flex container）和弹性子元素（Flex item）组成
            弹性容器通过设置display属性的值为flex将其定义为弹性容器
            弹性容器内包含了一个或多个弹性子元素 */</span>
        <span class="token number">.</span>container&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>
            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>
            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#555</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">/* 定义为弹性容器 */</span>
            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">/*设置各个子元素摆放方式*/</span>
            <span class="token property">flex-direction</span><span class="token punctuation">:</span> row-reverse<span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">/*设置子元素水平摆放位置*/</span>
            <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">/*设置子元素垂直摆放位置*/</span>
            <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>   
        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
</code></pre>
<blockquote>
<p>浮动以及清除浮动：</p>
</blockquote>
<pre class=" language-html"><code class="language-html">浮动的定义：
     float属性定义在哪个方向浮动，任何元素都可以浮动
浮动的原理：
     浮动以后使元素脱离了文档流
     浮动只有左右浮动，没有上下浮动
     元素向左浮动：
         脱离文档流之后，元素相当于在页面上面增加一个浮层来放置内容。此时可以理解为有两层页面，
         一层是底层的原页面，一层是脱离文档流的上层页面，所以会出现折叠现象。
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
        <span class="token number">.</span>box&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
            <span class="token property">background-color</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span>
            <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>

        <span class="token number">.</span>container&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>
            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>
            <span class="token property">background-color</span><span class="token punctuation">:</span> blueviolet<span class="token punctuation">;</span>
        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>

浮动副作用：
     浮动元素会造成父元素高度塌陷
     后续元素会受到影响
        
     清除浮动：
         当父元素出现塌陷的时候，对布局是不利的，所以我们必须清除副作用
         解决方案有很多种：
                父元素设置高度
                受影响的元素增加clear属性
                父级标签的样式添加overflow清除浮动
                伪对象方式
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
        <span class="token number">.</span>container&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">/* height: 500px; */</span>
            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#888</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">/* overflow: hidden;
            clear: both; */</span>
        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>

        <span class="token number">.</span><span class="token property">container</span><span class="token punctuation">:</span><span class="token punctuation">:</span>after&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
            <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>
            <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
            <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>
        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>

        <span class="token number">.</span>box&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>
            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>
            <span class="token property">background-color</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span>
            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>
            <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>

        <span class="token number">.</span>text&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>
            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>
            <span class="token property">background-color</span><span class="token punctuation">:</span> blueviolet<span class="token punctuation">;</span>
            <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>
        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
</code></pre>
<blockquote>
<p>动画：</p>
</blockquote>
<pre class=" language-html"><code class="language-html">直接演示一波：
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
        div&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
            <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
            <span class="token property">animation</span><span class="token punctuation">:</span> myAnim <span class="token number">3</span>s linear <span class="token number">0</span>s infinite<span class="token punctuation">;</span>
        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>

        <span class="token property">div</span><span class="token punctuation">:</span>hover&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
            <span class="token property">animation-play-state</span><span class="token punctuation">:</span> paused<span class="token punctuation">;</span>
        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>

        <span class="token atrule"><span class="token rule">@keyframes</span> myAnim &amp;#123<span class="token punctuation">;</span></span>
            <span class="token number">0%</span>&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
                <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
            &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>
            <span class="token number">50%</span>&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
                <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>
            &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>
            <span class="token number">100%</span>&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
                <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
            &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>
        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
</code></pre>
<h3 id="JavaScript："><a href="#JavaScript：" class="headerlink" title="JavaScript："></a>JavaScript：</h3><p>JavaScript的引入方式和CSS十分类似</p>
<pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--在内部编写javascript--></span>
    <span class="token comment" spellcheck="true">&lt;!-- &lt;script>
        alert("hello js");        
    &lt;/script> --></span>
    
<span class="token comment" spellcheck="true">&lt;!--链接外部的js文件--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./demo.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
</code></pre>
<blockquote>
<p>输出语句：</p>
</blockquote>
<ul>
<li>使用windows.alert()写入警告框</li>
<li>使用document.write()写入HTML输出</li>
<li>使用console.log()写入浏览器控制台</li>
</ul>
<blockquote>
<p>变量&amp;数据类型：</p>
</blockquote>
<pre class=" language-html"><code class="language-html">JavaScript是弱类型语言
    用var关键字来声明变量

    ECMAScript 6 新增了 let 关键字来定义变量
    ECMAScript 6 新增了 const 关键字来定义一个只读的常量，一旦声明，就不能更改常量的值。
    
    var:
       1、作用域：全局变量
       2、变量可以重复定义
            
    let:
       1、作用域：局部变量
       2、变量不可以重复定义
       
JavaScript中分为：原始类型和引用类型
        5种原始类型：
            numbe：数字（整数、小数、NaN（Not a Number））
            string：字符、字符串，单引号、双引号皆可
            boolean：布尔
            null：对象为空，null被认为是对象的占位符，使用typeof运算符会返回“Object”
            undefined：当声明的变量未初始化时，该变量的默认值是undefined

        引用类型，合成数据类型，复合数据类型：object（对象）
        var user = <span class="token entity" title="&#123;">&amp;#123;</span>
            age:18,
            name:"iwen",
            hunyin:flase
        <span class="token entity" title="&#125;">&amp;#125;</span>

        使用typeof运算符可以获取数据类型
        alter(typeof age) 
</code></pre>
<blockquote>
<p>window窗口对象：</p>
</blockquote>
<pre><code>Window
      window：获取窗口对象
      获取：直接使用window，其中 window. 可以省略
      window.alert(&quot;abc&quot;)  --&gt; alert(&quot;abc&quot;)

      方法：
          alert()     显示带有一段消息和一个确认按钮的警告框
          confirm()   显示带有一段消息以及确认按钮和取消按钮的对话框  --&gt; 点击确认会返回true，点击取消会返回false
          setInterval(function,毫秒值)按照指定的周期（以毫秒计）来调用函数或计算表达式，循环执行
          setTimeout(function,毫秒值)在指定的毫秒数后调用函数或计算表达式，只执行一次
</code></pre>
<blockquote>
<p>数组方法：</p>
</blockquote>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
    <span class="token comment" spellcheck="true">// Array.isArray()</span>
    <span class="token comment" spellcheck="true">// Array.isArray方法返回一个布尔值，表示参数是否为数组。它可以弥补typeof运算符的不足。</span>
    <span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"尚学堂"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// push()/pop()</span>
    <span class="token comment" spellcheck="true">// push方法用于在数组的末端添加一个或多个元素，并返回添加新元素后的数组长度。注意：该方法会改变原数组。</span>
    <span class="token comment" spellcheck="true">// pop方法用于删除数组的最后一个长度，并返回该元素。注意：该方法会改变原数组。</span>
    <span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    arr2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"尚学堂"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>
    arr2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'itbaizhan'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>
    arr2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">var</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'尚学堂'</span><span class="token punctuation">,</span><span class="token string">'itbaizhan'</span><span class="token punctuation">,</span><span class="token string">'WEB前端'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    arr3<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'WEB前端'</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// shift()/unshift()</span>
    <span class="token comment" spellcheck="true">// shift方法用于删除数组的第一个元素，并返回该元素。注意，该方法会改变数组</span>
    <span class="token comment" spellcheck="true">// unshift方法用于在数组的第一个位置添加元素，并返回添加新元素后的数组长度</span>
    <span class="token keyword">var</span> arr4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'尚学堂'</span><span class="token punctuation">,</span><span class="token string">'itbaizhan'</span><span class="token punctuation">,</span><span class="token string">'WEB前端'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    arr4<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// '尚学堂'</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr4<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// shift方法去清空一个数组</span>
    <span class="token keyword">var</span> item<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>item <span class="token operator">=</span> arr4<span class="token punctuation">.</span>shift<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr4<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">var</span> arr5 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'尚学堂'</span><span class="token punctuation">,</span><span class="token string">'itbaizhan'</span><span class="token punctuation">,</span><span class="token string">'WEB前端'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    arr5<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">'baizhan'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr5<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// unshift方法可以接受多个参数，这些参数都会添加到目标数组头部</span>
    arr5<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">'测试'</span><span class="token punctuation">,</span><span class="token string">'JavaScript'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr5<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// join()</span>
    <span class="token comment" spellcheck="true">// join方法以指定参数作为分隔符，将所有数组成员连接为一个字符串返回。如果不提供参数，默认用逗号分隔</span>
    <span class="token keyword">var</span> arr6 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr6<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10,20,30,40</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr6<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10|20|30|40</span>

    <span class="token comment" spellcheck="true">// concat()</span>
    <span class="token comment" spellcheck="true">// concat方法用于多个数组的合并。它将新数组的成员，添加到原数组成员的后部，然后返回一个新数组，原数组不变</span>
    <span class="token keyword">var</span> arr7 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'world'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'!'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr7<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 除了数组作为参数，concat也接受其他类型的值作为参数，添加到目标数组后部。</span>
    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment" spellcheck="true">// indexOf()</span>
    <span class="token comment" spellcheck="true">// indexOf方法返回给定元素在数组中第一次出现的位置，如果没有出现则返回-1</span>
    <span class="token keyword">var</span> arr8 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    arr8<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>
    arr8<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -1</span>
    <span class="token comment" spellcheck="true">// indexOf方法还可以接受第二个参数，表示搜索的开始位置</span>
    <span class="token punctuation">[</span><span class="token string">'尚学堂'</span><span class="token punctuation">,</span><span class="token string">'百战程序员'</span><span class="token punctuation">,</span><span class="token string">'itbaizhan'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'尚学堂'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -1</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
</code></pre>
<blockquote>
<p>函数：</p>
</blockquote>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// 函数是一段可以反复调用的代码块</span>

        <span class="token comment" spellcheck="true">// 函数的声明：</span>
        <span class="token comment" spellcheck="true">//     function命令：function命令声明的代码区块，就是一个函数。function命令后面是函数名，函数名后面是一对圆括号，里面是传入函数的参数。函数体放在大括号里面。</span>

        <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"结果:"</span><span class="token punctuation">,</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
</code></pre>
<blockquote>
<p>CSS操作：</p>
</blockquote>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// HTML元素的style属性</span>
        <span class="token comment" spellcheck="true">// 操作CSS样式最简单的方法，就是使用网页元素节点的setAttribute方法直接操作网页元素的style属性</span>

        <span class="token keyword">var</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// box.setAttribute("style","width:200px;height:200px;background:red;")</span>

        <span class="token comment" spellcheck="true">// box.style.width = "300px";</span>
        <span class="token comment" spellcheck="true">// box.style.height = "300px";</span>
        <span class="token comment" spellcheck="true">// box.style.backgroundColor = "red";</span>

        box<span class="token punctuation">.</span>style<span class="token punctuation">.</span>cssText <span class="token operator">=</span> <span class="token string">"width:200px;height:200px;background:red;"</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
</code></pre>
<h3 id="jQuery："><a href="#jQuery：" class="headerlink" title="jQuery："></a>jQuery：</h3><blockquote>
<p>第一个例子：</p>
</blockquote>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>第一个例子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/jquery-3.6.4.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Hello jQuery"</span><span class="token punctuation">)</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true">//简便写法</span>
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Hello jQuery"</span><span class="token punctuation">)</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
</code></pre>
<p>​				1.(document),是jQuery中的函数名称，document是函数的参数，作用是将document对象 变成 jQuery函数库可以使用的对象。2.ready是jQuery中的函数，是准备的意思，当页面的dom对象加载成功后，会执行ready函数的内容。ready相当于js中的onLoad事件</p>
<blockquote>
<p>dom对象 与 jQuery对象的互转：</p>
</blockquote>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>我是按钮<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btnClick()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
function btnClick()<span class="token entity" title="&#123;">&amp;#123;</span>
            //获取dom对象
            var obj = document.getElementById("btn");
            //使用dom的value属性来获取值
            alert("使用dom对象的属性="+obj.value);
            //把dom对象转jQuery，使用jQuery库中的函数
            var $jObj = $(obj);
            //调用jQuery中的函数，获取value的值
            alert($jObj.val())
        <span class="token entity" title="&#125;">&amp;#125;</span>
</code></pre>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>计算平方<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btnClick()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txt<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>整数<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
function btnClick()<span class="token entity" title="&#123;">&amp;#123;</span>
            //使用jQuery的语法，获取页面中的dom对象
            //var obj = $("#txt")[0];   //从数组中获取下标为0的dom对象（jQuery对象是一个数组）
            var obj = $("#txt").get(0);   //从数组中获取下标为0的dom对象（jQuery对象是一个数组）
            //alert(obj.value)
            var num = obj.value;
            obj.value = num * num;
        <span class="token entity" title="&#125;">&amp;#125;</span>
</code></pre>
<blockquote>
<p>事件：</p>
</blockquote>
<pre><code>  1.定义元素监听事件 ：
  语法：$(选择器).监听事件名称(处理函数)
  说明：监听事件名称是js事件中去掉on后的内容，js中的onclick的监听事件名称是click
  
  例如：
  为页面中所有的button绑定onclick，并关联处理函数func1
  $(&quot;button&quot;).click(func1)
  为页面中所有的tr标签绑定onmouseover，并关联处理函数func2
  $(&quot;tr&quot;).mouseover(func2)
  
  $(&quot;#btn&quot;).click(function()&#123; 
  alert(&quot;处理按钮单击&quot;) 
  &#125;)
  
  2.on()绑定事件
  on()方法在被选元素上添加事件处理程序。该方法给API带来很多便利，推荐使用该方法
  语法：$(选择器).on(event,function)
  event：事件一个或多个，多个之间空格分开
  function：可选，规定当事件发生时运行的函数

  $(&quot;#btn&quot;).on(&quot;click&quot;,function()&#123;
 alert(&quot;处理按钮单击&quot;)
 &#125;)
</code></pre>
<blockquote>
<p>基本选择器：</p>
</blockquote>
<p>​				根据id，class属性，标签类型名定位HTML元素，转为jQuery对象，下面通过代码演示</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>基本选择器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">
        div&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
            <span class="token property">background</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span>
            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>
        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/jquery-3.6.4.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token keyword">function</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//id选择器</span>
            <span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//使用jQuery中改变样式的函数</span>
            obj1<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background"</span><span class="token punctuation">,</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">function</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//class选择器</span>
            <span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".two"</span><span class="token punctuation">)</span>
            <span class="token comment" spellcheck="true">//使用jQuery中改变样式的函数</span>
            obj2<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background"</span><span class="token punctuation">,</span><span class="token string">"yellow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        	<span class="token keyword">function</span> <span class="token function">fun3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//class选择器</span>
            <span class="token keyword">var</span> obj3 <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//数组有3个对象</span>
            <span class="token comment" spellcheck="true">//使用jQuery中改变样式的函数</span>
            obj3<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background"</span><span class="token punctuation">,</span><span class="token string">"blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        <span class="token keyword">function</span> <span class="token function">fun4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">var</span> obj4 <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            obj4<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background"</span><span class="token punctuation">,</span><span class="token string">"green"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是one的div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>two<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是样式是two的div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>我是没有id，class的div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>我是span标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>获取id是one的dom对象<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fun1()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>获取class是two的dom对象<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fun2()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>获取标签是div的dom对象<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fun3()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>全部选择器<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fun4()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
</code></pre>
<blockquote>
<p>表单选择器：</p>
</blockquote>
<pre><code>    使用&lt;input&gt;标签的type属性值，定位dom对象的方式
    语法：$(&quot;:type 属性值&quot;)
    
    例如：$(&quot;:text&quot;)，选择的是所有的单行文本框
    	 $(&quot;:button&quot;)，选择的是所有的按钮
</code></pre>
<pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span>  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/jquery-3.6.4.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token keyword">function</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//使用表单选择器 $(":type的值")</span>
            <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//获取value属性的值</span>
            <span class="token function">alert</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">function</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//定位radio</span>
        <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":radio"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//数组，目前是两个对象 man、woman</span>
        <span class="token comment" spellcheck="true">//循环数组</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>obj<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//从数组中获取成员，使用下标的方式</span>
            <span class="token keyword">var</span> dom <span class="token operator">=</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//使用dom对象的属性，获取value值</span>
            <span class="token function">alert</span><span class="token punctuation">(</span>dom<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>我是type<span class="token punctuation">=</span>text<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>man<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>男 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>woman<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>女 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bike<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>骑行<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>football<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>足球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>music<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>音乐<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>读取text的值<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>func1()<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>读取radio的值<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>func2()<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
</code></pre>
<blockquote>
<p>基本过滤器：</p>
</blockquote>
<pre><code>    1、选择第一个first，保留数组中的第一个dom对象
        $(&quot;选择器:first&quot;)
    2、选择最后一个last，保留数组中的最后一个dom对象
        $(&quot;选择器:last&quot;)
    3、选择数组中指定对象
        $(&quot;选择器:eq(数组索引)&quot;)
    4、选择数组中小于指定索引的所有dom对象
        $(&quot;选择器:lt(指定索引)&quot;)
</code></pre>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">
        div&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
            <span class="token property">background</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span>
        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/jquery-3.6.4.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//过滤器</span>
                <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div:first"</span><span class="token punctuation">)</span>
                obj<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background"</span><span class="token punctuation">,</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是div-0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>two<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是div-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>我是div-2
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>我是div-3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>我是div-4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>我是div-5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>我是span<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>获取第一个div<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
</code></pre>
<blockquote>
<p>表单属性过滤器：</p>
</blockquote>
<pre><code>    1、选择可用的文本框 
        $(&quot;:text:enabled&quot;)
    2、选择不可用的文本框
        $(&quot;:text:disabled&quot;)
    3、复选框选中的元素
        $(&quot;:checkbox:checked&quot;)
    4、选择指定下拉列表的被选中元素
        选择器&gt;option:selected
</code></pre>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/jquery-3.6.4.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":text:enabled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                obj<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":checkbox:checked"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>obj<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                    <span class="token function">alert</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>

            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"select>option:selected"</span><span class="token punctuation">)</span>
                <span class="token function">alert</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>文本框<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txt1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txt2<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text2<span class="token punctuation">"</span></span> <span class="token attr-name">disabled</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txt3<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txt4<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text4<span class="token punctuation">"</span></span> <span class="token attr-name">disabled</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>复选框<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>游泳<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>游泳<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>健身<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token punctuation">></span></span>健身<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>电子游戏<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token punctuation">></span></span>电子游戏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>下拉框<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>语言<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span> <span class="token attr-name">selected</span><span class="token punctuation">></span></span>java语言<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>python<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>python语言<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>c语言<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>功能按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>设置可用的text的value是hello<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>显示被选中的复选框中的值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>显示选中下拉列表框的值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
</code></pre>
<blockquote>
<p>函数：</p>
</blockquote>
<pre><code>    1、val
    操作数组中dom对象的value属性
    $(选择器).val()：无参数调用形式，读取数组中第一个dom对象的value属性值
    $(选择器).val(值)：有参形式调用；对数组中所有dom的value属性进行统一赋值

    2、text
    操作数组中所有的dom对象的【文字显示内容属性】
    $(选择器).text()：无参数调用，读取数组中所有dom对象的文字显示内容，将得到的内容拼接为一个字符串返回
    $(选择器).text(值)：有参数形式，对数组中所有dom对象的文字显示内容进行统一赋值

    3、attr
    对val、text之外的其他属性操作
    $(选择器).attr(&quot;属性名&quot;):获取dom数组第一个对象的属性值
    $(选择器).attr(&quot;属性名&quot;,&quot;值&quot;):对数组中所有dom对象的属性设为新值

    4、remove
    $(选择器).remove()：将数组中所有dom对象及其子对象一并删除

    5、empty
    $(选择器).empty():将数组中所有dom对象的子对象删除

    6、append
    为数组中所有dom对象添加子对象
    $(选择器).append(&quot;&lt;div&gt;我动态添加的div&lt;/div&gt;&quot;)

    7、html
    设置或返回被选元素的内容（innerHTML--html文件中写的内容）
    $(选择器).html()：无参数调用，获取dom数组第一个匹配元素的内容
    $(选择器).html(值)：有参数调用，用于设置dom数组中所有元素的内容

    8、each
    each是对数组，json 和 dom数组等的遍历，对每个元素调用一次函数
    语法1：$.each( 要遍历的对象，function(index,element) &#123;处理程序&#125; )
    语法2：jQuery对象.each( function(index,element) &#123;处理程序&#125; )
    $：相当于java的一个类名
    each：就是类中的静态方法
    index：数组的下标
    element：数组的对象
</code></pre>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">
        div&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
            <span class="token property">background</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>
        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/jquery-3.6.4.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//使用remove：删除父和子所有的dom对象</span>
                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"select"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//使用empty：删除子dom对象</span>
                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"select"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>

            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//使用append(值)：增加dom对象</span>
                <span class="token comment" spellcheck="true">//$("#fatcher").append("&lt;input type='button' value='我是增加的按钮'/>");</span>

                <span class="token comment" spellcheck="true">//增加一个table</span>
                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#fatcher"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;table border=1>&lt;tr>&lt;td>第一列&lt;/td>&lt;td>第二列&lt;/td>&lt;/tr>&lt;/table>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>

            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn4"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//使用html()：获取数组中第一个dom对象的文本值（innerHTML）</span>
                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>

            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn5"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//使用html(值)：设置所有选中dom对象的文本值</span>
                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">"我是新的&lt;b>数据&lt;/b>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>

            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn6"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//循环普通数组</span>
                <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                $<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>element<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"循环变量："</span><span class="token operator">+</span>index<span class="token operator">+</span><span class="token string">"====数组成员"</span><span class="token operator">+</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>

            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn7"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//循环json</span>
                <span class="token keyword">var</span> json <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">:</span><span class="token number">21</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
                $<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"i是key="</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"，n是value="</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>

            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn8"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//循环json</span>
                <span class="token keyword">var</span> domArray <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//语法1</span>
                <span class="token comment" spellcheck="true">// $.each(domArray,function(i,n)&amp;#123;</span>
                <span class="token comment" spellcheck="true">//     //n是数组中的dom对象</span>
                <span class="token comment" spellcheck="true">//     alert("i="+i+"，n="+n.value);</span>
                <span class="token comment" spellcheck="true">// &amp;#125;)</span>
                <span class="token comment" spellcheck="true">//语法2</span>
                domArray<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"i="</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"，n="</span><span class="token operator">+</span>n<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>刘备<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>关羽<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>张飞<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>老虎<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>老虎<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>狮子<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>狮子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>豹子<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>豹子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>亚洲<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>亚洲<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>美洲<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>美洲<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>欧洲<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>欧洲<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fatcher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是第一个div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>我是mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>数据库<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>我是jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>使用remove删除父和子对象<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>使用empty删除子对象<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>使用append增加dom对象<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>获取第一个dom的文本值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>设置span的所有dom的文本值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>循环普通数组<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn7<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>循环json<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>循环dom数组<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
</code></pre>
<h3 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax:"></a>Ajax:</h3><blockquote>
<p>ajax函数：</p>
</blockquote>
<pre><code>1）$.ajax()：jQuery中实现ajax的核心函数
2）$.post()：使用post方式发送ajax请求
3）$.get()：使用get方式发送ajax请求

$.post() 和 $.get() 内部都是调用的 $.ajax()
</code></pre>
<blockquote>
<p>$.ajax()函数的使用：</p>
</blockquote>
<pre><code>    函数的参数表示请求的url、请求的方式、参数值、回调方法等信息。参数是一个json结构。
    例如：$.ajax( &#123; 名称1:值1, 名称2:值2...&#125; )
    
    例如：
    $.ajax( &#123;
        async:true,
        contentType:&quot;application/json&quot;,
        data:&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:21&#125;,
        dataType:&quot;json&quot;,
        error:function()&#123;
            请求出现错误时，执行的函数
        &#125;,
        success:function(data)&#123;
            //data 就是responseText，是jQuery处理后的数据
            请求成功时，执行的函数
        &#125;,
        url:&quot;www.baidu.com&quot;,
        type:&quot;get&quot;
    &#125; )
    
    async：布尔值，表示请求是否异步处理。默认是true
    contentType：发送数据到服务器时所使用的数据类型，可以不写。例如application/json
    data：规定要发送到服务器的数据，可以是：字符串、数组，多数是json
    dataType：期望从服务器响应的数据类型
    error()：如果请求失败要运行的函数
    success(resp)：当请求成功时运行的函数，其中resp是自定义的形参名
    type：规定请求的类型（GET或POST等）。默认是GET,GET/POST不区分大小写
    url：规定发送请求的url
</code></pre>
<blockquote>
<p>$.get() 和 $.post() 函数的使用：</p>
</blockquote>
<pre><code>    $.get()方法使用 HTTP GET请求从服务器加载数据
    $.post()方法使用 HTTP POST请求从服务器加载数据
    语法：$.get(url,data,function(resp),dataType)
         $.post(url,data,function(resp),dataType)
</code></pre>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>关于列式数据库ClickHouse知识的学习</title>
    <url>/2023/051164496.html</url>
    <content><![CDATA[<p>Clickhouse 是一款<strong>列式存储数据库</strong>，主要用于<strong>在线分析处理查询</strong>（OLAP），能够使用SQL查询实时生成分析数据报告，可以说的非常好用！下文我就将介绍此门技术。</p>
<h3 id="1-Clickhouse-入门"><a href="#1-Clickhouse-入门" class="headerlink" title="1 Clickhouse 入门"></a>1 Clickhouse 入门</h3><h4 id="1-1-Clickhouse的特点"><a href="#1-1-Clickhouse的特点" class="headerlink" title="1.1 Clickhouse的特点"></a>1.1 Clickhouse的特点</h4><h5 id="1-1-1-列式存储"><a href="#1-1-1-列式存储" class="headerlink" title="1.1.1 列式存储"></a>1.1.1 列式存储</h5><p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="/./%E5%85%B3%E4%BA%8E%E5%88%97%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93ClickHouse%E7%9F%A5%E8%AF%86%E7%9A%84%E5%AD%A6%E4%B9%A0/image-20230530170059453.png" alt="image-20230530170059453"><figcaption>image-20230530170059453</figcaption></figure></p>
<p>好处：</p>
<ul>
<li>对于列的聚合，技术，求和等统计操作优于行时存储</li>
<li>由于某一列的数据类型是相同的，针对于数据存储更容易进行数据压缩，每一列选择更优的数据压缩算法，大大提高了数据的压缩比重</li>
<li>由于数据压缩比更好，一方面节省了磁盘空间，另一方面对于cache也有了更大的发挥空间</li>
</ul>
<h5 id="1-1-2-DBMS的功能"><a href="#1-1-2-DBMS的功能" class="headerlink" title="1.1.2 DBMS的功能"></a>1.1.2 DBMS的功能</h5><p>几乎覆盖了标准SQL的大部分语法，包括DDL和DML，以及配套的各种函数，用户管理及权限管理，数据的备份与恢复。</p>
<h5 id="1-1-3-多样化引擎"><a href="#1-1-3-多样化引擎" class="headerlink" title="1.1.3 多样化引擎"></a>1.1.3 多样化引擎</h5><p>Clickhouse 和 MySQL 类似，把表级的存储引擎插件化，根据表的不同需求可以设定不同的存储引擎。目前包括合并书、日志、接口和其他四大类20多种引擎。</p>
<h5 id="1-1-4-高吞吐写入能力"><a href="#1-1-4-高吞吐写入能力" class="headerlink" title="1.1.4 高吞吐写入能力"></a>1.1.4 高吞吐写入能力</h5><p>Clickhouse 采用类<strong>LSM Tree</strong>的结构，数据写入后定期在后台compaction。通过类LSM Tree的结构，Clickhouse在数据导入时全部是顺序append写，写入后数据段不可更改，在后台compaction时也是多个段merge sort后顺序写回磁盘。顺序写的特性，充分利用了磁盘的吞吐能力，即便在HDD上也有着优异的写入性能</p>
<p>官方公开 benchmark测试显式能够达到50MB-200MB&#x2F;s的写入吞吐能力，按照每行100Byte估算，大约相当于50W-200W条&#x2F;s的写入速度。</p>
<h5 id="1-1-5-数据分区与线程级并行"><a href="#1-1-5-数据分区与线程级并行" class="headerlink" title="1.1.5 数据分区与线程级并行"></a>1.1.5 数据分区与线程级并行</h5><p>Clickhouse 将数据划分为多个partition，每个partition再进一步划分为多个index granularity（索引粒度），然后通过多个CPU核心分别处理其中的一部分来实现并行数据处理。在这种设计下，单条Query就能利用整机所有CPU。极致的并行处理能力，极大的降低了查询延时。</p>
<p>所以，Clickhouse即使对于大量数据的查询也能够化整为零平行处理。但是有一个弊端就是对于单条查询使用多CPU，就不利于同时并发多条查询。所以对于高qps的查询业务，Clickhouse并不是强项。</p>
<h5 id="1-1-6-查询性能"><a href="#1-1-6-查询性能" class="headerlink" title="1.1.6 查询性能"></a>1.1.6 查询性能</h5><p>Clickhouse 像很多OLAP数据库一样，单表查询速度优于关联查询。</p>
<h3 id="3-Click-house-表引擎"><a href="#3-Click-house-表引擎" class="headerlink" title="3 Click house 表引擎"></a>3 Click house 表引擎</h3><h4 id="3-1-表引擎的使用"><a href="#3-1-表引擎的使用" class="headerlink" title="3.1 表引擎的使用"></a>3.1 表引擎的使用</h4><p>表引擎是Clickhouse的一大特色。可以说表引擎决定了如何存储表的数据。包括：</p>
<ul>
<li>数据的存储方式和位置，写到哪里以及从哪里读取数据。</li>
<li>支持哪些查询以及如何支持。</li>
<li>并发数据访问。</li>
<li>索引的使用（如果存在）。</li>
<li>是否可以执行多线程请求。</li>
<li>数据复制参数。</li>
</ul>
<blockquote>
<p>表引擎的使用方式就是必须显式在创建表时定义该表使用的引擎，以及引擎使用的相关参数。</p>
</blockquote>
<h4 id="3-2-TinyLog"><a href="#3-2-TinyLog" class="headerlink" title="3.2 TinyLog"></a>3.2 TinyLog</h4><p>以列文件的形式保存在磁盘上，不支持索引，没有并发控制。一般保存少量数据的小表，生成环境上作用有限。可以用于平时练习测试用。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> t_tinylog <span class="token punctuation">(</span> id string<span class="token punctuation">,</span> name string <span class="token punctuation">)</span> <span class="token keyword">engine</span><span class="token operator">=</span>TinyLog<span class="token punctuation">;</span>
</code></pre>
<h4 id="3-3-Memory"><a href="#3-3-Memory" class="headerlink" title="3.3 Memory"></a>3.3 Memory</h4><p>内存引擎，数据以未压缩的原始形式直接保存在内存当中，服务器重启数据就会消失。读写操作不会相互阻塞，不支持索引。简单查询下有非常非常高的性能表现（超过10G&#x2F;s）。<br>一般用到它的地方不多，除了用来测试，就是在需要非常高的性能，同时数据量又不太大（上限大概1亿行）的场景。</p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>clickhouse</tag>
      </tags>
  </entry>
  <entry>
    <title>关于多功能引擎ES知识的学习</title>
    <url>/2023/051139179.html</url>
    <content><![CDATA[<p>想必大家都知道ES，一款非常好用的工具，但是我还是想详细解释一下它的概念：ES全称Elasticsearch，是一个<strong>开源的高扩展的分布式全文搜索引擎</strong>，是整个Elastic Stack技术栈的核心。它可以近乎实时的存储、检索数据；本身扩展性很好，可以扩展到上百台服务器，处理PB级别的数据。可以看出ES功能非常强大，所以现在国内外很多公司都在使用。</p>
<p>看到这里又会有人说了：传统数据库不行吗？还真不行（也不是不行，就是效果不好），哈哈哈哈。传统数据库实现全文检索的话很鸡肋，因为一般不会用传统数据库存非结构化的像文本字段等数据。进行全文检索需要扫描整个表，如果数据量大的话即使对SQL的语法优化，也收效甚微。建立了索引，但是维护起来也很麻烦，对于insert和update操作都会重新构建索引。基于以上原因可以分析得出，在一些生产环境中，使用常规的搜索方式，性能是非常差的：</p>
<ul>
<li>搜索的数据对象是大量的非结构化的文本数据</li>
<li>文件记录量达到数十万或数百万个甚至更多</li>
<li>支持大量基于交互式文本的查询</li>
<li>需求非常灵活的全文搜索查询</li>
<li>对高度相关的搜索结果的有特殊需求，但是没有可用的关系数据库可以满足</li>
<li>对不同记录类型、非文本数据操作或安全事务处理的需求相对较少的情况</li>
</ul>
<p>为了解决这些问题，我们就需要<strong>全文搜索引擎</strong>，它的工作原理是计算机索引程序通过扫描文章中的每一个词，对每一个词建立一个索引，指明该词在文章中出现的次数和位置，当用户查询时，检索程序就根据事先建立的索引进行查找，并将查找的结果反馈给用户。这个过程类似于通过字典中的检索字表查字的过程。</p>
<h3 id="首先我们来讲讲-ES-入门知识"><a href="#首先我们来讲讲-ES-入门知识" class="headerlink" title="首先我们来讲讲 ES 入门知识"></a>首先我们来讲讲 ES 入门知识</h3><h4 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h4><p>Elasticsearch 是面向文档型数据库，一条数据在这里就是一个文档。将 Elasticsearch 里存储文档数据和关系型数据库 MySQL 存储数据的概念进行一个类比</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230521151302269.png" alt="image-20230521151302269"><figcaption>image-20230521151302269</figcaption></figure></p>
<blockquote>
<p>Elasticsearch 7.X 中, Type 的概念已经被删除</p>
</blockquote>
<h4 id="HTTP操作"><a href="#HTTP操作" class="headerlink" title="HTTP操作"></a>HTTP操作</h4><h5 id="索引操作"><a href="#索引操作" class="headerlink" title="索引操作"></a>索引操作</h5><h6 id="1）创建索引"><a href="#1）创建索引" class="headerlink" title="1）创建索引"></a>1）创建索引</h6><p>向 ES 服务器发 <strong>PUT</strong> 请求 ：<a class="link" href="http://127.0.0.1:9200/shopping">http://127.0.0.1:9200/shopping <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230521151518186.png" alt="image-20230521151518186"><figcaption>image-20230521151518186</figcaption></figure></p>
<h6 id="2）查看所有索引"><a href="#2）查看所有索引" class="headerlink" title="2）查看所有索引"></a>2）查看所有索引</h6><p>向 ES 服务器发 <strong>GET</strong> 请求 ：<a class="link" href="http://127.0.0.1:9200/_cat/indices?v">http://127.0.0.1:9200/_cat/indices?v <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230521151602723.png" alt="image-20230521151602723"><figcaption>image-20230521151602723</figcaption></figure></p>
<h6 id="3）查看单个索引"><a href="#3）查看单个索引" class="headerlink" title="3）查看单个索引"></a>3）查看单个索引</h6><p>向 ES 服务器发 <strong>GET</strong> 请求 ：<a class="link" href="http://127.0.0.1:9200/shopping">http://127.0.0.1:9200/shopping <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230521151654728.png" alt="image-20230521151654728"><figcaption>image-20230521151654728</figcaption></figure></p>
<h6 id="4）删除索引"><a href="#4）删除索引" class="headerlink" title="4）删除索引"></a>4）删除索引</h6><p>向 ES 服务器发 <strong>DELETE</strong> 请求 ：<a class="link" href="http://127.0.0.1:9200/shopping">http://127.0.0.1:9200/shopping <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230521151727176.png" alt="image-20230521151727176"><figcaption>image-20230521151727176</figcaption></figure></p>
<h5 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h5><h6 id="1）创建文档"><a href="#1）创建文档" class="headerlink" title="1）创建文档"></a>1）创建文档</h6><p>向 ES 服务器发 <strong>POST</strong> 请求 ：<a class="link" href="http://127.0.0.1:9200/shopping/_doc">http://127.0.0.1:9200/shopping/_doc <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>请求体内容为:</p>
<pre class=" language-json"><code class="language-json">&amp;#<span class="token number">123</span><span class="token punctuation">;</span>
<span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"小米手机"</span><span class="token punctuation">,</span>
<span class="token property">"category"</span><span class="token operator">:</span><span class="token string">"小米"</span><span class="token punctuation">,</span>
<span class="token property">"images"</span><span class="token operator">:</span><span class="token string">"http://www.gulixueyuan.com/xm.jpg"</span><span class="token punctuation">,</span>
<span class="token property">"price"</span><span class="token operator">:</span><span class="token number">3999.00</span>
&amp;#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230521152238668.png" alt="image-20230521152238668"><figcaption>image-20230521152238668</figcaption></figure></p>
<p>上面的数据创建后，由于没有指定数据唯一性标识（ID），默认情况下，ES 服务器会随机生成一个。</p>
<p>如果想要自定义唯一性标识，需要在创建时指定：<a class="link" href="http://127.0.0.1:9200/shopping/_doc/1">http://127.0.0.1:9200/shopping/_doc/1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h6 id="2）查看文档"><a href="#2）查看文档" class="headerlink" title="2）查看文档"></a>2）查看文档</h6><p>向 ES 服务器发 <strong>GET</strong> 请求 ：<a class="link" href="http://127.0.0.1:9200/shopping/_doc/1">http://127.0.0.1:9200/shopping/_doc/1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h6 id="3）修改文档"><a href="#3）修改文档" class="headerlink" title="3）修改文档"></a>3）修改文档</h6><p>向 ES 服务器发 <strong>POST</strong> 请求 ：<a class="link" href="http://127.0.0.1:9200/shopping/_doc/1">http://127.0.0.1:9200/shopping/_doc/1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>请求体内容为：</p>
<pre class=" language-json"><code class="language-json">&amp;#<span class="token number">123</span><span class="token punctuation">;</span>
<span class="token property">"title"</span><span class="token operator">:</span><span class="token string">"华为手机"</span><span class="token punctuation">,</span>
<span class="token property">"category"</span><span class="token operator">:</span><span class="token string">"华为"</span><span class="token punctuation">,</span>
<span class="token property">"images"</span><span class="token operator">:</span><span class="token string">"http://www.gulixueyuan.com/hw.jpg"</span><span class="token punctuation">,</span>
<span class="token property">"price"</span><span class="token operator">:</span><span class="token number">4999.00</span>
&amp;#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h6 id="4）修改字段"><a href="#4）修改字段" class="headerlink" title="4）修改字段"></a>4）修改字段</h6><p>向 ES 服务器发 <strong>POST</strong> 请求 ：<a class="link" href="http://127.0.0.1:9200/shopping/_update/1">http://127.0.0.1:9200/shopping/_update/1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>请求体内容为:</p>
<pre class=" language-json"><code class="language-json">&amp;#<span class="token number">123</span><span class="token punctuation">;</span>
<span class="token property">"doc"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>
<span class="token property">"price"</span><span class="token operator">:</span><span class="token number">3000.00</span>
    &amp;#<span class="token number">125</span><span class="token punctuation">;</span>
&amp;#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h6 id="5）删除文档"><a href="#5）删除文档" class="headerlink" title="5）删除文档"></a>5）删除文档</h6><blockquote>
<p>删除一个文档不会立即从磁盘上移除，它只是被标记成已删除（逻辑删除）</p>
</blockquote>
<p>向 ES 服务器发 <strong>DELETE</strong> 请求 ：<a class="link" href="http://127.0.0.1:9200/shopping/_doc/1">http://127.0.0.1:9200/shopping/_doc/1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h6 id="6）条件删除文档"><a href="#6）条件删除文档" class="headerlink" title="6）条件删除文档"></a>6）条件删除文档</h6><p>向 ES 服务器发 <strong>POST</strong> 请求 ：<a class="link" href="http://127.0.0.1:9200/shopping/_delete_by_query">http://127.0.0.1:9200/shopping/_delete_by_query <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>请求体内容为:</p>
<pre class=" language-json"><code class="language-json">&amp;#<span class="token number">123</span><span class="token punctuation">;</span>
<span class="token property">"query"</span><span class="token operator">:</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token property">"match"</span><span class="token operator">:</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token property">"price"</span><span class="token operator">:</span><span class="token number">4000.00</span>
        &amp;#<span class="token number">125</span><span class="token punctuation">;</span>
    &amp;#<span class="token number">125</span><span class="token punctuation">;</span>
&amp;#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h5 id="映射操作"><a href="#映射操作" class="headerlink" title="映射操作"></a>映射操作</h5><p>有了索引库，等于有了数据库中的 database。接下来就需要创建索引库(index)中的映射了，类似于数据库(database)中的表结构(table)。创建数据库表需要设置字段名称，类型，长度，约束等；索引库也一样，需要知道这个类型下有哪些字段，每个字段有哪些约束信息，这就叫做映射(mapping)。</p>
<h6 id="1）创建映射"><a href="#1）创建映射" class="headerlink" title="1）创建映射"></a>1）创建映射</h6><p>向 ES 服务器发 <strong>PUT</strong> 请求 ：<a class="link" href="http://127.0.0.1:9200/student/_mapping">http://127.0.0.1:9200/student/_mapping <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>请求体内容为：</p>
<pre class=" language-json"><code class="language-json">&amp;#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token property">"properties"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token property">"name"</span><span class="token operator">:</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>
            <span class="token property">"index"</span><span class="token operator">:</span> <span class="token boolean">true</span>
        &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
        <span class="token property">"sex"</span><span class="token operator">:</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>
            <span class="token property">"index"</span><span class="token operator">:</span> <span class="token boolean">false</span>
        &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
        <span class="token property">"age"</span><span class="token operator">:</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"long"</span><span class="token punctuation">,</span>
            <span class="token property">"index"</span><span class="token operator">:</span> <span class="token boolean">false</span>
        &amp;#<span class="token number">125</span><span class="token punctuation">;</span>
    &amp;#<span class="token number">125</span><span class="token punctuation">;</span>
&amp;#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p>映射数据说明：</p>
<ul>
<li><p>字段名：任意填写，下面指定许多属性，例如：title、subtitle、images、price</p>
<p>​	type：类型，Elasticsearch 中支持的数据类型非常丰富，说几个关键的：</p>
<p>​		String 类型，又分两种：</p>
<p>​			text：可分词<br>			keyword：不可分词，数据会作为完整字段进行匹配</p>
<p>​		Numerical：数值类型，分两类</p>
<p>​		基本数据类型：long、integer、short、byte、double、float、half_float</p>
<p>​		浮点数的高精度类型：scaled_float</p>
<p>​		Date：日期类型</p>
<p>​		Array：数组类型</p>
<p>​		Object：对象</p>
</li>
<li><p>index：是否索引，默认为 true，也就是说你不进行任何配置，所有字段都会被索引。</p>
<p>​	true：字段会被索引，则可以用来进行搜索</p>
<p>​	false：字段不会被索引，不能用来搜索</p>
</li>
<li><p>store：是否将数据进行独立存储，默认为 false</p>
<p>​	原始的文本会存储在_source 里面，默认情况下其他提取出来的字段都不是独立存储的，是从_source 里面提取出来的。当然你也可以独立的存储某个字段，只要设置”store”: true 即可，获取独立存储的字段要比从_source 中解析快得多，但是也会占用更多的空间，所以要根据实际业务需求来设置。</p>
</li>
<li><p>analyzer：分词器，这里的 ik_max_word 即使用 ik 分词器,后面会有专门的章节学习</p>
</li>
</ul>
<h6 id="2）查看映射"><a href="#2）查看映射" class="headerlink" title="2）查看映射"></a>2）查看映射</h6><p>向 ES 服务器发 <strong>GET</strong> 请求 ：<a class="link" href="http://127.0.0.1:9200/student/_mapping">http://127.0.0.1:9200/student/_mapping <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h6 id="3）索引映射关联"><a href="#3）索引映射关联" class="headerlink" title="3）索引映射关联"></a>3）索引映射关联</h6><p>向 ES 服务器发 PUT 请求 ：<a class="link" href="http://127.0.0.1:9200/student1">http://127.0.0.1:9200/student1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>请求体内容为：</p>
<pre class=" language-json"><code class="language-json">&amp;#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token property">"settings"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
    <span class="token property">"mappings"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token property">"properties"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token property">"name"</span><span class="token operator">:</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>
                <span class="token property">"index"</span><span class="token operator">:</span> <span class="token boolean">true</span>
            &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
            <span class="token property">"sex"</span><span class="token operator">:</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>
                <span class="token property">"index"</span><span class="token operator">:</span> <span class="token boolean">false</span>
            &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
            <span class="token property">"age"</span><span class="token operator">:</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"long"</span><span class="token punctuation">,</span>
                <span class="token property">"index"</span><span class="token operator">:</span> <span class="token boolean">false</span>
            &amp;#<span class="token number">125</span><span class="token punctuation">;</span>
        &amp;#<span class="token number">125</span><span class="token punctuation">;</span>
    &amp;#<span class="token number">125</span><span class="token punctuation">;</span>
&amp;#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="高级查询"><a href="#高级查询" class="headerlink" title="高级查询"></a>高级查询</h4><h3 id="然后再说说-ES-进阶知识"><a href="#然后再说说-ES-进阶知识" class="headerlink" title="然后再说说 ES 进阶知识"></a>然后再说说 ES 进阶知识</h3><h4 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h4><ul>
<li><p>索引（Index）</p>
<p>一个索引就是一个拥有几份相似特征的文档的集合。一个索引由一个名字来标识（<strong>必须全部是小写字母</strong>），并且当我们要对这个索引中的文档进行索引、搜索、更新和删除的时候，都要使用到这个名字。在一个集群中，可以定义任意多的索引。</p>
<p>能搜索的数据必须索引，这样的好处是可以提高查询速度，比如：新华字典前面的目录就是索引的意思，目录可以提高查询速度。</p>
<blockquote>
<p><strong>Elasticsearch  索引的精髓：一切设计都是为了提高搜索的性能</strong></p>
</blockquote>
</li>
<li><p>类型（Type）</p>
<p>一个类型是你的索引的一个逻辑上的分类&#x2F;分区。ElasticSearch 7.x 默认不再支持自定义索引类型（默认类型为：_doc）。</p>
</li>
<li><p>文档（Document）</p>
<p>一个文档是一个可被索引的基础信息单元，也就是一条数据。文档以 JSON 格式来表示，而 JSON 是一个<br>到处存在的互联网数据交互格式。</p>
</li>
<li><p>字段（Field）</p>
<p>相当于是数据表的字段，对文档数据根据不同属性进行的分类标识。</p>
</li>
<li><p>映射（Mapping）</p>
</li>
<li><p>分片（Shards）</p>
<p>被混淆的概念是，一个 Lucene  索引  我们在 Elasticsearch  称作  分片  。  一个 Elasticsearch  索引  是分片的集合。  当 Elasticsearch  在索引中搜索的时候，  他发送查询到每一个属于索引的分片(Lucene  索引) ，然后合并每个分片的结果到一个全局的结果集</p>
</li>
<li><p>副本（Replicas）</p>
</li>
<li><p>分配（Allocation）</p>
<p>将分片分配给某个节点的过程，包括分配主分片或者副本。如果是副本，还包含从主分片复制数据的过程。这个过程是由 master 节点完成的。</p>
</li>
</ul>
<h4 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h4><p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230521163302271.png" alt="image-20230521163302271"><figcaption>image-20230521163302271</figcaption></figure></p>
<p>当一个节点被选举成为主节点时， 它将负责管理集群范围内的所有变更，例如增加、删除索引，或者增加、删除节点等。 而主节点并不需要涉及到文档级别的变更和搜索等操作，所以当集群只拥有一个主节点的情况下，即使流量的增加它也不会成为瓶颈。</p>
<p>作为用户，我们可以将请求发送到集群中的任何节点 ，包括主节点。 <strong>每个节点都知道任意文档所处的位置，并且能够将我们的请求直接转发到存储我们所需文档的节点</strong>。 无论我们将请求发送到哪个节点，它都能负责从各个包含我们所需文档的节点收集回数据，并将最终结果返回給客户端。 Elasticsearch 对这一切的管理都是透明的。</p>
<h4 id="路由计算"><a href="#路由计算" class="headerlink" title="路由计算"></a>路由计算</h4><p>当索引一个文档的时候，文档会被存储到一个主分片中。Elasticsearch 如何知道一个文档应该存放到哪个分片中呢？当我们创建文档时，它如何决定这个文档应当被存储在分片 1 还是分片 2 中呢？</p>
<p>通过路由计算我们就能知道以上答案</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230521163737067.png" alt="image-20230521163737067"><figcaption>image-20230521163737067</figcaption></figure></p>
<blockquote>
<p><strong>routing 默认是文档的_id，也可以设置成自定义值。number_of_primary_shards 是主分片的数量</strong></p>
</blockquote>
<h4 id="分片控制"><a href="#分片控制" class="headerlink" title="分片控制"></a>分片控制</h4><p>我们可以发送请求到集群中的任一节点。 每个节点都有能力处理任意请求。 每个节点都知道集群中任一文档位置，所以可以直接将请求转发到需要的节点上。 在下面的例子中，将所有的请求发送到 Node1，我们将其称为<strong>协调节点</strong>(coordinating node) 。</p>
<blockquote>
<p>当发送请求的时候，为了扩展负载，更好的做法是轮询集群中所有的节点</p>
</blockquote>
<h5 id="写流程"><a href="#写流程" class="headerlink" title="写流程"></a>写流程</h5><p>新建、索引和删除请求都是<strong>写</strong>操作， <strong>必须在主分片上面完成之后才能被复制到相关的副本分片</strong></p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230521164742537.png" alt="image-20230521164742537"><figcaption>image-20230521164742537</figcaption></figure></p>
<ol>
<li>客户端向Node1发送新建、索引或者删除请求</li>
<li>节点使用文档的 _id 确定文档属于分片 0 。请求会被转发到 Node3，因为分片 0 的主分片目前被分配在 Node3 上</li>
<li>Node3 在主分片上面执行请求。如果成功了，它将请求并行转发到 Node1 和 Node2的副本分片上。一旦所有的副本分片都报告成功, Node3 将向协调节点报告成功，协调节点向客户端报告成功</li>
</ol>
<h5 id="读流程"><a href="#读流程" class="headerlink" title="读流程"></a>读流程</h5><p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230521164935969.png" alt="image-20230521164935969"><figcaption>image-20230521164935969</figcaption></figure></p>
<ol>
<li>客户端向 Node1 发送获取请求</li>
<li>节点使用文档的 _id 来确定文档属于分片 0 。分片 0 的副本分片存在于所有的三个节点上。 在这种情况下，它将请求转发到 Node2 </li>
<li>Node2 将文档返回给 Node1，然后将文档返回给客户端</li>
</ol>
<h5 id="更新流程"><a href="#更新流程" class="headerlink" title="更新流程"></a>更新流程</h5><p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230521165313434.png" alt="image-20230521165313434"><figcaption>image-20230521165313434</figcaption></figure></p>
<ol>
<li>客户端向 Node1 发送更新请求</li>
<li>它将请求转发到主分片所在的 Node3</li>
<li>Node3 从主分片检索文档，修改 _source 字段中的 JSON ，并且尝试重新索引主分片的文档。 如果文档已经被另一个进程修改，它会重试步骤 3 ，超过 retry_on_conflict 次后放弃</li>
<li>如果 Node3 成功地更新文档，它将<strong>完整的新版本的文档</strong>并行转发到 Node1 和 Node2 上的副本分片，重新建立索引。一旦所有副本分片都返回成功， Node3 向协调节点也返回成功，协调节点向客户端返回成功</li>
</ol>
<h4 id="分片原理"><a href="#分片原理" class="headerlink" title="分片原理"></a>分片原理</h4><p>分片是 Elasticsearch 最小的工作单元。但是究竟什么是一个分片，它是如何工作的？</p>
<p>文本字段中的每个单词需要被搜索，对数据库意味着需要单个字段有索引多值的能力。最好的支持是一个字段多个值<br>需求的数据结构是<strong>倒排索引</strong></p>
<h5 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h5><p>首先来看看什么是正向索引</p>
<p><strong>正向索引</strong>，就是搜索引擎会将待搜索的文件都对应一个文件 ID，搜索时将这个ID 和搜索关键字进行对应，形成 K-V 对，然后对关键字进行统计计数</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230521175100274.png" alt="image-20230521175100274"><figcaption>image-20230521175100274</figcaption></figure></p>
<p>但是搜索引擎中的文档的数目是个天文数字，这样的索引结构根本无法满足实时返回结果要求，所以搜索引擎会将正向索引重新构建为倒排索引</p>
<p><strong>倒排索引</strong>，即把文件ID对应到关键词的映射转换为关键词到文件ID的映射，每个关键词都对应着一系列的文件，这些文件中都出现这个关键词</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230521175237157.png" alt="image-20230521175237157"><figcaption>image-20230521175237157</figcaption></figure></p>
<p>分词和标准化的过程称为<strong>分析</strong></p>
<blockquote>
<p>倒排索引被写入磁盘后是不可改变的:它永远不会修改</p>
</blockquote>
<p>不变性有重要的价值：</p>
<ul>
<li>不需要锁。如果你从来不更新索引，你就不需要担心多进程同时修改数据的问题</li>
<li>一旦索引被读入内核的文件系统缓存，便会留在哪里，由于其不变性。只要文件系统缓存中还有足够的空间，那么大部分读请求会直接请求内存，而不会命中磁盘。这提供了很大的性能提升</li>
<li>其它缓存(像 filter 缓存)，在索引的生命周期内始终有效。它们不需要在每次数据改变时被重建，因为数据不会变化</li>
<li>写入单个大的倒排索引允许数据被压缩，减少磁盘 I&#x2F;O 和 需要被缓存到内存的索引的使用量</li>
</ul>
<h5 id="动态更新索引"><a href="#动态更新索引" class="headerlink" title="动态更新索引"></a>动态更新索引</h5><p>如何在保留不变性的前提下实现倒排索引的更新？</p>
<p><strong>更新方案</strong>：用更多的索引。通过增加新的补充索引来反映新近的修改，而不是直接重写整个倒排索引。每一个倒排索引都会被轮流查询到，从最早的开始查询完后再对结果进行合并。</p>
<h5 id="按段搜索"><a href="#按段搜索" class="headerlink" title="按段搜索"></a>按段搜索</h5><p>按段搜索会以如下流程执行：</p>
<ol>
<li><p>新文档被收集到内存索引缓存</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230521184530401.png" alt="image-20230521184530401"><figcaption>image-20230521184530401</figcaption></figure></p>
</li>
<li><p>不时地, 缓存被提交</p>
<p>(1) 一个新的段–一个追加的倒排索引—被写入磁盘。<br>(2) 一个新的包含新段名字的 提交点 被写入磁盘<br>(3) 磁盘进行 同步 — 所有在文件系统缓存中等待的写入都刷新到磁盘，以确保它们被写入物理文件</p>
</li>
<li><p>新的段被开启，让它包含的文档可见以被搜索</p>
</li>
<li><p>内存缓存被清空，等待接收新的文档</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230521184659247.png" alt="image-20230521184659247"><figcaption>image-20230521184659247</figcaption></figure></p>
</li>
</ol>
<h3 id="最后聊一下如何对-ES-进行优化"><a href="#最后聊一下如何对-ES-进行优化" class="headerlink" title="最后聊一下如何对 ES 进行优化"></a>最后聊一下如何对 ES 进行优化</h3><h4 id="硬件选择"><a href="#硬件选择" class="headerlink" title="硬件选择"></a>硬件选择</h4><ul>
<li>使用SSD。固态硬盘比机械硬盘优秀很多</li>
<li>使用 RAID 0。条带化 RAID 会提高磁盘 I&#x2F;O，代价显然就是当一块硬盘故障时整个就故障了。不要使用镜像或者奇偶校验 RAID 因为副本已经提供了这个功能</li>
<li>另外，使用多块硬盘，并允许 Elasticsearch 通过多个 path.data 目录配置把数据条带化分配到它们上面</li>
<li>不要使用远程挂载的存储，比如 NFS 或者 SMB&#x2F;CIFS。这个引入的延迟对性能来说完全是背道而驰的</li>
</ul>
<h4 id="分片策略"><a href="#分片策略" class="headerlink" title="分片策略"></a>分片策略</h4>]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>es</tag>
      </tags>
  </entry>
  <entry>
    <title>关于大数据处理引擎Spark知识的学习</title>
    <url>/2023/051959676.html</url>
    <content><![CDATA[<h3 id="第一章：RDD详解"><a href="#第一章：RDD详解" class="headerlink" title="第一章：RDD详解"></a>第一章：RDD详解</h3><h3 id="1-1-为什么需要RDD"><a href="#1-1-为什么需要RDD" class="headerlink" title="1.1 为什么需要RDD"></a>1.1 为什么需要RDD</h3><p>分布式计算需要：</p>
<ul>
<li>​    分区控制</li>
<li>​    Shuffle控制</li>
<li>​    数据存储\序列化\发送</li>
<li>​    数据计算API  等一系列功能</li>
</ul>
<p>这些功能，不能简单的通过Python内置的本地集合对象（如List\字典等）去完成。我们在分布式框架中，需要有一个统一的数据抽象对象，来实现上述分布式计算所需功能。<strong>这个抽象对象，就是RDD</strong>。</p>
<h3 id="1-2-什么是RDD"><a href="#1-2-什么是RDD" class="headerlink" title="1.2 什么是RDD"></a>1.2 什么是RDD</h3><p>RDD（Resilient Distributed Dataset）叫做弹性分布式数据集，是Spark中最基本的数据抽象，代表一个<strong>不可变、可分区、里面的元素可并行计算</strong>的集合。</p>
<p><strong>Resilient</strong>：Spark优先把数据放到内存中，如果内存放不下，就会放到磁盘里面，程序进行自动的存储切换<br>在RDD进行转换和动作的时候，会形成RDD的Lineage依赖链，当某一个RDD失效的时候，可以通过重新计算上游的RDD来重新生成丢失的RDD数据。<br>Spark把这个Job执行模型抽象为通用的有向无环图DAG，可以将多Stage的任务串联或并行执行，调度引擎自动处理Stage的失败以及Task的失败<br>Task如果失败会自动进行特定次数的重试，默认重试次数为4<br>Stage如果失败会自动进行特定次数的重试，默认重试次数为4<br>数据分片的高度弹性：可以根据业务的特征，动态调整数据分片的个数，提升整体的应用执行效率</p>
<p><strong>Distributed</strong>：RDD中的数据是分布式存储的，可用于分布式计算。RDD的数据是跨机器存储的（跨进程）</p>
<p><strong>Dataset</strong>：一个数据集合，用于存放数据的。List、Dict、Array本地集合（数据全部在一个进程内部）</p>
<p>不可变：不可变集合，变量的声明使用val</p>
<p>分区的：集合的数据被划分为很多部分，每部分称为分区Partition</p>
<p>并行计算：集合中的数据可以被并行的计算处理，每个分区数据被一个task处理</p>
<h3 id="1-3-RDD的五大特性"><a href="#1-3-RDD的五大特性" class="headerlink" title="1.3 RDD的五大特性"></a>1.3 RDD的五大特性</h3><p>前三个特性每个RDD都具备的，后两个特征是可选的：</p>
<ol>
<li>RDD是有分区的</li>
<li>计算方法都会作用到每一个分片（分区）之上</li>
<li>RDD之间是有相互依赖的关系的</li>
<li>KV型RDD可以有分区器</li>
<li>RDD分区数据的读取会尽量靠近数据所在地</li>
</ol>
<h3 id="第二章-RDD编程入门"><a href="#第二章-RDD编程入门" class="headerlink" title="第二章 RDD编程入门"></a>第二章 RDD编程入门</h3><h3 id="第三章-RDD的持久化"><a href="#第三章-RDD的持久化" class="headerlink" title="第三章 RDD的持久化"></a>第三章 RDD的持久化</h3><h4 id="3-1-RDD的数据的过程数据"><a href="#3-1-RDD的数据的过程数据" class="headerlink" title="3.1 RDD的数据的过程数据"></a>3.1 RDD的数据的过程数据</h4><p>RDD之间相互迭代计算（Transformation的转换），当执行开启后，新的RDD的生成，代表老RDD的消失</p>
<p>RDD的数据是过程数据，只在数据的处理过程中存在，一旦处理完成，就不见了。这个特性可以最大化的利用资源，老旧RDD没用了，就从内存中清理，给后续的计算腾出内存空间</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230519230343524.png" alt="image-20230519230343524"><figcaption>image-20230519230343524</figcaption></figure></p>
<p>为了不重新从rdd1开始构建rdd3，所以要使用rdd的持久化技术</p>
<h4 id="3-2-RDD-Cache"><a href="#3-2-RDD-Cache" class="headerlink" title="3.2 RDD Cache"></a>3.2 RDD Cache</h4><p>对于上述的场景，肯定要执行优化，优化就是：rdd3如果不消失，那么rdd1-&gt;rdd2-&gt;rdd3这个链条就不会执行2次，或者更多次</p>
<p>RDD的缓存技术：Spark提供了缓存的API，可以让我们通过调用API，将指定的RDD的数据保留在内存或者硬盘上</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230519230515665.png" alt="image-20230519230515665"><figcaption>image-20230519230515665</figcaption></figure></p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230519230657165.png" alt="image-20230519230657165"><figcaption>image-20230519230657165</figcaption></figure></p>
<h4 id="3-3-RDD-CheckPoint"><a href="#3-3-RDD-CheckPoint" class="headerlink" title="3.3 RDD CheckPoint"></a>3.3 RDD CheckPoint</h4><p>CheckPoint技术，也是将RDD的数据，保存起来但是它仅支持硬盘存储</p>
<p>并且：①它被设计认为是安全的；②不保留血缘关系。</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230519230903213.png" alt="image-20230519230903213"><figcaption>image-20230519230903213</figcaption></figure></p>
<p>Cache（缓存）与CheckPoint的对比：</p>
<ul>
<li>​    CheckPoint不管分区数量多少，风险是一样的，缓存分区越多，风险越高</li>
<li>​    CheckPoint支持写入HDFS，缓存不行，HDFS是高可靠存储，CheckPoint被认为是安全的</li>
<li>​    CheckPoint不支持内存，缓存可以，缓存如果写内存，性能比CheckPoint要好一些</li>
<li>​    CheckPoint因为被设计认为是安全的，所以不保留血缘关系，而缓存因为设计上认为不安全，所以保留</li>
</ul>
<p>设置CheckPoint第一件事情，选择RDD的保存路径<br>如果是Local模式，可以支持本地文件系统，如果在集群运行，千万要用HDFS<br>Sc.setCheckpointDir(“hdfs:node1:9000&#x2F;out&#x2F;xxx”)<br>用的时候，直接调用checkpoint算子即可：<br>Rdd.checkpoint()</p>
<h3 id="第四章-Spark案例练习"><a href="#第四章-Spark案例练习" class="headerlink" title="第四章 Spark案例练习"></a>第四章 Spark案例练习</h3><h3 id="第五章-共享变量"><a href="#第五章-共享变量" class="headerlink" title="第五章 共享变量"></a>第五章 共享变量</h3><h4 id="5-1-广播变量"><a href="#5-1-广播变量" class="headerlink" title="5.1 广播变量"></a>5.1 广播变量</h4><p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230519232155710.png" alt="image-20230519232155710"><figcaption>image-20230519232155710</figcaption></figure></p>
<p>!!!Executor是进程，进程内资源共享，一个Executor中有两个分区，那这两个分区就可以共享资源。Stu_info_list由Driver发送给每个分区，但是又可以共享，那么Executor中就有了两份相同的资源，造成内存的浪费和网络传输成本的增加。</p>
<p>解决方案：广播变量<br>使用方式：<br>#1、将本地list标记成广播变量即可<br>Broadcast &#x3D; sc.broadcast(stu_info_list)<br>#2、使用广播变量，从broadcast对象中取出本地list对象即可<br>Value &#x3D; broadcast.value</p>
<p>#也就是 先放进去broadcast内部，然后从broadcast内部取出来用，中间传输的是broadcast这个对象了<br>#只要中间传输的是broadcast对象，spark就会留意，只会给每个Ececutor发一份了，而不是傻傻的哪个分区要都给</p>
<h4 id="5-2-累加器"><a href="#5-2-累加器" class="headerlink" title="5.2 累加器"></a>5.2 累加器</h4><p>需求：想要对map算子计算中的数据，进行技术累加，得到全部数据计算完后的累加结果<br>因为我们初始化的count标志从Driver发送给Ececutor是发送的数值，不像指针地址那种</p>
<h3 id="第六章-Spark内核调度"><a href="#第六章-Spark内核调度" class="headerlink" title="第六章 Spark内核调度"></a>第六章 Spark内核调度</h3><h4 id="6-1-DAG"><a href="#6-1-DAG" class="headerlink" title="6.1 DAG"></a>6.1 DAG</h4><p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230519232555194.png" alt="image-20230519232555194"><figcaption>image-20230519232555194</figcaption></figure></p>
<p>DAG：有向无环图。有方向没有形成闭环的一个执行流程图</p>
<p>一个Action会将前面一串的RDD依赖关系（Transformation）执行，也就是一个Action会产生一个DAG图<br>前面我们写的搜索日志分析案例，3个需求就是3个Action，就产生了3个DAG<br>一个Action会产生一个Job（一个应用程序内的子任务），每一个Job有各自的DAG图<br></p>
<p>结论：Job和Action<br>1个Action会产生1个DAG，如果代码中有3个Action就产生3个DAG<br>一个Action会产生一个DAG，会在程序运行中产生一个Job<br>所以：1个Action &#x3D; 1个DAG &#x3D; 1个Job<br>如果一个代码中，写了3个Action，那么这个代码运行起来产生3个Job，每个Job有自己的DAG<br></p>
<p>一个代码运行起来，在Spark中称之为：Application<br>层级关系：1个Application中，可以有多个Job，每一个Job内含一个DAG，同时每一个Job都是由一个Action产生的</p>
<p>DAG是Spark代码的逻辑执行图，这个DAG的最终作用是：为了构建物理上的Spark详细执行计划而生，所以，由于Spark是分布式（多分区）的，那么DAG和分区之间也是有关联的</p>
<h4 id="6-2-DAG的宽窄依赖和阶段划分"><a href="#6-2-DAG的宽窄依赖和阶段划分" class="headerlink" title="6.2 DAG的宽窄依赖和阶段划分"></a>6.2 DAG的宽窄依赖和阶段划分</h4><p>宽窄依赖：</p>
<p>在Spark RDD前后之间的关系，分为：窄依赖、 宽依赖<br>窄依赖：父RDD的一个分区，全部将数据发给子RDD的一个分区<br>宽依赖：父RDD的一个分区，将数据发给子RDD的多个分区<br>宽依赖还有一个别名：shuffle</p>
<p>阶段划分：</p>
<p>对于Spark来说，会根据DAG，按照宽窄依赖，划分不同的DAG阶段<br>划分依据：从后往前，遇到宽依赖，就分出一个阶段，称之为stage<br>在stage的内部，一定都是：窄依赖</p>
<h4 id="6-3-内存迭代运算"><a href="#6-3-内存迭代运算" class="headerlink" title="6.3 内存迭代运算"></a>6.3 内存迭代运算</h4><p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230519234250136.png" alt="image-20230519234250136"><figcaption>image-20230519234250136</figcaption></figure></p>
<p>![image-20230519233246978](.&#x2F;%E5%85%B3%E4%BA%8E%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%BC%95%E6%93%8ESpark%E7%9F%A5%E8%AF%86%E7%9A%84%E5%AD%A6%E4%B9%A0&#x2F;image-20230519233246978.png</p>
<p>​    <figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230519234238064.png" alt="image-20230519234238064"><figcaption>image-20230519234238064</figcaption></figure></p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230519234346576.png" alt="image-20230519234346576"><figcaption>image-20230519234346576</figcaption></figure></p>
<h4 id="6-4-Spark并行度"><a href="#6-4-Spark并行度" class="headerlink" title="6.4 Spark并行度"></a>6.4 Spark并行度</h4><p>Spark的并行：在同一时间内，有多少个task在同时运行<br>并行度：并行能力的设置<br>比如设置并行度为6，其实就是要6个task并行在跑<br>在有了6个task并行的前提下，rdd的分区就被规划成6个分区了</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230519234535771.png" alt="image-20230519234535771"><figcaption>image-20230519234535771</figcaption></figure></p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230519234559444.png" alt="image-20230519234559444"><figcaption>image-20230519234559444</figcaption></figure></p>
<h4 id="6-5-Spark任务调度"><a href="#6-5-Spark任务调度" class="headerlink" title="6.5 Spark任务调度"></a>6.5 Spark任务调度</h4><p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230519234628606.png" alt="image-20230519234628606"><figcaption>image-20230519234628606</figcaption></figure></p>
<p>DAG调度器：工作内容：将逻辑的DAG图进行处理，最终得到逻辑上的Task划分</p>
<p>Task调度器：工作内容：基于DAG调度器的产出，来规划这些逻辑的task，应该在哪些物理的executor上运行，以及监控管理它们的运行</p>
<p>Spark架构体系</p>
<p>StandAlone模式是spark⾃带的集群运⾏模式，不依赖其他的资源调度框架，部署起来简单。<br>StandAlone模式⼜分为client模式和cluster模式，本质区别是Driver运⾏在哪⾥，如果Driver运⾏在SparkSubmit进程中就是Client模式，如果Driver运⾏在集群中就是Cluster模式。</p>
<p>standalone client模式</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="/./%E5%85%B3%E4%BA%8E%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%BC%95%E6%93%8ESpark%E7%9F%A5%E8%AF%86%E7%9A%84%E5%AD%A6%E4%B9%A0/image-20230519224936208.png" alt="image-20230519224936208"><figcaption>image-20230519224936208</figcaption></figure></p>
<p>standalone cluster模式</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="/./%E5%85%B3%E4%BA%8E%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%BC%95%E6%93%8ESpark%E7%9F%A5%E8%AF%86%E7%9A%84%E5%AD%A6%E4%B9%A0/image-20230519225011812.png" alt="image-20230519225011812"><figcaption>image-20230519225011812</figcaption></figure></p>
<p>Spark On YARN cluster模式</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="/./%E5%85%B3%E4%BA%8E%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%BC%95%E6%93%8ESpark%E7%9F%A5%E8%AF%86%E7%9A%84%E5%AD%A6%E4%B9%A0/image-20230519225828449.png" alt="image-20230519225828449"><figcaption>image-20230519225828449</figcaption></figure></p>
<ol>
<li>client向ResourceManager申请资源，返回一个application ID</li>
<li>client上传spark jars下面的jar包、自己写的jar包和配置</li>
<li>ResourceManager随机找一个资源充足的NodeManager</li>
<li>然后通过RPC让NodeManager从HDFS上下载jar包和配置，启动ApplicationMaster</li>
<li>ApplicationMaster向ResourceManager申请资源</li>
<li>ResourceManager中的调度器找到符合条件的NodeManager，将NodeManager的信息返回给ApplicationMaster</li>
<li>ApplicationMaster跟返回的NodeManager进行通信</li>
<li>NodeManager从HDFS下载依赖</li>
<li>NodeManager启动Executor</li>
<li>Executor启动之后反向向ApplicationMaster [Driver]注册</li>
</ol>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>spark</tag>
      </tags>
  </entry>
  <entry>
    <title>关于实时计算框架flink知识的学习(1)</title>
    <url>/2023/042717719.html</url>
    <content><![CDATA[<p>这一篇文章我要分享的是flink实时计算框架，我先解释一下flink的基本概念：一个分布式的、有状态的实时流式处理系统（编程框架）。那么就会有人问：之前不是学习过spark streaming吗，也能做实时流式处理，为什么还要学习flink？其实答案很简单：flink比spark streaming更<strong>实时</strong>！spark streaming的流式处理是基于微批处理的思想，需要隔一点时间才会去处理，flink采用了基于操作符的连续模型，可以做到微秒级别的延迟</p>
<p>下面就是我分享的知识：</p>
<h3 id="1-快速认识flink"><a href="#1-快速认识flink" class="headerlink" title="1 快速认识flink"></a>1 快速认识flink</h3><h4 id="1-1-flink基本概念"><a href="#1-1-flink基本概念" class="headerlink" title="1.1 flink基本概念"></a>1.1 flink基本概念</h4><p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230505164747393.png" alt="image-20230505164747393"><figcaption>image-20230505164747393</figcaption></figure></p>
<p><strong>flink，以流处理方式作为基础的世界观，并通过引入有界流来实现批计算，从而实现流批一体，可以说是非常np</strong></p>
<h4 id="1-2-flink的运行架构"><a href="#1-2-flink的运行架构" class="headerlink" title="1.2 flink的运行架构"></a>1.2 flink的运行架构</h4><p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230505165006278.png" alt="image-20230505165006278"><figcaption>image-20230505165006278</figcaption></figure></p>
<p>flink集群采用 Master - Slave 架构：</p>
<ul>
<li>Master的角色为JobManager，负责集群和作业管理</li>
<li>Slave的角色是TaskManager，负责执行计算任务</li>
<li>客户端Client负责集群和提交任务，JobManager 和 TaskManager是集群的进程</li>
</ul>
<p>各角色主要职责说明：</p>
<ol>
<li>Client：是flink提供的CLI命令行工具，用来提交flink作业到flink集群，在客户端中负责 Stream Graph（流图）和 Job Graph（作业图）的构建</li>
<li>JobManager：根据并行度将flink客户端提交的flink应用分解为子任务，从资源管理器ResourceManager申请所需的计算资源，资源具备之后，开始分发到TaskManager执行Task，并负责应用容错，跟踪作业的执行状态，发现异常则恢复作业等</li>
<li>TaskManager：接收JobManager分发的子任务，根据自身的资源情况，管理子任务的启动、停止、销毁、异常恢复等生命周期阶段。flink程序中必须有一个TaskManager</li>
</ol>
<h4 id="1-3-flink的特性"><a href="#1-3-flink的特性" class="headerlink" title="1.3 flink的特性"></a>1.3 flink的特性</h4><ol>
<li><p>适用于几乎所有的流式数据处理管道</p>
<ul>
<li>事件驱动型应用</li>
<li>流、批数据分析</li>
<li>数据管道及ETL</li>
</ul>
</li>
<li><p>自带状态管理机制</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230505172208248.png" alt="image-20230505172208248"><figcaption>image-20230505172208248</figcaption></figure></p>
</li>
<li><p>强大的准确性保证</p>
<ul>
<li>exactly-once 状态一致性</li>
<li>事件时间处理</li>
<li>专业的迟到数据处理</li>
</ul>
</li>
<li><p>灵活丰富的多层api</p>
<ul>
<li>流、批数据之上的SQL查询</li>
<li>流、批数据之上的TableApi</li>
<li>datastream流处理算子api、dataset批处理算子api</li>
<li>精细可控的processFunction</li>
</ul>
</li>
<li><p>规模弹性扩展</p>
<ul>
<li>可扩展的分布式架构（集群级别的资源规模灵活配置，算子粒度的独立并行度灵活配置）</li>
<li>支持超大状态管理</li>
<li>增量checkpoint机制</li>
</ul>
</li>
<li><p>强大的运维能力</p>
<ul>
<li>弹性实施部署机制</li>
<li>高可用机制</li>
<li>保存点恢复机制</li>
</ul>
</li>
<li><p>优秀的性能</p>
<ul>
<li>低延迟</li>
<li>高吞吐</li>
<li>内存计算</li>
</ul>
</li>
</ol>
<h3 id="2-flink编程基础"><a href="#2-flink编程基础" class="headerlink" title="2 flink编程基础"></a>2 flink编程基础</h3><h4 id="2-1-flink的DataStream抽象"><a href="#2-1-flink的DataStream抽象" class="headerlink" title="2.1 flink的DataStream抽象"></a>2.1 flink的DataStream抽象</h4><ul>
<li>DataStream 代表一个数据流，<strong>它可以是无界的，也可以是有界的</strong></li>
<li>DataStream 类似于Spark的rdd，它是不可变的</li>
<li>无法对一个DataStream进行自由的添加或删除或修改元素</li>
<li>只能通过算子对DataStream中的数据进行转换，将一个DataStream转成另一个DataStream</li>
<li>DataStream可以通过source算子加载、映射外部数据而来；或者从已存在的DataStream转换而来</li>
</ul>
<h4 id="2-2-flink编程模板"><a href="#2-2-flink编程模板" class="headerlink" title="2.2 flink编程模板"></a>2.2 flink编程模板</h4><ol>
<li>获取一个编程、执行入口环境env</li>
<li>通过数据源组件、加载、创建DataStream</li>
<li>对DataStream调用各种处理算子表达计算逻辑</li>
<li>通过sink算子指定计算结果的输出方式</li>
<li>在env上触发程序提交运行</li>
</ol>
<h4 id="2-3-flink程序的并行概念"><a href="#2-3-flink程序的并行概念" class="headerlink" title="2.3 flink程序的并行概念"></a>2.3 flink程序的并行概念</h4><ul>
<li><p>flink程序中，每一个算子都可以成为一个独立任务（task）</p>
</li>
<li><p>flink程序中，视上下游算子间数据分发规划、并行度、共享槽位设置，可组成算子链成为一个task</p>
</li>
<li><p>每个任务在运行时都可拥有多个并行是运行实例（subtask）</p>
</li>
<li><p>且每个算子任务的并行度都可以在代码中显式设置</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230514180529758.png" alt="image-20230514180529758"><figcaption>image-20230514180529758</figcaption></figure></p>
</li>
</ul>
<h4 id="2-4-flink编程入口"><a href="#2-4-flink编程入口" class="headerlink" title="2.4 flink编程入口"></a>2.4 flink编程入口</h4><p>批处理入口</p>
<pre class=" language-java"><code class="language-java">ExecutionEnvironment env <span class="token operator">=</span> ExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnviroment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>流处理入口</p>
<pre class=" language-java"><code class="language-java">StreamExecutionEnvironment env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnviroment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>流批一体处理入口</p>
<pre class=" language-java"><code class="language-java">StreamExecutionEnvironment env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnviroment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//为env设置环境参数</span>
ExecutionConfig config <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//设置为批处理模式</span>
config<span class="token punctuation">.</span><span class="token function">setExecutionMode</span><span class="token punctuation">(</span>ExecutionMode<span class="token punctuation">.</span>BATCH<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>开启webui的本地运行环境处理入口</p>
<pre class=" language-java"><code class="language-java">Configuration conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
conf<span class="token punctuation">.</span><span class="token function">setInteger</span><span class="token punctuation">(</span><span class="token string">"rest.port"</span><span class="token punctuation">,</span><span class="token number">8081</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
StreamExecutionEnvironment env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnviroment</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<blockquote>
<p>要开启上述webui功能，需添加依赖：flink-runtime-web_2.12</p>
</blockquote>
<h4 id="2-5-基本source算子"><a href="#2-5-基本source算子" class="headerlink" title="2.5 基本source算子"></a>2.5 基本source算子</h4><p>source是用来获取外部数据的算子，按照获取数据的方式，可以分为：</p>
<ul>
<li>基于集合的Source</li>
<li>基于Socket网络端口的Source</li>
<li>基于文件的Source</li>
<li>第三方Connector Source</li>
<li>自定义Source</li>
</ul>
<p>在此我仅介绍 第三方Connector Source 和 自定义Source</p>
<p>在实际生产环境中，为了保证flink可以高效读取数据源中的数据，通常是跟一些分布式消息中间件结合使用，例如Kafka。Flink和Kafka整合可以高效的读取数据，并且可以保证Exactly Once（精确一次性语义）</p>
<h5 id="第三方Connector-Source"><a href="#第三方Connector-Source" class="headerlink" title="第三方Connector Source"></a>第三方Connector Source</h5><p>以 Kafka Source为例：首先引入依赖：flink-connector-kafka_2.12</p>
<blockquote>
<p>示例代码：</p>
</blockquote>
<pre class=" language-java"><code class="language-java">KafkaSource<span class="token operator">&lt;</span>String<span class="token operator">></span> kafkaSource <span class="token operator">=</span> KafkaSource<span class="token punctuation">.</span>&lt;String<span class="token operator">></span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setTopics</span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">)</span>	<span class="token comment" spellcheck="true">//设置主题</span>
                <span class="token punctuation">.</span><span class="token function">setGroupId</span><span class="token punctuation">(</span><span class="token string">"01"</span><span class="token punctuation">)</span>	<span class="token comment" spellcheck="true">//设置消费组ID</span>
                <span class="token punctuation">.</span><span class="token function">setBootstrapServers</span><span class="token punctuation">(</span><span class="token string">"node1:9092"</span><span class="token punctuation">)</span>	<span class="token comment" spellcheck="true">//设置kafka连接地址</span>
                <span class="token comment" spellcheck="true">//OffsetsInitializer.committedOffsets(OffsetResetStrategy.LATEST)   消费起始位移选择之前提交的偏移量（如果没有，则重置为LATEST）</span>
                <span class="token comment" spellcheck="true">//OffsetsInitializer.earliest() 消费起始位移直接选择为“最早”</span>
                <span class="token comment" spellcheck="true">//OffsetsInitializer.latest() 消费起始位移直接选择为“最新”</span>
                <span class="token comment" spellcheck="true">//OffsetsInitializer.offsets(Map&lt; TopicPartition,Long>) 消费起始位移为：方法所传入的每个分区和对应的起始偏移量</span>
                <span class="token punctuation">.</span><span class="token function">setStartingOffsets</span><span class="token punctuation">(</span>OffsetsInitializer<span class="token punctuation">.</span><span class="token function">committedOffsets</span><span class="token punctuation">(</span>OffsetResetStrategy<span class="token punctuation">.</span>LATEST<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setValueOnlyDeserializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleStringSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>	<span class="token comment" spellcheck="true">//设置反序列化Schema，SimpleStringSchema指的是读取kafka中的数据反序列化成String格式</span>

                <span class="token comment" spellcheck="true">//开启了Kafka底层消费者的自动位移提交机制，它会把最新的消费位移提交到Kafka的consumer_offsets中</span>
                <span class="token comment" spellcheck="true">//但是就算把自动位移提交机制开启，KafkaSource依然不依赖自动提交机制（宕机重启时，优先从flink算子自己的状态去获取偏移量&lt;更可靠>）</span>
                <span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"auto.offset.commit"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span>

                <span class="token comment" spellcheck="true">//把本source算子设置成 BOUNDED（有界流），将来本source去读取数据的时候，读到指定的位置，就停止读取并退出</span>
                <span class="token comment" spellcheck="true">//常用来补数或者重跑一段历史数据</span>
                <span class="token comment" spellcheck="true">//.setBounded(OffsetsInitializer.committedOffsets());</span>
                <span class="token comment" spellcheck="true">//把本source算子设置成 UNBOUNDED（无界流），但是并不会一直读取数据，而是达到指定位置就停止读取，但程序不退出</span>
                <span class="token comment" spellcheck="true">//主要应用场景：   需要从Kafka中读取某一段固定长度的数据，然后拿着这段数据去跟真正的无界流联合处理</span>
                <span class="token comment" spellcheck="true">//.setUnbounded(OffsetsInitializer.latest())</span>

                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>flink会把kafka消费者的消费位移记录在算子状态中，这样就实现了消费位移状态的容错，从而可以支持端到端的exactly-once</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230514185841763.png" alt="image-20230514185841763"><figcaption>image-20230514185841763</figcaption></figure></p>
<h5 id="自定义Source"><a href="#自定义Source" class="headerlink" title="自定义Source"></a>自定义Source</h5><p>本质上就是定义一个类，实现SourceFunction或继承RichParallelSourceFunction，实现run方法和cancel方法</p>
<blockquote>
<p>示例代码：</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyParallelSource</span> <span class="token keyword">extends</span> <span class="token class-name">RichParallelSourceFunction</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义一个 int 类型的变量，从 1 开始</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义一个 flag 标标志</span>
    <span class="token comment" spellcheck="true">//run 方法就是用来读取外部的数据或产生数据的逻辑</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>SourceContext<span class="token operator">&lt;</span>String<span class="token operator">></span> ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//满足 while 循环的条件，就将数据通过 SourceContext 收集起来</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> flag<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//为避免太快，睡眠 1 秒</span>
        ctx<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token string">"data："</span> <span class="token operator">+</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将数据通过 SourceContext 收集起来</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//cancel 方法就是让 Source 停止</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//将 flag 设置成 false，即停止 Source</span>
        flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="2-6-基本transformation算子"><a href="#2-6-基本transformation算子" class="headerlink" title="2.6 基本transformation算子"></a>2.6 基本transformation算子</h4><h5 id="2-6-1-映射算子"><a href="#2-6-1-映射算子" class="headerlink" title="2.6.1 映射算子"></a>2.6.1 映射算子</h5><ul>
<li>map映射：DataStream.map( new MapFunction(…){})</li>
<li>flatMap扁平化映射：DataStream.flatMap( new FlatMapFunction(…){})</li>
</ul>
<blockquote>
<p>如果是调用flatMap方法时传入Lambda表达式，需要在调用flatMap方法后，在调用returns方法指定返回的数据的类型。不然Flink无法自动推断出返回的数据类型，会出现异常。</p>
<p>比如返回一个元组：<br>return Types.TUPLE(Types.String,Types.INT)</p>
</blockquote>
<ul>
<li>project 投影：DataStream.project(元组索引)</li>
</ul>
<blockquote>
<p>该算子只能对Tuple类型数据使用，project方法的功能类似sql中的”select”字段；该方法只有Java的API有，Scala的API没有此方法。</p>
<p>例如：DataStream.project(0,2)</p>
</blockquote>
<h5 id="2-6-2-过滤算子"><a href="#2-6-2-过滤算子" class="headerlink" title="2.6.2 过滤算子"></a>2.6.2 过滤算子</h5><p>filter过滤：DataStream.filter( new FilterFunction(…){})</p>
<h5 id="2-6-3-分组算子"><a href="#2-6-3-分组算子" class="headerlink" title="2.6.3 分组算子"></a>2.6.3 分组算子</h5><p>keyBy按key分组：DataStream.keyBy()</p>
<p>&#x2F;&#x2F;按照 Tuple2 中的第 0 个位置进行分组，分组后得到 KeyedStream</p>
<pre class=" language-java"><code class="language-java">KeyedStream<span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">,</span> Tuple<span class="token operator">></span> keyed <span class="token operator">=</span> wordAndOne<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>&#x2F;&#x2F;按照 Bean 中的属性名 word 进行分组</p>
<pre class=" language-java"><code class="language-java">KeyedStream<span class="token operator">&lt;</span>CountBean<span class="token punctuation">,</span> Tuple<span class="token operator">></span> keyed <span class="token operator">=</span> wordAndOne<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token string">"word"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h5 id="2-6-4-滚动聚合算子"><a href="#2-6-4-滚动聚合算子" class="headerlink" title="2.6.4 滚动聚合算子"></a>2.6.4 滚动聚合算子</h5><blockquote>
<p>此处所说的滚动聚合算子，是多个聚合算子的统称，有sum、min、minBy、max、maxBy；<by>这些算子的底层逻辑都是维护一个聚合值，并使用每条流入的数据对聚合值进行滚动更新；<by>这些算子都只能在KeyedStream上调用（就是必须keyBy之后调用）。</by></by></p>
</blockquote>
<ul>
<li>sum：该算子实现实时滚动相加的功能，即新输入的数据和历史数据进行相加</li>
<li>min、minBy：这两个算子都是求最小值<br>min和minBy的区别在于：<br>min的返回值，最小值字段以外，其他字段是第一条输入数据的值；<br>minBy的返回值，就是最小值字段所在的那条数据。</li>
<li>max、maxBy同理</li>
<li>reduce规约：它的滚动聚合逻辑没有写死，而是由用户通过ReduceFunction来传入</li>
<li>fold折叠：1.12版本已移除</li>
</ul>
<h4 id="2-7-基本sink算子"><a href="#2-7-基本sink算子" class="headerlink" title="2.7 基本sink算子"></a>2.7 基本sink算子</h4><p>sink算子是将计算结果最终输出的算子；不同的sink算子可以将数据输出到不同的目标，如写入到文件、输出到指定的网络端口、消息中间件、外部的文件系统或者是打印到控制台。</p>
<h5 id="2-7-1-打印输出（略）"><a href="#2-7-1-打印输出（略）" class="headerlink" title="2.7.1 打印输出（略）"></a>2.7.1 打印输出（略）</h5><h5 id="2-7-2-文件sink"><a href="#2-7-2-文件sink" class="headerlink" title="2.7.2 文件sink"></a>2.7.2 文件sink</h5><ul>
<li>第一种方法：result.wirteAs[x] (存储路径)–x可以是Text、Csv。<strong>但是此种方法已被移除</strong></li>
<li>第二种方法：result.writeUsingOutputFormat( new TextOutputFormat&lt;&gt;(new Path( path )))  以指定的格式输出</li>
<li>第三种方法：result.writeToSocket( ip地址, 端口号, new SimpleStrignSchema())  输出到网络端口</li>
</ul>
<h4 id="2-8-扩展sink算子"><a href="#2-8-扩展sink算子" class="headerlink" title="2.8 扩展sink算子"></a>2.8 扩展sink算子</h4><h5 id="2-8-1-StreamFileSink"><a href="#2-8-1-StreamFileSink" class="headerlink" title="2.8.1 StreamFileSink"></a>2.8.1 StreamFileSink</h5><p>该Sink不但可以<strong>将数据写入到各种文件系统</strong>，而且<strong>整合了checkpoint机制来保证Exactly Once语义</strong>，还可以<strong>对文件进行分桶存储</strong>，还支持<strong>以列式存储的格式写入</strong>，功能更强大。</p>
<p>StreamFileSink中输出的文件，其生命周期会经历3种状态：</p>
<ol>
<li><p>in-progress Files</p>
</li>
<li><p>Pending Files</p>
</li>
<li><p>Finshed Files</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230525120857757.png" alt="image-20230525120857757"><figcaption>image-20230525120857757</figcaption></figure></p>
</li>
</ol>
<p><em><strong>代码模块要点</strong></em>：通过DefaultRollingPolicy这个工具类，指定文件滚动生成的策略。这里设置的文件滚动生成策略有两个，一个是距离上一次生成文件时间超过30秒，另一个是文件大小达到100mb。这两个条件只要满足其中一个即可滚动生成文件。然后StreamingFileSink.forRowFormat方法将文件输出目录、文件写入的编码传入。再调用withRollingPolicy关联上面的文件滚动生成策略，接着调用build方法构建好StreamingFileSink，最后将其作为参数传入到addSink方法中。</p>
<p>列式存储文件输出代码结构剖析</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230525174137091.png" alt="image-20230525174137091"><figcaption>image-20230525174137091</figcaption></figure></p>
<p>GenericRecord 与 Schema 的关系</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230525174307272.png" alt="image-20230525174307272"><figcaption>image-20230525174307272</figcaption></figure></p>
<h6 id="2-8-1-1-Row格式文件输出代码案例"><a href="#2-8-1-1-Row格式文件输出代码案例" class="headerlink" title="2.8.1.1 Row格式文件输出代码案例"></a>2.8.1.1 Row格式文件输出代码案例</h6><pre class=" language-java"><code class="language-java">DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> dataSteam <span class="token operator">=</span> …
<span class="token comment" spellcheck="true">//构建文件滚动生成的策略</span>
DefaultRollingPolicy<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> rollingPolicy <span class="token operator">=</span> DefaultRollingPolicy<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">withRolloverInterval</span><span class="token punctuation">(</span><span class="token number">30</span> <span class="token operator">*</span> 1000L<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//30 秒滚动生成一个文件</span>
    <span class="token punctuation">.</span><span class="token function">withMaxPartSize</span><span class="token punctuation">(</span>1024L <span class="token operator">*</span> 1024L <span class="token operator">*</span> 100L<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//当文件达到 100m 滚动生成一个文件</span>
    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//创建 StreamingFileSink，数据以行格式写入</span>
StreamingFileSink<span class="token operator">&lt;</span>String<span class="token operator">></span> sink <span class="token operator">=</span> StreamingFileSink<span class="token punctuation">.</span><span class="token function">forRowFormat</span><span class="token punctuation">(</span>
    <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>outputPath<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//指的文件存储目录</span>
    <span class="token keyword">new</span> <span class="token class-name">SimpleStringEncoder</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//指的文件的编码</span>
    <span class="token punctuation">.</span><span class="token function">withRollingPolicy</span><span class="token punctuation">(</span>rollingPolicy<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//传入文件滚动生成策略</span>
    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//调用 DataStream 的 addSink 添加该 Sink</span>
dataSteam<span class="token punctuation">.</span><span class="token function">addSink</span><span class="token punctuation">(</span>sink<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h6 id="2-8-1-2-Bulk列式存储文件输出代码实例1"><a href="#2-8-1-2-Bulk列式存储文件输出代码实例1" class="headerlink" title="2.8.1.2 Bulk列式存储文件输出代码实例1"></a>2.8.1.2 Bulk列式存储文件输出代码实例1</h6><p>手动构建Avro的Schema对象，得到ParquetWriterFactory的方式</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
* 方式一：
* 核心逻辑：
* - 构造一个 schema
* - 利用 schema 构造一个 parquetWriterFactory
* - 利用 parquetWriterFactory 构造一个 FileSink 算子
* - 将原始数据转成 GenericRecord 流，输出到 FileSink 算子
*/</span>
<span class="token comment" spellcheck="true">// 1. 先定义 GenericRecord 的数据模式</span>
Schema schema <span class="token operator">=</span> SchemaBuilder<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">record</span><span class="token punctuation">(</span><span class="token string">"DataRecord"</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">namespace</span><span class="token punctuation">(</span><span class="token string">"cn.doitedu.flink.avro.schema"</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">doc</span><span class="token punctuation">(</span><span class="token string">"用户行为事件数据模式"</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">fields</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">requiredInt</span><span class="token punctuation">(</span><span class="token string">"gid"</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">requiredLong</span><span class="token punctuation">(</span><span class="token string">"ts"</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">requiredString</span><span class="token punctuation">(</span><span class="token string">"eventId"</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">requiredString</span><span class="token punctuation">(</span><span class="token string">"sessionId"</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"eventInfo"</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">"string"</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">noDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">endRecord</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
<span class="token comment" spellcheck="true">// 2. 通过定义好的 schema 模式，来得到一个 parquetWriter</span>
ParquetWriterFactory<span class="token operator">&lt;</span>GenericRecord<span class="token operator">></span> writerFactory <span class="token operator">=</span> ParquetAvroWriters<span class="token punctuation">.</span><span class="token function">forGenericRecord</span><span class="token punctuation">(</span>schema<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 3. 利用生成好的 parquetWriter，来构造一个 支持列式输出 parquet 文件的 sink 算子</span>
FileSink<span class="token operator">&lt;</span>GenericRecord<span class="token operator">></span> bulksink <span class="token operator">=</span> FileSink<span class="token punctuation">.</span><span class="token function">forBulkFormat</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">"d:/datasink/"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> writerFactory<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">withBucketAssigner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DateTimeBucketAssigner</span><span class="token operator">&lt;</span>GenericRecord<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd--HH"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">withRollingPolicy</span><span class="token punctuation">(</span>OnCheckpointRollingPolicy<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">withOutputFileConfig</span><span class="token punctuation">(</span>OutputFileConfig<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withPartPrefix</span><span class="token punctuation">(</span><span class="token string">"doit_edu"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withPartSuffix</span><span class="token punctuation">(</span><span class="token string">".parquet"</span>	<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 4. 将自定义 javabean 的流，转成 上述 sink 算子中 parquetWriter 所需要的 GenericRecord 流</span>
SingleOutputStreamOperator<span class="token operator">&lt;</span>GenericRecord<span class="token operator">></span> recordStream <span class="token operator">=</span> streamSource
    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>MapFunction<span class="token operator">&lt;</span>EventLog<span class="token punctuation">,</span> GenericRecord<span class="token operator">></span><span class="token punctuation">)</span> eventLog <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 构造一个 Record 对象</span>
        GenericData<span class="token punctuation">.</span>Record record <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericData<span class="token punctuation">.</span>Record</span><span class="token punctuation">(</span>schema<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 将数据填入 record</span>
        record<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"gid"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> eventLog<span class="token punctuation">.</span><span class="token function">getGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        record<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"eventId"</span><span class="token punctuation">,</span> eventLog<span class="token punctuation">.</span><span class="token function">getEventId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        record<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ts"</span><span class="token punctuation">,</span> eventLog<span class="token punctuation">.</span><span class="token function">getTimeStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        record<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"sessionId"</span><span class="token punctuation">,</span> eventLog<span class="token punctuation">.</span><span class="token function">getSessionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        record<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"eventInfo"</span><span class="token punctuation">,</span> eventLog<span class="token punctuation">.</span><span class="token function">getEventInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> record<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">returns</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericRecordAvroTypeInfo</span><span class="token punctuation">(</span>schema<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 由于 avro 的相关类、对象需要用 avro</span>
的序列化器，所以需要显式指定 AvroTypeInfo 来提供 AvroSerializer

<span class="token comment" spellcheck="true">// 5. 输出数据</span>
recordStream<span class="token punctuation">.</span><span class="token function">sinkTo</span><span class="token punctuation">(</span>bulksink<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h6 id="2-8-1-3-Bulk列式存储文件输出代码实例2"><a href="#2-8-1-3-Bulk列式存储文件输出代码实例2" class="headerlink" title="2.8.1.3 Bulk列式存储文件输出代码实例2"></a>2.8.1.3 Bulk列式存储文件输出代码实例2</h6><p>编写 avsc 配置文件，并利用插件生成“特定 JavaBean”，得到 ParquetWriterFactory 的方式</p>
<p>avsc配置文件：得到“特定 JavaBean”–AvroEventLogBean</p>
<pre><code>&#123;&quot;namespace&quot;: &quot;cn.doitedu.flink.avro.schema&quot;,
&quot;type&quot;: &quot;record&quot;,
&quot;name&quot;: &quot;AvroEventLog&quot;,
&quot;fields&quot;: [
    &#123;&quot;name&quot;: &quot;guid&quot;, &quot;type&quot;: &quot;long&quot;&#125;,
    &#123;&quot;name&quot;: &quot;sessionId&quot;, &quot;type&quot;: &quot;string&quot;&#125;,
    &#123;&quot;name&quot;: &quot;eventId&quot;, &quot;type&quot;: &quot;string&quot;&#125;,
    &#123;&quot;name&quot;: &quot;timeStamp&quot;, &quot;type&quot;: &quot;long&quot;&#125;,
    &#123;&quot;name&quot;: &quot;eventInfo&quot;, &quot;type&quot;: &#123; &quot;type&quot;:&quot;map&quot;,&quot;values&quot;: &quot;string&quot;&#125; &#125;
    ]
&#125;
</code></pre>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
* 方式二：
* 核心逻辑：
* - 编写一个 avsc 文本文件（json），来描述数据模式
* - 添加 maven 代码生成器插件，来针对上述的 avsc 生成 avro 特定格式的 JavaBean 类
* - 利用代码生成器生成的 JavaBean，来构造一个 parquetWriterFactory
* - 利用 parquetWriterFactory 构造一个 FileSink 算子
* - 将原始数据流 转成 特定格式 JavaBean 流，输出到 FileSink 算子
*/</span>

<span class="token comment" spellcheck="true">// 1. 先定义avsc文件放在resources文件夹中，并用maven的插件，编译一下，生成特定格式的JavaBean ：AvroEventLog</span>
<span class="token comment" spellcheck="true">// 这种根据 avsc 生成的 JavaBean 类，自身就已经带有了 Schema 对象</span>
<span class="token comment" spellcheck="true">// AvroEventLog avroEventLog = new AvroEventLog();</span>
<span class="token comment" spellcheck="true">// Schema schema = avroEventLog.getSchema();</span>

<span class="token comment" spellcheck="true">// 2. 通过自动生成 AvroEventLog 类，来得到一个 parquetWriter</span>
ParquetWriterFactory<span class="token operator">&lt;</span>AvroEventLog<span class="token operator">></span> parquetWriterFactory <span class="token operator">=</span>
ParquetAvroWriters<span class="token punctuation">.</span><span class="token function">forSpecificRecord</span><span class="token punctuation">(</span>AvroEventLog<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 3. 利用生成好的 parquetWriter，来构造一个 支持列式输出 parquet 文件的 sink 算子</span>
FileSink<span class="token operator">&lt;</span>AvroEventLog<span class="token operator">></span> bulkSink <span class="token operator">=</span> FileSink<span class="token punctuation">.</span><span class="token function">forBulkFormat</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">"d:/datasink2/"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
parquetWriterFactory<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">withBucketAssigner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DateTimeBucketAssigner</span><span class="token operator">&lt;</span>AvroEventLog<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd--HH"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">withRollingPolicy</span><span class="token punctuation">(</span>OnCheckpointRollingPolicy<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>	<span class="token punctuation">.</span><span class="token function">withOutputFileConfig</span><span class="token punctuation">(</span>OutputFileConfig<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withPartPrefix</span><span class="token punctuation">(</span><span class="token string">"doit_edu"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withPartSuffix</span><span class="token punctuation">(</span><span class="token string">".parquet"</span>	<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 4. 将自定义 javabean 的 EventLog 流，转成 上述 sink 算子中 parquetWriter 所需要的 AvroEventLog 流</span>
SingleOutputStreamOperator<span class="token operator">&lt;</span>AvroEventLog<span class="token operator">></span> avroEventLogStream <span class="token operator">=</span> streamSource<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span>
<span class="token class-name">MapFunction</span><span class="token operator">&lt;</span>EventLog<span class="token punctuation">,</span> AvroEventLog<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> AvroEventLog <span class="token function">map</span><span class="token punctuation">(</span>EventLog eventLog<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        HashMap<span class="token operator">&lt;</span>CharSequence<span class="token punctuation">,</span> CharSequence<span class="token operator">></span> eventInfo1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 进行 hashmap&lt;charsequenct,charsequence>类型的数据转移</span>
        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> eventInfo2 <span class="token operator">=</span> eventLog<span class="token punctuation">.</span><span class="token function">getEventInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Set<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">>></span> entries <span class="token operator">=</span> eventInfo2<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> entry <span class="token operator">:</span> entries<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            eventInfo1<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AvroEventLog</span><span class="token punctuation">(</span>eventLog<span class="token punctuation">.</span><span class="token function">getGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> eventLog<span class="token punctuation">.</span><span class="token function">getSessionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        eventLog<span class="token punctuation">.</span><span class="token function">getEventId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> eventLog<span class="token punctuation">.</span><span class="token function">getTimeStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> eventInfo1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 5. 输出数据</span>
avroEventLogStream<span class="token punctuation">.</span><span class="token function">sinkTo</span><span class="token punctuation">(</span>bulkSink<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h6 id="2-8-1-4-Bulk列式存储文件输出代码实例3"><a href="#2-8-1-4-Bulk列式存储文件输出代码实例3" class="headerlink" title="2.8.1.4 Bulk列式存储文件输出代码实例3"></a>2.8.1.4 Bulk列式存储文件输出代码实例3</h6><p>直接利用普通JavaBean，利用工具本身的反射机制，得到ParquetWriterFactory的方式</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
* 方式三：
* 核心逻辑：
* - 利用自己的 JavaBean 类，来构造一个 parquetWriterFactory
* - 利用 parquetWriterFactory 构造一个 FileSink 算子
* - 将原始数据流，输出到 FileSink 算子
*/</span>

<span class="token comment" spellcheck="true">// 1. 通过自己的 JavaBean 类，来得到一个 parquetWriter</span>
ParquetWriterFactory<span class="token operator">&lt;</span>EventLog<span class="token operator">></span> parquetWriterFactory <span class="token operator">=</span> ParquetAvroWriters<span class="token punctuation">.</span><span class="token function">forReflectRecord</span><span class="token punctuation">(</span>EventLog<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 2. 利用生成好的 parquetWriter，来构造一个 支持列式输出 parquet 文件的 sink 算子</span>
FileSink<span class="token operator">&lt;</span>EventLog<span class="token operator">></span> bulkSink <span class="token operator">=</span> FileSink<span class="token punctuation">.</span><span class="token function">forBulkFormat</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">"d:/datasink3/"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>parquetWriterFactory<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">withBucketAssigner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DateTimeBucketAssigner</span><span class="token operator">&lt;</span>EventLog<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd--HH"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">withRollingPolicy</span><span class="token punctuation">(</span>OnCheckpointRollingPolicy<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">withOutputFileConfig</span><span class="token punctuation">(</span>OutputFileConfig<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withPartPrefix</span><span class="token punctuation">(</span><span class="token string">"doit_edu"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withPartSuffix</span><span class="token punctuation">(</span><span class="token string">".parquet"</span>	<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 3. 输出数据</span>
streamSource<span class="token punctuation">.</span><span class="token function">sinkTo</span><span class="token punctuation">(</span>bulkSink<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h5 id="2-8-2-KafkaSink"><a href="#2-8-2-KafkaSink" class="headerlink" title="2.8.2 KafkaSink"></a>2.8.2 KafkaSink</h5><p>核心类</p>
<ul>
<li>KafkaStringSerializationSchema – 反序列化</li>
<li>FlinkKafkaProducer – 生产者（即sink）</li>
</ul>
<blockquote>
<p>示例代码：</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 读数据，写入 kafka</span>
DataStreamSource<span class="token operator">&lt;</span>String<span class="token operator">></span> source <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9099</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

KafkaSink<span class="token operator">&lt;</span>String<span class="token operator">></span> kafkaSink <span class="token operator">=</span> KafkaSink<span class="token punctuation">.</span>&lt;String<span class="token operator">></span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">setBootstrapServers</span><span class="token punctuation">(</span><span class="token string">"doit01:9092,doit02:9092,doit03:9092"</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">setRecordSerializer</span><span class="token punctuation">(</span>
    KafkaRecordSerializationSchema<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setTopic</span><span class="token punctuation">(</span><span class="token string">"topic-name"</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setValueSerializationSchema</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleStringSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">setDeliverGuarantee</span><span class="token punctuation">(</span>DeliveryGuarantee<span class="token punctuation">.</span>AT_LEAST_ONCE<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">setTransactionalIdPrefix</span><span class="token punctuation">(</span><span class="token string">"doitedu-"</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

source<span class="token punctuation">.</span><span class="token function">sinkTo</span><span class="token punctuation">(</span>kafkaSink<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<blockquote>
<p>KafkaSink是能结合Flink的Checkpoint机制，来支持端到端精确一次语义的（底层是利用了kafka producer的事务机制）</p>
</blockquote>
<h5 id="2-8-3-JdbcSink"><a href="#2-8-3-JdbcSink" class="headerlink" title="2.8.3 JdbcSink"></a>2.8.3 JdbcSink</h5><blockquote>
<p>JdbcSink也是能支持端到端精确一次语义的</p>
</blockquote>
<blockquote>
<p>示例代码：</p>
</blockquote>
<pre class=" language-java"><code class="language-java">SinkFunction<span class="token operator">&lt;</span>Student<span class="token operator">></span> exactlyOnceSink <span class="token operator">=</span> JdbcSink<span class="token punctuation">.</span><span class="token function">exactlyOnceSink</span><span class="token punctuation">(</span>
    <span class="token string">"insert into flink_stu values (?,?,?,?) on duplicate key 	update name=?,gender=?,score=? "</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span>PreparedStatement preparedStatement<span class="token punctuation">,</span> Student student<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    preparedStatement<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span><span class="token function">getGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    preparedStatement<span class="token punctuation">.</span><span class="token function">setFloat</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> student<span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span><span class="token function">getGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    preparedStatement<span class="token punctuation">.</span><span class="token function">setFloat</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> student<span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
    JdbcExecutionOptions<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">withMaxRetries</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">withBatchSize</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    JdbcExactlyOnceOptions<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true">// mysql 不支持同一个连接上存在并行的多个事务，必须把该参数设置为 true</span>
        <span class="token punctuation">.</span><span class="token function">withTransactionPerConnection</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">SerializableSupplier</span><span class="token operator">&lt;</span>XADataSource<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> XADataSource <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// XADataSource 就是 jdbc 连接，不过它是支持分布式事务的连接</span>
        <span class="token comment" spellcheck="true">// 而且它的构造方法，不同的数据库构造方法不同</span>
        MysqlXADataSource xaDataSource <span class="token operator">=</span> <span class="token keyword">new</span> 			<span class="token class-name">MysqlXADataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        xaDataSource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://doit01:3306/abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        xaDataSource<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        xaDataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"ABC123.abc123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> xaDataSource<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 把构造好的 sink 添加到流中</span>
studentStream<span class="token punctuation">.</span><span class="token function">addSink</span><span class="token punctuation">(</span>exactlyOnceSink<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h5 id="2-8-4-RedisSink"><a href="#2-8-4-RedisSink" class="headerlink" title="2.8.4 RedisSink"></a>2.8.4 RedisSink</h5><p>Redis是一个基于内存、性能极高的NoSQL数据库，数据还可以持久化到磁盘，读写速度快，适合存储key-value类型的数据。Redis不仅仅支持简单的key-value类型的数据，同时还提供list、set、zset、hash等数据结构的存储。Flink实时计算出的结果，需要快速的输出存储起来，要求写入的存储系统的速度要快，这个才不会造成数据积压。Redis就是一个非常不错的选择。</p>
<p>使用实例</p>
<p>首先在maven中导入依赖：flink-connector-redis_2.12</p>
<p>接下来就是定义一个类（或者静态内部类）实现RedisMapper接口，需要指定一个泛型，即写入到Redis的数据的类型，并实现三个方法：</p>
<ul>
<li>getCommandDescription 方法，返回 RedisCommandDescription 实例，在该构造方法中可以指定写入到 Redis 的方法类型为 HSET，和 Redis 的 additionalKey 即 value 为 HASH 类型外面 key 的值的名称；</li>
<li>getKeyFromData 是指定 value 为 HASH 类型对应 key 的值；</li>
<li>geVauleFromData 是指定 value 为 HASH 类型对应 value 的值。</li>
</ul>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">RedisWordCountMapper</span> <span class="token keyword">implements</span> <span class="token class-name">RedisMapper</span><span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">>></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> RedisCommandDescription <span class="token function">getCommandDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//写入 Redis 的方法，value 使用 HASH 类型，并指定外面 key 的值的名称</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RedisCommandDescription</span><span class="token punctuation">(</span>RedisCommand<span class="token punctuation">.</span>HSET<span class="token punctuation">,</span> <span class="token string">"WORD_COUNT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> String <span class="token function">getKeyFromData</span><span class="token punctuation">(</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> data<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> data<span class="token punctuation">.</span>f0<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//指定写入 Redis 的 value 里面 key 的值</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> String <span class="token function">getValueFromData</span><span class="token punctuation">(</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> data<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> data<span class="token punctuation">.</span>f1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//指定写入 value 里面 value 的值</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p>在使用之前，先 new FlinkJedisPoolConfig，设置 Redis 的 ip 地址或主机名、端口号、密码等。然后 new RedisSink 将准备好的 conf 和 RedisWordCountMapper 实例传入到其构造方法中，最后调用 DataStream的 addSink 方法，将 new 好的 RedisSink 作为参数传入。</p>
<pre class=" language-java"><code class="language-java">DataStream<span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">>></span> result <span class="token operator">=</span> wordAndOne<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//设置 Redis 的参数，如地址、端口号等</span>
FlinkJedisPoolConfig conf <span class="token operator">=</span> <span class="token keyword">new</span>
<span class="token class-name">FlinkJedisPoolConfig<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//将数据写入 Redis</span>
result<span class="token punctuation">.</span><span class="token function">addSink</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RedisSink</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>conf<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RedisWordCountMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="3-flink多流操作API"><a href="#3-flink多流操作API" class="headerlink" title="3 flink多流操作API"></a>3 flink多流操作API</h3><h4 id="3-1-split分流-已deprecated"><a href="#3-1-split分流-已deprecated" class="headerlink" title="3.1 split分流 [已deprecated]"></a>3.1 split分流 [已deprecated]</h4><h4 id="3-2-侧流输出"><a href="#3-2-侧流输出" class="headerlink" title="3.2 侧流输出"></a>3.2 侧流输出</h4><p>首先定义侧流标签，比如：maleOutputTag、femaleOutputTag</p>
<blockquote>
<p>侧流输出示例代码：</p>
</blockquote>
<pre class=" language-java"><code class="language-java">SingleOutputStreamOperator<span class="token operator">&lt;</span>Student<span class="token operator">></span> mainStream <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProcessFunction</span><span class="token operator">&lt;</span>Student<span class="token punctuation">,</span> Student<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processElement</span><span class="token punctuation">(</span>Student student<span class="token punctuation">,</span> ProcessFunction<span class="token operator">&lt;</span>Student<span class="token punctuation">,</span> Student<span class="token operator">></span><span class="token punctuation">.</span>Context ctx<span class="token punctuation">,</span>
Collector<span class="token operator">&lt;</span>Student<span class="token operator">></span> collector<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">getGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"m"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 输出到测流“maleOutputTag”</span>
        ctx<span class="token punctuation">.</span><span class="token function">output</span><span class="token punctuation">(</span>maleOutputTag<span class="token punctuation">,</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">getGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"f"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 输出到测流“femaleOutputTag”</span>
        ctx<span class="token punctuation">.</span><span class="token function">output</span><span class="token punctuation">(</span>femaleOutputTag<span class="token punctuation">,</span> student<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 在主流中输出</span>
        collector<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//获取侧流输出结果</span>
SingleOutputStreamOperator<span class="token operator">&lt;</span>Student<span class="token operator">></span> side1 <span class="token operator">=</span> mainStream<span class="token punctuation">.</span><span class="token function">getSideOutput</span><span class="token punctuation">(</span>maleOutputTag<span class="token punctuation">)</span><span class="token punctuation">;</span>
SingleOutputStreamOperator<span class="token operator">&lt;</span>String<span class="token operator">></span> side2 <span class="token operator">=</span> mainStream<span class="token punctuation">.</span><span class="token function">getSideOutput</span><span class="token punctuation">(</span>femaleOutputTag<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>以下 function 函数，支持将特定数据输出到侧流中：</p>
<ul>
<li>ProcessFunction</li>
<li>KeyedProcessFunction</li>
<li>CoProcessFunction</li>
<li>KeyedCoProcessFunction</li>
<li>ProcessWindowFunction</li>
<li>ProcessAllWindowFunction</li>
</ul>
<h4 id="3-3-connect连接操作"><a href="#3-3-connect连接操作" class="headerlink" title="3.3 connect连接操作"></a>3.3 connect连接操作</h4><p>该方法可以将两个任意类型的的DataStream连接成一个新的ConnectedStreams。需要注意的是，connect方法与union方法不同，连接形成的ConnectedStreams里面的两个流依然是相互独立的。<strong>connect方法最大的好处是可以让两个流共享State状态</strong>。</p>
<blockquote>
<p>示例代码：</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//将两个 DataStream 连接到一起</span>
ConnectedStreams<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> connected <span class="token operator">=</span> DataStream1<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>DataStream2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>接下来讲讲对ConnectedStreams的操作方法</p>
<p><strong>coMap</strong>：对 ConnectedStreams 调用map方法时需要传入CoMapFunction </p>
<p>该接口需要指定 3 个泛型：</p>
<ol>
<li>第一个输入 DataStream 的数据类型</li>
<li>第二个输入 DataStream 的数据类型</li>
<li>返回结果的数据类型</li>
</ol>
<p>该接口需要重写两个方法（<strong>这两个方法必须是相同的返回值类型</strong>）：</p>
<ol>
<li>map1 方法，是对第 1 个流进行 map 的处理逻辑</li>
<li>map2 方法，是对 2 个流进行 map 的处理逻辑</li>
</ol>
<blockquote>
<p>示例代码：</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//对 ConnectedStreams 中两个流分别调用个不同逻辑的 map 方法</span>
DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> result <span class="token operator">=</span> wordAndNum<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CoMapFunction</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> String <span class="token function">map1</span><span class="token punctuation">(</span>String value<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//第一个 map 方法是将第一个流的字符变大写</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> String <span class="token function">map2</span><span class="token punctuation">(</span>Integer value<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>value <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//第二个 map 方将是第二个流的数字乘以 10 并转成 String</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p><strong>coFlatMap</strong>：对 ConnectedStreams 调用flatMap方法需要传入CoFlatMapFunction</p>
<p>该接口需要重写两个方法（<strong>这两个方法必须是相同的返回值类型</strong>）：</p>
<ol>
<li>flatMap1 方法，是对第 1 个流进行 flatMap 的处理逻辑</li>
<li>flatMap2 方法，是对 2 个流进行 flatMap 的处理逻辑</li>
</ol>
<blockquote>
<p>示例代码：</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//对 ConnectedStreams 中两个流分别调用个不同逻辑的 flatMap 方法</span>
DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> result <span class="token operator">=</span> connected<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CoFlatMapFunction</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">flatMap1</span><span class="token punctuation">(</span>String value<span class="token punctuation">,</span> Collector<span class="token operator">&lt;</span>String<span class="token operator">></span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        String<span class="token punctuation">[</span><span class="token punctuation">]</span> words <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>String w <span class="token operator">:</span> words<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">flatMap2</span><span class="token punctuation">(</span>String value<span class="token punctuation">,</span> Collector<span class="token operator">&lt;</span>String<span class="token operator">></span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        String<span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>String n <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="3-4-union合并操作"><a href="#3-4-union合并操作" class="headerlink" title="3.4 union合并操作"></a>3.4 union合并操作</h4><p>该方法可以将两个或者多个<strong>数据类型一致</strong>的DataStream合并成一个DataStream。</p>
<blockquote>
<p>示例代码：</p>
</blockquote>
<pre class=" language-Java"><code class="language-Java">//将两个 DataStream 合并到一起
DataStream<Integer> result = odd.union(even);
</code></pre>
<h4 id="3-5-coGroup协同分组"><a href="#3-5-coGroup协同分组" class="headerlink" title="3.5 coGroup协同分组"></a>3.5 coGroup协同分组</h4><p>coGroup本质上是join算子的底层算子，功能类似（略）</p>
<h4 id="3-6-join关联操作"><a href="#3-6-join关联操作" class="headerlink" title="3.6 join关联操作"></a>3.6 join关联操作</h4><p>用于关联两个流（类似于sql中的join），需要指定join条件；<strong>需要在窗口中进行关联后的逻辑计算</strong></p>
<p><strong>join算子的代码结构</strong>：</p>
<pre class=" language-java"><code class="language-java">stream<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>otherStream<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>KeySelector<span class="token operator">></span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">equalTo</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>KeySelector<span class="token operator">></span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">window</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>WindowAssigner<span class="token operator">></span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>JoinFunction<span class="token operator">></span><span class="token punctuation">)</span>
</code></pre>
<p>那我们先介绍一下–不同窗口join的结果示意</p>
<p>tumbling window（滚动窗口）：</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230527183522506.png" alt="image-20230527183522506"><figcaption>image-20230527183522506</figcaption></figure></p>
<p>sliding window（滑动窗口）：</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230527183617257.png" alt="image-20230527183617257"><figcaption>image-20230527183617257</figcaption></figure></p>
<p>session window（会话窗口）：</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230527183705722.png" alt="image-20230527183705722"><figcaption>image-20230527183705722</figcaption></figure></p>
<blockquote>
<p>完整实例代码：</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 对 join 流进行计算处理</span>
DataStream<span class="token operator">&lt;</span>String<span class="token operator">></span> stream <span class="token operator">=</span> joined
    <span class="token comment" spellcheck="true">// where 流 1 的某字段 equalTo 流 2 的某字段</span>
    <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equalTo</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true">// join 实质上只能在窗口中进行	   .window(TumblingProcessingTimeWindows.of(Time.seconds(20)))</span>
    <span class="token comment" spellcheck="true">// 对窗口中满足关联条件的数据进行计算</span>
    <span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JoinFunction</span><span class="token operator">&lt;</span>Student<span class="token punctuation">,</span> StuInfo<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 这边传入的两个流的两条数据，是能够满足关联条件的</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> String <span class="token function">join</span><span class="token punctuation">(</span>Student first<span class="token punctuation">,</span> StuInfo second<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// first: 左流数据 ; second: 右流数据</span>
        <span class="token comment" spellcheck="true">// 计算逻辑</span>
        <span class="token comment" spellcheck="true">// 返回结果</span>
        <span class="token keyword">return</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="3-7-broadcast广播"><a href="#3-7-broadcast广播" class="headerlink" title="3.7 broadcast广播"></a>3.7 broadcast广播</h4><p>在开发过程中，如果遇到需要<strong>下发&#x2F;广播 配置、规则等低吞吐事件流</strong>到下游所有task时，就可以使用Broadcast State特性。下游的task接收这些配置、规则并保存为BroadcastState，将这些配置应用到另一个数据流的计算中。</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230527184539484.png" alt="image-20230527184539484"><figcaption>image-20230527184539484</figcaption></figure></p>
<p>核心要点：</p>
<ul>
<li>将需要广播出去的流，调用broadcast方法进行广播转换，得到广播流BroadCastStream</li>
<li>然后在主流上调用connect算子，来连接广播流（以实现广播状态的共享处理）</li>
<li>在连接流上调用process算子，就会在同一个ProcessFunction中提供两个方法分别对两个流进行处理，并在这个ProcessFunction内实现“广播状态”的共享</li>
</ul>
<blockquote>
<p>实例代码：</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
* 案例背景：
* 流 1： 用户行为事件流（用户ID，时间ID）（持续不断，同一个人也会反复出现，出现次数不定
* 流 2： 用户维度信息（用户ID，年龄，城市），同一个人的数据只会来一次，来的时间也不定 （作为广播流）
*
* 需要加工流 1，把用户的维度信息填充好，利用广播流来实现
*/</span>

<span class="token comment" spellcheck="true">// 将字典数据所在流： s2 ， 转成 广播流</span>
MapStateDescriptor<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">>></span> userInfoStateDesc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MapStateDescriptor</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"userInfoStateDesc"</span><span class="token punctuation">,</span> TypeInformation<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> TypeInformation<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TypeHint</span><span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
BroadcastStream<span class="token operator">&lt;</span>Tuple3<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">,</span> String<span class="token operator">>></span> s2BroadcastStream <span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">broadcast</span><span class="token punctuation">(</span>userInfoStateDesc<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 哪个流处理中需要用到广播状态数据，就要 去 连接 connect 这个广播流</span>
BroadcastConnectedStream<span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">,</span> Tuple3<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">,</span> String<span class="token operator">>></span> connected <span class="token operator">=</span>
s1<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>s2BroadcastStream<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
* 对 连接了广播流之后的 ”连接流“ 进行处理
* 核心思想：
* 在 processBroadcastElement 方法中，把获取到的广播流中的数据，插入到 “广播状态”中
* 在 processElement 方法中，对取到的主流数据进行处理（从广播状态中获取要拼接的数据，拼接后输出）
*/</span>
SingleOutputStreamOperator<span class="token operator">&lt;</span>String<span class="token operator">></span> resultStream <span class="token operator">=</span> connected<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">new</span>
<span class="token class-name">BroadcastProcessFunction</span><span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">,</span> Tuple3<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
* 本方法，是用来处理 主流中的数据（每来一条，调用一次）
* @param element 左流（主流）中的一条数据
* @param ctx 上下文
* @param out 输出器
* @throws Exception
*/</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processElement</span><span class="token punctuation">(</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> element<span class="token punctuation">,</span>
BroadcastProcessFunction<span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">,</span> Tuple3<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">.</span>ReadOnlyContext
ctx<span class="token punctuation">,</span> Collector<span class="token operator">&lt;</span>String<span class="token operator">></span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 通过 ReadOnlyContext ctx 取到的广播状态对象，是一个 “只读 ” 的对象；</span>
    ReadOnlyBroadcastState<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">>></span> 		broadcastState <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getBroadcastState</span><span class="token punctuation">(</span>userInfoStateDesc<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>broadcastState <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> userInfo <span class="token operator">=</span> broadcastState<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>f0<span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>f0 <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> element<span class="token punctuation">.</span>f1 <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> <span class="token punctuation">(</span>userInfo <span class="token operator">==</span> null <span class="token operator">?</span> null <span class="token operator">:</span> userInfo<span class="token punctuation">.</span>f0<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> <span class="token punctuation">(</span>userInfo <span class="token operator">==</span> null <span class="token operator">?</span> null <span class="token operator">:</span> userInfo<span class="token punctuation">.</span>f1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>f0 <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> element<span class="token punctuation">.</span>f1 <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> null <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
*
* @param element 广播流中的一条数据
* @param ctx 上下文
* @param out 输出器
* @throws Exception
*/</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processBroadcastElement</span><span class="token punctuation">(</span>Tuple3<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">,</span> String<span class="token operator">></span> element<span class="token punctuation">,</span>
BroadcastProcessFunction<span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">,</span> Tuple3<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">.</span>Context ctx<span class="token punctuation">,</span>
Collector<span class="token operator">&lt;</span>String<span class="token operator">></span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 从上下文中，获取广播状态对象（可读可写的状态对象）</span>
    BroadcastState<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">>></span> 				broadcastState <span class="token operator">=</span>
ctx<span class="token punctuation">.</span><span class="token function">getBroadcastState</span><span class="token punctuation">(</span>userInfoStateDesc<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 然后将获得的这条 广播流数据， 拆分后，装入广播状态</span>
    broadcastState<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>f0<span class="token punctuation">,</span> Tuple2<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>f1<span class="token punctuation">,</span> element<span class="token punctuation">.</span>f2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

resultStream<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="4-flink编程process-function"><a href="#4-flink编程process-function" class="headerlink" title="4 flink编程process function"></a>4 flink编程process function</h3><h4 id="4-1-process-function概述"><a href="#4-1-process-function概述" class="headerlink" title="4.1 process function概述"></a>4.1 process function概述</h4><p>process function相对于前文所述的map、flatmap、filter算子来说，最大的区别是其让开发人员对数据的处理逻辑拥有更大的自由度；同时，ProcessFunction继承了RichFunction，因而具备了getRuntimeContext()，open()，close()等方法。</p>
<p>在不同类型的 datastream 上，（比如 keyed stream、windowedStream、ConnectedStream 等），应用 process function 时，flink 提供了大量不同类型的 process function，让其针对不同的 datastream 拥有更具针对性的功能；</p>
<pre><code>ProcessFunction （普通 DataStream 上调 process 时）
KeyedProcessFunction （KeyedStream 上调 process 时）
ProcessWindowFunction（WindowedStream 上调 process 时）
ProcessAllWindowFunction（AllWindowedStream 上调 process 时）
CoProcessFuntion （ConnectedStreams 上调 process 时）
ProcessJoinFunction （JoinedStreams 上调 process 时）
BroadcastProcessFunction（BroadCastConnectedStreams 上调 process 时）
KeyedBroadcastProcessFunction（KeyedBroadCastConnectedStreams 上调 process 时）
</code></pre>
<p>下面这幅图将介绍 各种算子运算后所生成的datastream类型，及各种datastream类型之间的转换关系</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230529181039333.png" alt="image-20230529181039333"><figcaption>image-20230529181039333</figcaption></figure></p>
<h3 id="5-并行度相关概念和API"><a href="#5-并行度相关概念和API" class="headerlink" title="5 并行度相关概念和API"></a>5 并行度相关概念和API</h3><h4 id="5-1-基础概念"><a href="#5-1-基础概念" class="headerlink" title="5.1 基础概念"></a>5.1 基础概念</h4><p><strong>flink执行过程：</strong></p>
<ul>
<li>用户通过算子api所开发的代码，会被flink任务提交客户端<strong>解析成JobGraph</strong></li>
<li>然后，JobGraph提交到集群JobManager，转化成ExecutionGraph（并行化后的执行图）</li>
<li>然后，ExecutionGraph中的<strong>各个task会以多并行实例（subTask）部署到TaskManager上执行</strong></li>
<li>subTask运行的位置是TaskManager所提供的<strong>槽位（task slot）</strong>，槽位简单理解就是线程</li>
</ul>
<p>重要提示：</p>
<blockquote>
<p>一个算子的逻辑，可以封装在一个独立的task中（可以有多个运行时实例：subTask）；<br>也可把多个算子的逻辑chain在一起后封装在一个独立的task中（可以有多个运行时实例：subTask）；</p>
</blockquote>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230529182521971.png" alt="image-20230529182521971"><figcaption>image-20230529182521971</figcaption></figure></p>
<blockquote>
<p>同一个task的不同运行实例，必须放在不同的task slot上运行；</p>
<p>同一个task slot，可以运行<strong>多个不同task的<em>各一个</em>并行实例</strong>。</p>
</blockquote>
<h4 id="5-2-task-与-算子链（operator-chain）"><a href="#5-2-task-与-算子链（operator-chain）" class="headerlink" title="5.2 task 与 算子链（operator chain）"></a>5.2 task 与 算子链（operator chain）</h4><p>上下游算子，能否chain在一起，放在一个task中，取决于如下3个条件：</p>
<ul>
<li>上下游算子实例间是OneToOne数据传输</li>
<li>上下游算子并行度相同</li>
<li>上下游算子属于相同的soltSharingGroup（槽位共享组）</li>
</ul>
<p>3个条件都满足，才能合并为一个task；否则不能合并成一个task。</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230529183601721.png" alt="image-20230529183601721"><figcaption>image-20230529183601721</figcaption></figure></p>
<p>当然，即使满足上述3个条件，也不一定就非要把上下游算子绑定成算子链；</p>
<p>flink提供了相关的api，来让用户可以根据自己的需求，进行灵活的算子链合并或拆分：</p>
<ul>
<li>setParallelism	设置算子的并行度</li>
<li>slotSharingGroup	设置算子的槽位共享组</li>
<li>disableChaining	对算子禁用前后链合并</li>
<li>startNewChain	对算子开启新链（即禁用算子前后链合并）</li>
</ul>
<h4 id="5-3-分区partition算子"><a href="#5-3-分区partition算子" class="headerlink" title="5.3 分区partition算子"></a>5.3 分区partition算子</h4><p>分区算子：用于指定上游task的各并行subTask与下游task的subTask之间如何传输数据。</p>
<p>flink中，对于上下游subTask之间的数据传输控制，由ChannelSelector策略来控制，而且flink内针对各种场景，开发了众多ChannelSelector的具体实现</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230529184548886.png" alt="image-20230529184548886"><figcaption>image-20230529184548886</figcaption></figure></p>
<p>设置数据传输策略时，不需要显式指定partitioner，而是调用封装号的算子即可</p>
<pre><code>dataStream.global()--全部发往第1个task
dataStream.broadcast()--广播
dataStream.forward()--上下游并发度一样时一对一发送
dataStream.shuffle()--随机均匀分配
dataStream.rebalance()--Round-Robin（轮流分配）
dataStream.recale()--Local Round（本地轮流分配）
dataStream.partitionCustom()--自定义单播
dataStream.keyBy(KeySelector)--根据key的hashcode来进行hash分发
</code></pre>
<blockquote>
<p>默认情况下，flink 会优先使用 REBALANCE 分发策略</p>
</blockquote>
<h3 id="6-flink时间语义"><a href="#6-flink时间语义" class="headerlink" title="6 flink时间语义"></a>6 flink时间语义</h3><h4 id="6-1-三种时间概念"><a href="#6-1-三种时间概念" class="headerlink" title="6.1 三种时间概念"></a>6.1 三种时间概念</h4><p>flink内部为了直观地统一计算时所用的时间标准，特制定了三种时间概念：</p>
<ul>
<li>processing time	处理时间</li>
<li>event time	事件时间</li>
<li>session time	会话时间</li>
</ul>
<h4 id="6-2-两种时间语义"><a href="#6-2-两种时间语义" class="headerlink" title="6.2 两种时间语义"></a>6.2 两种时间语义</h4><p>时间语义，是flink中用于时间推进和时间判断的机制</p>
<ul>
<li><p>以processing time为依据，则叫做<strong>处理时间语义</strong></p>
<p>指数据被Operator处理时所在机器的系统时间</p>
<p>处理时间遵循客观世界中时间的特性：单调递增，恒定速度，永不停滞，永不回退</p>
</li>
<li><p>以event time为依据，则叫做<strong>事件时间语义</strong></p>
<p>指数据本身的业务时间（如用户行为日志中的用户行为时间戳）</p>
<p>event time语义中，时间的推进完全由流入flink系统的数据来驱动</p>
<p>数据中的业务时间推进到哪，flink就认为自己的时间推进到了哪</p>
<p>它可能停滞，也可能速度不恒定，但也一定是单调递增不可回退！</p>
</li>
</ul>
<p>时间语义的设计意义</p>
<pre class=" language-java"><code class="language-java"><span class="token function">process</span><span class="token punctuation">(</span>EventLog eventlog<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    Long eventTime <span class="token operator">=</span> eventLog<span class="token punctuation">.</span><span class="token function">getTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Long processTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentMillimise</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true">// 用户完全可以自己根据需求中的时间定义来进行相应的计算</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="6-3-时间语义的设置"><a href="#6-3-时间语义的设置" class="headerlink" title="6.3 时间语义的设置"></a>6.3 时间语义的设置</h4><p>flink在需要指定时间语义的相关操作（如时间窗口时），可以通过显式的API来使用特定的时间语义：</p>
<pre class=" language-java"><code class="language-java">keyedStream<span class="token punctuation">.</span><span class="token function">window</span><span class="token punctuation">(</span>SlidingEventTimeWindows<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>Time<span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Time<span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

keyedStream<span class="token punctuation">.</span><span class="token function">window</span><span class="token punctuation">(</span>SlidingProcessingTimeWindows<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>Time<span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Time<span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

keyedStream<span class="token punctuation">.</span><span class="token function">window</span><span class="token punctuation">(</span>TumblingEventTimeWindows<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>Time<span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

keyedStream<span class="token punctuation">.</span><span class="token function">window</span><span class="token punctuation">(</span>TumblingProcessingTimeWindows<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>Time<span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<blockquote>
<p>event time是默认的时间语义</p>
</blockquote>
<p>禁用事件时间语义</p>
<p>如果要禁用event time机制，则可以通过watermark生成频率间隔来实现</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//如果设置为0，则禁用了watermark的生成，从而失去了event time时间语义</span>
ExecutionConfig<span class="token punctuation">.</span><span class="token function">setAutoWatermarkInterval</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="7-事件时间语义中的watermark"><a href="#7-事件时间语义中的watermark" class="headerlink" title="7 事件时间语义中的watermark"></a>7 事件时间语义中的watermark</h3><h4 id="7-1-事件时间推进的困难"><a href="#7-1-事件时间推进的困难" class="headerlink" title="7.1 事件时间推进的困难"></a>7.1 事件时间推进的困难</h4><p>事件时间，并不能像处理时间那样，由宇宙客观规律以恒定速度，不可停滞地推进。从而，在事件时间语义的世界观中，时间的推进不是一件显而易见的事</p>
<ul>
<li><p>场景1</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="/./%E5%85%B3%E4%BA%8E%E5%AE%9E%E6%97%B6%E8%AE%A1%E7%AE%97%E6%A1%86%E6%9E%B6flink%E7%9F%A5%E8%AF%86%E7%9A%84%E5%AD%A6%E4%B9%A0/image-20230607085640053.png" alt="image-20230607085640053"><figcaption>image-20230607085640053</figcaption></figure></p>
<p>数据时间存在乱序的可能性，但时光不能倒流！</p>
</li>
<li><p>场景2</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="/./%E5%85%B3%E4%BA%8E%E5%AE%9E%E6%97%B6%E8%AE%A1%E7%AE%97%E6%A1%86%E6%9E%B6flink%E7%9F%A5%E8%AF%86%E7%9A%84%E5%AD%A6%E4%B9%A0/image-20230607085722997.png" alt="image-20230607085722997"><figcaption>image-20230607085722997</figcaption></figure></p>
<p>下游分区接收上游多个分区的数据，数据时间错落有致，那么以谁为准！</p>
</li>
</ul>
<p>7.2 watermark来推进时间</p>
<p>所谓watermark，就是在事件时间语义世界观中，用于单调递增向前推进时间的一种标记</p>
<p>它的<strong>核心机制</strong>就是在数据流中周期性地插入一种时间戳单调递增的特殊数据元素（watermark），来不可逆转地在整个数据流中进行时间的推进</p>
<p>watermark是从某一个算子实例（源头）开始，根据数据中的事件时间，来周期性地产生，并插入到数据流中，持续不断地往下游传递，以推进整个计算链条上各个算子实例的时间</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//watermark的生成周期（默认值为200ms）</span>
env<span class="token punctuation">.</span><span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAutoWatermarkInterval</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>watermark，本质上也是flink中各算子间流转的一种标记数据，只不过与用户的数据不同，它是flink内部自动产生并插入到数据流的。它本身所携带的信息很简单，就是一个时间戳！</p>
<p>watermark产生源头示意图</p>
<ul>
<li><p>初始状态</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="/./%E5%85%B3%E4%BA%8E%E5%AE%9E%E6%97%B6%E8%AE%A1%E7%AE%97%E6%A1%86%E6%9E%B6flink%E7%9F%A5%E8%AF%86%E7%9A%84%E5%AD%A6%E4%B9%A0/image-20230607092542524.png" alt="image-20230607092542524"><figcaption>image-20230607092542524</figcaption></figure></p>
</li>
<li><p>收到一条数据后</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="/./%E5%85%B3%E4%BA%8E%E5%AE%9E%E6%97%B6%E8%AE%A1%E7%AE%97%E6%A1%86%E6%9E%B6flink%E7%9F%A5%E8%AF%86%E7%9A%84%E5%AD%A6%E4%B9%A0/image-20230607092603948.png" alt="image-20230607092603948"><figcaption>image-20230607092603948</figcaption></figure></p>
<p>简单说，就是在watermark产生的源头算子实例中，实例程序会用一个定时器，去<strong>周期性地检查</strong>截止到此刻收到过的数据的<strong>事件时间最大值</strong>，如果超过了之前的最大值，则将这个最大值更新为最新的watermark，并向下游传递</p>
</li>
</ul>
<p>watermark往下游推进示意图</p>
<ul>
<li><p>初始状态</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="/./%E5%85%B3%E4%BA%8E%E5%AE%9E%E6%97%B6%E8%AE%A1%E7%AE%97%E6%A1%86%E6%9E%B6flink%E7%9F%A5%E8%AF%86%E7%9A%84%E5%AD%A6%E4%B9%A0/image-20230607093210265.png" alt="image-20230607093210265"><figcaption>image-20230607093210265</figcaption></figure></p>
</li>
<li><p>新的上游watermark即将到达</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="/./%E5%85%B3%E4%BA%8E%E5%AE%9E%E6%97%B6%E8%AE%A1%E7%AE%97%E6%A1%86%E6%9E%B6flink%E7%9F%A5%E8%AF%86%E7%9A%84%E5%AD%A6%E4%B9%A0/image-20230607093157112.png" alt="image-20230607093157112"><figcaption>image-20230607093157112</figcaption></figure></p>
</li>
<li><p>上游的新的watermark最终产生的效果</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="/./%E5%85%B3%E4%BA%8E%E5%AE%9E%E6%97%B6%E8%AE%A1%E7%AE%97%E6%A1%86%E6%9E%B6flink%E7%9F%A5%E8%AF%86%E7%9A%84%E5%AD%A6%E4%B9%A0/image-20230607093143538.png" alt="image-20230607093143538"><figcaption>image-20230607093143538</figcaption></figure></p>
<p>一个下游算子实例，如果消费着多个上游算子实例：则选组“Min(上游各实例的最新watermark)”作为自己当前的watermark，并将自己最新的watermark向下游广播</p>
</li>
</ul>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>flink</tag>
      </tags>
  </entry>
  <entry>
    <title>关于数据仓库hive知识的学习(1)</title>
    <url>/2023/042713923.html</url>
    <content><![CDATA[<p>hive在离线数据仓库中十分常用，那么hive是什么呢？有什么用？它是怎么工作的？怎么使用它？下面这篇文章将一一解答你的问题！</p>
<h3 id="第1章-hive入门"><a href="#第1章-hive入门" class="headerlink" title="第1章 hive入门"></a>第1章 hive入门</h3><h4 id="1-1-什么是hive"><a href="#1-1-什么是hive" class="headerlink" title="1.1 什么是hive"></a>1.1 什么是hive</h4><p>hive是基于hadoop的一个数据仓库工具，可以将结构化的数据文件映射为一张表，并提供类SQL查询功能（HQL）。</p>
<p>1)hive处理的数据存储在HDFS<br>2)hive分析数据底层的实现是Mapreduce&#x2F;Spark（分布式运行框架）<br>3)执行程序运行在yarn上</p>
<h4 id="1-2-hive的优缺点"><a href="#1-2-hive的优缺点" class="headerlink" title="1.2 hive的优缺点"></a>1.2 hive的优缺点</h4><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ol>
<li>操作接口采用类SQL语法，提供快速开发的能力（简单、容易上手）</li>
<li>避免了去写Mapreduce，减少开发人员的学习成本</li>
<li>hive的执行<strong>延迟比较高</strong>，因此hive常用于数据分析，对实时性要求不高的场合（历史数据分析等）</li>
<li>hive优势在于处理大数据，对于处理小数据没有优势，因为hive的执行延迟比较高</li>
<li>hive支持用户<strong>自定义函数</strong>，用户可以根据自己的需求来实现自己的函数</li>
</ol>
<h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ol>
<li><p>hive的HQL表达能力有限</p>
<p>（1）迭代式算法无法表达</p>
<p>（2）数据挖掘方面不擅长</p>
</li>
<li><p>hive的效率比较低</p>
<p>（1）hive自动生成的Mapreduce作业，通常情况下不够智能化</p>
<p>（2）hive调优比较困难，粒度较粗（快）</p>
</li>
</ol>
<h4 id="1-3-hive的应用场景"><a href="#1-3-hive的应用场景" class="headerlink" title="1.3 hive的应用场景"></a>1.3 hive的应用场景</h4><p>①hive不适合需要低延迟的应用<br>②hive不是为联机事务处理而设计的，hive不提供实时的查询和基于行级的数据更新操作<br>③hive的最佳使用场合是大数据集的批处理作业，如网络日志分析</p>
<h4 id="1-4-hive架构及工作原理"><a href="#1-4-hive架构及工作原理" class="headerlink" title="1.4 hive架构及工作原理"></a>1.4 hive架构及工作原理</h4><p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/hive%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86.png" alt="image-20230427164622923"><figcaption>image-20230427164622923</figcaption></figure></p>
<ol>
<li><p>用户接口：Client</p>
<p>CLI（hive shell）、JDBC（java访问hive）、WEB UI（浏览器访问hive）</p>
</li>
<li><p>元数据：Metastore</p>
<p>元数据包括：表名、列名、分区、表属性等信息称为hive元数据</p>
<p>默认存储在内嵌的derby数据库中，推荐使用MySQL存储Metastore。为什么呢？<strong>因为derby只能允许一个会话连接，而MySQL支持多用户会话</strong></p>
<p>那为什么不存储在hdfs中呢？<strong>因为hive元数据可能面临不断更新、修改和读取，不适合使用hdfs进行存储</strong></p>
</li>
<li><p>Hadoop</p>
<p>使用hdfs进行存储，使用Mapreduce进行计算</p>
</li>
<li><p>驱动器：Driver</p>
<ul>
<li>解析器(SQLParser): 将HQL字符串转换成抽象语法树AST，这一步一般都用第三方工具库完成，比如antlr；对AST进行 语法 分析，比如表是否存在、字段是否存在、SQL语义是否有误</li>
<li>编译器(Compiler)： 对hql语句进行词法、语法、语义的编译(需要跟元数据关联)，编译完成后会生成一个执行计划。 hive上就是编译成mapreduce的job</li>
<li>优化器(Optimizer)： 将执行计划进行优化，减少不必要的列、使用分区、使用索引等。优化job</li>
<li>执行器(Executer): 将优化后的执行计划提交给hadoop的yarn上执行。提交job</li>
</ul>
</li>
</ol>
<h5 id="hive工作原理"><a href="#hive工作原理" class="headerlink" title="hive工作原理"></a>hive工作原理</h5><p>①由hive驱动模块中的编译器对用户输入的HQL语言进行词法和语法解析，将HQL语句转换成抽象语法树AST<br>②由于抽象语法树的结构仍很复杂，因此，把抽象语法树转化为查询块<br>③把查询块转换为逻辑查询计划，里面包含了许多逻辑操作符<br>④重写逻辑查询计划，进行优化，合并多余操作，减少Mapreduce任务数量<br>⑤将逻辑操作符转换为需要执行的具体的Mapreduce任务<br>⑥对生成的Mapreduce任务进行优化，生成最终的Mapreduce任务执行计划<br>⑦由hive驱动模块中的执行器对最终的Mapreduce任务进行执行输出</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230427170924636.png" alt="image-20230427170924636"><figcaption>image-20230427170924636</figcaption></figure></p>
<h4 id="1-5-hive和传统数据库比较"><a href="#1-5-hive和传统数据库比较" class="headerlink" title="1.5 hive和传统数据库比较"></a>1.5 hive和传统数据库比较</h4><ul>
<li>数据存储格式不同：hive没有专门的数据存储格式，只需要在创建表时指定数据的列分隔符和行分隔符，hive就可以解析数据；传统数据库的数据存储格式由系统预先定义</li>
<li>数据验证不同：hive在数据加载过程中不进行数据验证，而是在数据查询时才进行验证；传统数据库在数据加载时进行验证，因此hive加载数据比传统数据库快</li>
<li>DML操作不同：hive不支持数据更新操作，支持批量数据导入；传统数据库支持各种DML操作，支持数据更新、单条或批量数据导入</li>
<li>延迟性不同：hive操作延迟性高，不适合低延迟操作；传统数据库延迟性低，适合低延迟操作</li>
<li>数据规模不同：hive存储在hdfs中，利用Mapreduce进行并行计算，适合大规模数据操作；传统数据库主要采用本地文件系统存储数据，存在容量上限，在本地运行，数据处理能力有限</li>
</ul>
<h3 id="第2章-hive安装部署"><a href="#第2章-hive安装部署" class="headerlink" title="第2章 hive安装部署"></a>第2章 hive安装部署</h3><p>这里附上一篇链接，我就不进行赘述了</p>
<p>[参考文章]: <a class="link" href="https://blog.csdn.net/W_chuanqi/article/details/130242723">https://blog.csdn.net/W_chuanqi/article/details/130242723 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>	“HIve安装配置（超详细）”</p>
<h3 id="第3章-hive数据类型"><a href="#第3章-hive数据类型" class="headerlink" title="第3章 hive数据类型"></a>第3章 hive数据类型</h3><h4 id="3-1-数据类型概述"><a href="#3-1-数据类型概述" class="headerlink" title="3.1 数据类型概述"></a>3.1 数据类型概述</h4><h5 id="3-1-1-基本数据类型"><a href="#3-1-1-基本数据类型" class="headerlink" title="3.1.1 基本数据类型"></a>3.1.1 基本数据类型</h5><p>TINYINT、SMALLINT、INT、BIGINT、BOOLEAN、FLOAT、DOUBLE、STRING、TIMESTAM-时间类型、BINARY-字节数组</p>
<h5 id="3-1-2-集合数据类型"><a href="#3-1-2-集合数据类型" class="headerlink" title="3.1.2 集合数据类型"></a>3.1.2 集合数据类型</h5><ul>
<li><p>STRUCT</p>
<p>和c语言中的struct类似，都可以通过“点”符号访问元素内容。例如，如果某个列的数据类型是STRUCT{first STRING, last STRING}，那么第1个元素可以通过字段’ .first ‘来引用</p>
</li>
<li><p>MAP</p>
<p>MAP是一组键-值对元组集合，使用数组标识法可以访问数据。例如，如果某个列的数据类型是MAP，其中键-&gt;值对是’ first ‘ -&gt;’ John ‘ 和 ‘ last ‘-&gt;’ Doe ‘，那么可以通过字段名[‘ last ‘]获取最后一个元素</p>
</li>
<li><p>ARRAY</p>
<p>数组是一组具有相同类型和名称的变量的集合。这些变量称为数组的元素，每个数组元素都有一个编号，编号从零开始。例如，数组值为[‘ John ‘,’ Doe ‘]，那么第2个元素可以通过数组名[1]进行引用</p>
</li>
</ul>
<h4 id="3-2-数据类型详解"><a href="#3-2-数据类型详解" class="headerlink" title="3.2 数据类型详解"></a>3.2 数据类型详解</h4><h5 id="3-2-1-数字类型"><a href="#3-2-1-数字类型" class="headerlink" title="3.2.1 数字类型"></a>3.2.1 数字类型</h5><p>TINYINT(1字节整数)<br>SMALLINT (2字节整数)<br>INT&#x2F;INTEGER (4字节整数)<br>BIGINT (8字节整数)<br>FLOAT (4字节浮点数)<br>DOUBLE (8字节双精度浮点数)</p>
<p>示例：<br><strong>create table t_test(a string ,b int,c bigint,d float,e double,f tinyint,g smallint)</strong></p>
<h5 id="3-2-2-时间类型"><a href="#3-2-2-时间类型" class="headerlink" title="3.2.2 时间类型"></a>3.2.2 时间类型</h5><p>TIMESTAMP（时间戳）–包含年月日时分毫秒的一种封装<br>DATE（日期）–只包含年月日<br></p>
<p>示例，假如有以下数据：<br>		1,zhangsan,1985-06-30<br>		2,lisi,1986-07-10<br>		3,wangwu,1985-08-09<br>那么，就可以建立一个表来对数据进行映射<br><strong>create table t_customer(id int, name string, birthday date)<br>row format delimited fields terminated by ‘,’;</strong><br>然后导入数据<br><strong>load data local inpath ‘&#x2F;root&#x2F;customer.dat’ into table t_customer;</strong></p>
<h5 id="3-2-3-字符串类型"><a href="#3-2-3-字符串类型" class="headerlink" title="3.2.3 字符串类型"></a>3.2.3 字符串类型</h5><p>STRING<br>VARCHAR(字符串1-65355长度，超长截断)<br>CHAR (字符串，最大长度255)</p>
<h5 id="3-2-4-其他类型"><a href="#3-2-4-其他类型" class="headerlink" title="3.2.4 其他类型"></a>3.2.4 其他类型</h5><p>BOOLEAN（布尔类型）：true false<br>BINARY (二进制数组)</p>
<h5 id="3-2-5-集合类型"><a href="#3-2-5-集合类型" class="headerlink" title="3.2.5 集合类型"></a>3.2.5 集合类型</h5><h6 id="3-2-5-1-STRUCT举例"><a href="#3-2-5-1-STRUCT举例" class="headerlink" title="3.2.5.1 STRUCT举例"></a>3.2.5.1 STRUCT举例</h6><p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230427182958022.png" alt="image-20230427182958022"><figcaption>image-20230427182958022</figcaption></figure></p>
<h6 id="3-2-5-2-MAP举例"><a href="#3-2-5-2-MAP举例" class="headerlink" title="3.2.5.2 MAP举例"></a>3.2.5.2 MAP举例</h6><p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230427182914489.png" alt="image-20230427182914489"><figcaption>image-20230427182914489</figcaption></figure></p>
<h6 id="3-2-5-3-ARRAY举例"><a href="#3-2-5-3-ARRAY举例" class="headerlink" title="3.2.5.3 ARRAY举例"></a>3.2.5.3 ARRAY举例</h6><p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230427183049077.png" alt="image-20230427183049077"><figcaption>image-20230427183049077</figcaption></figure></p>
<h4 id="3-3-类型转换"><a href="#3-3-类型转换" class="headerlink" title="3.3 类型转换"></a>3.3 类型转换</h4><h5 id="3-3-1-隐式转换"><a href="#3-3-1-隐式转换" class="headerlink" title="3.3.1 隐式转换"></a>3.3.1 隐式转换</h5><p>粗粒度–&gt;细粒度</p>
<h5 id="3-3-2-使用CAST操作"><a href="#3-3-2-使用CAST操作" class="headerlink" title="3.3.2 使用CAST操作"></a>3.3.2 使用CAST操作</h5><p>例如 CAST(‘1’ AS INT)会把字符串’1’转换成整数1；如果强制类型转换失败，如执行 CAST(‘X’ AS INT)，表达式返回空值NULL</p>
<h3 id="第4章-DDL语言"><a href="#第4章-DDL语言" class="headerlink" title="第4章 DDL语言"></a>第4章 DDL语言</h3><h4 id="4-1-创建数据库"><a href="#4-1-创建数据库" class="headerlink" title="4.1 创建数据库"></a>4.1 创建数据库</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> db_hive location <span class="token keyword">on</span> <span class="token string">'在hdfs上的位置'</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="4-2-查询数据库"><a href="#4-2-查询数据库" class="headerlink" title="4.2 查询数据库"></a>4.2 查询数据库</h4><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">//显示数据库</span>
<span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//查询通配符匹配的数据库</span>
<span class="token keyword">show</span> <span class="token keyword">databases</span> <span class="token operator">like</span> <span class="token string">'db_hive*'</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//显示数据库详细信息</span>
<span class="token keyword">desc</span> <span class="token keyword">database</span> <span class="token punctuation">[</span>extend<span class="token punctuation">]</span> db_hive<span class="token punctuation">;</span>
</code></pre>
<h4 id="4-3-修改数据库"><a href="#4-3-修改数据库" class="headerlink" title="4.3 修改数据库"></a>4.3 修改数据库</h4><p>用户可以使用ALTER DATABASE命令为某个数据库的DBPROPERTIES设置键-值对属性值，来描述这个数据库的属性信息，不可以修改数据库元数据信息</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">database</span> db_hive <span class="token keyword">set</span> dbproperties<span class="token punctuation">(</span><span class="token string">'createtime'</span><span class="token operator">=</span><span class="token string">'20170830'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="4-4-删除数据库"><a href="#4-4-删除数据库" class="headerlink" title="4.4 删除数据库"></a>4.4 删除数据库</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">databases</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> db_hive<span class="token punctuation">;</span> 

<span class="token comment" spellcheck="true">//如果数据库不为空，可以采用cascade命令，级联删除</span>
<span class="token keyword">drop</span> <span class="token keyword">database</span> db_hive <span class="token keyword">cascade</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="4-5-创建表"><a href="#4-5-创建表" class="headerlink" title="4.5 创建表"></a>4.5 创建表</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token punctuation">[</span>EXTERNAL<span class="token punctuation">]</span> <span class="token keyword">TABLE</span> <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span> table_name 	<span class="token comment" spellcheck="true">//①EXTERNAL关键字可以让用户创建一个外部表，在建表的同时指定一个指向实际数据的路径（LOCATION），Hive创建内部表时，会将数据移动到数据仓库指向的路径；若创建外部表，仅记录数据所在的路径，不对数据的位置做任何改变。在删除表的时候，内部表的元数据和数据会被一起删除，而外部表只删除元数据，不删除数据。</span>
<span class="token punctuation">[</span><span class="token punctuation">(</span>col_name data_type <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> col_comment<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">]</span> 
<span class="token punctuation">[</span><span class="token keyword">COMMENT</span> table_comment<span class="token punctuation">]</span> 	<span class="token comment" spellcheck="true">//COMMENT：为表和列添加注释。</span>

<span class="token punctuation">[</span>PARTITIONED <span class="token keyword">BY</span> <span class="token punctuation">(</span>col_name data_type <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> col_comment<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">]</span>	<span class="token comment" spellcheck="true">//PARTITIONED BY创建分区表</span>
<span class="token punctuation">[</span><span class="token keyword">CLUSTERED</span> <span class="token keyword">BY</span> <span class="token punctuation">(</span>col_name<span class="token punctuation">,</span> col_name<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">]</span>	<span class="token comment" spellcheck="true">//CLUSTERED BY创建分桶表</span>
<span class="token punctuation">[</span>SORTED <span class="token keyword">BY</span> <span class="token punctuation">(</span>col_name <span class="token punctuation">[</span><span class="token keyword">ASC</span><span class="token operator">|</span><span class="token keyword">DESC</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">INTO</span> num_buckets BUCKETS<span class="token punctuation">]</span> 	<span class="token comment" spellcheck="true">//SORTED BY不常用</span>

<span class="token punctuation">[</span><span class="token keyword">ROW</span> FORMAT row_format<span class="token punctuation">]</span>   <span class="token keyword">row</span> format delimited <span class="token keyword">fields</span> <span class="token keyword">terminated by</span> “分隔符”
<span class="token punctuation">[</span>STORED <span class="token keyword">AS</span> file_format<span class="token punctuation">]</span>	<span class="token comment" spellcheck="true">//STORED AS指定存储文件类型。常用的存储文件类型：SEQUENCEFILE（hadoop_kv序列文件）、TEXTFILE（文本）、RCFILE（列式存储格式文件）、PARQUETFILE(列式存储文件）。如果文件数据是纯文本，可以使用STORED AS TEXTFILE。如果数据需要压缩，使用 STORED AS SEQUENCEFILE。</span>
<span class="token punctuation">[</span>LOCATION hdfs_path<span class="token punctuation">]</span>	<span class="token comment" spellcheck="true">//LOCATION ：指定表在HDFS上的存储位置。</span>
<span class="token punctuation">[</span><span class="token operator">LIKE</span><span class="token punctuation">]</span>	<span class="token comment" spellcheck="true">//LIKE允许用户复制现有的表结构，但是不复制数据.</span>
</code></pre>
<h5 id="4-5-1-内部表（也称“管理表”）"><a href="#4-5-1-内部表（也称“管理表”）" class="headerlink" title="4.5.1 内部表（也称“管理表”）"></a>4.5.1 内部表（也称“管理表”）</h5><p>在上面代码块中的第①个解释中已说明</p>
<h5 id="4-5-2-外部表"><a href="#4-5-2-外部表" class="headerlink" title="4.5.2 外部表"></a>4.5.2 外部表</h5><p>同上</p>
<h5 id="4-5-3-内部表与外部表的互相转换"><a href="#4-5-3-内部表与外部表的互相转换" class="headerlink" title="4.5.3 内部表与外部表的互相转换"></a>4.5.3 内部表与外部表的互相转换</h5><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">//查询student1、student2表的类型</span>
<span class="token keyword">desc</span> formatted student1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--内部表</span>
<span class="token keyword">desc</span> formatted student2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--外部表</span>
<span class="token comment" spellcheck="true">//修改内部表student1为外部表</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">set</span> tblproperties<span class="token punctuation">(</span><span class="token string">'EXTERNAL'</span><span class="token operator">=</span><span class="token string">'TRUE'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//修改外部表student2为内部表</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> student2 <span class="token keyword">set</span> tblproperties<span class="token punctuation">(</span><span class="token string">'EXTERNAL'</span><span class="token operator">=</span><span class="token string">'FALSE'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

注意：<span class="token punctuation">(</span><span class="token string">'EXTERNAL'</span><span class="token operator">=</span><span class="token string">'TRUE'</span><span class="token punctuation">)</span>和<span class="token punctuation">(</span><span class="token string">'EXTERNAL'</span><span class="token operator">=</span><span class="token string">'FALSE'</span><span class="token punctuation">)</span>为固定写法，区分大小写！
</code></pre>
<h4 id="4-6-分区表"><a href="#4-6-分区表" class="headerlink" title="4.6 分区表"></a>4.6 分区表</h4><p>hive中的分区就是分目录</p>
<h5 id="4-6-1-静态分区"><a href="#4-6-1-静态分区" class="headerlink" title="4.6.1 静态分区"></a>4.6.1 静态分区</h5><p>创建静态分区表语法</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> 表名 <span class="token keyword">partition</span><span class="token punctuation">(</span>字段名 字段类型<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> partitioned <span class="token keyword">by</span><span class="token punctuation">(</span>分区字段名 分区字段类型<span class="token punctuation">)</span>
<span class="token keyword">row</span> format delimited <span class="token keyword">fields</span> <span class="token keyword">terminated by</span> <span class="token string">'\t'</span><span class="token punctuation">;</span>
</code></pre>
<p>加载数据到分区表中</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">load</span> <span class="token keyword">data</span> <span class="token keyword">local</span> inpath <span class="token string">'本地文件路径'</span> <span class="token keyword">into</span> <span class="token keyword">table</span> 数据库名<span class="token punctuation">.</span>表名 <span class="token keyword">partition</span><span class="token punctuation">(</span>分区字段名<span class="token operator">=</span><span class="token string">'分区字段值'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>增加分区</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">add</span> <span class="token keyword">partition</span><span class="token punctuation">(</span>分区字段名<span class="token operator">=</span><span class="token string">'分区字段值1'</span><span class="token punctuation">)</span> <span class="token keyword">partition</span><span class="token punctuation">(</span>分区字段名<span class="token operator">=</span><span class="token string">'分区字段值2'</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
</code></pre>
<p>删除分区</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">drop</span> <span class="token keyword">partition</span><span class="token punctuation">(</span>分区字段名<span class="token operator">=</span><span class="token string">'分区字段值1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">partition</span><span class="token punctuation">(</span>分区字段名<span class="token operator">=</span><span class="token string">'分区字段值2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
</code></pre>
<p>查看分区表分区</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> partitions 表名<span class="token punctuation">;</span>
</code></pre>
<p>多级分区：partitioned by 多个分区字段</p>
<p>把数据导入分区的三种方式：<br>(1)方式1：上传数据后修复<br>(2)方式2：上传数据后添加分区<br>(3)方式3：创建文件夹后load数据到分区</p>
<h5 id="4-6-2-动态分区"><a href="#4-6-2-动态分区" class="headerlink" title="4.6.2 动态分区"></a>4.6.2 动态分区</h5><p>按照某个字段的不同值自动将数据加载到不同分区中</p>
<p>创建动态分区表</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> 表名<span class="token punctuation">(</span>字段名 字段类型<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> partitioned <span class="token keyword">by</span><span class="token punctuation">(</span>分区字段名 分区字段类型<span class="token punctuation">)</span>
<span class="token keyword">row</span> format delimited <span class="token keyword">fields</span> <span class="token keyword">terminated by</span> <span class="token string">'\t'</span><span class="token punctuation">;</span>
</code></pre>
<p>设置开启动态分区参数</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>dynamic<span class="token punctuation">.</span><span class="token keyword">partition</span><span class="token operator">=</span><span class="token boolean">true</span> <span class="token comment" spellcheck="true">//使用动态分区</span>
<span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>dynamic<span class="token punctuation">.</span><span class="token keyword">partition</span><span class="token punctuation">.</span>mode<span class="token operator">=</span>nonstrick<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//无限制模式，如果模式是strict，则必须有一个静态分区且放在最前面</span>
<span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>max<span class="token punctuation">.</span>dynamic<span class="token punctuation">.</span>partitions<span class="token punctuation">.</span>pernode<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//每个节点生成动态分区的最大个数</span>
<span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>max<span class="token punctuation">.</span>dynamic<span class="token punctuation">.</span>partitions<span class="token operator">=</span><span class="token number">100000</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//生成动态分区的最大个数</span>
<span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>max<span class="token punctuation">.</span>created<span class="token punctuation">.</span>files<span class="token operator">=</span><span class="token number">150000</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//一个任务最多可以创建的文件数目</span>
<span class="token keyword">set</span> dfs<span class="token punctuation">.</span>datanode<span class="token punctuation">.</span>max<span class="token punctuation">.</span>xcievers<span class="token operator">=</span><span class="token number">8192</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//限定一次最多打开的文件数</span>
<span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">merge</span><span class="token punctuation">.</span>mapfiles<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// map端的结果进行合并</span>
<span class="token keyword">set</span> mapreduce<span class="token punctuation">.</span>reduce<span class="token punctuation">.</span>tasks <span class="token operator">=</span><span class="token number">20000</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//设置reduce task个数  增加reduce阶段的并行度</span>
</code></pre>
<p>加载数据</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span>  <span class="token keyword">table</span> demo2 <span class="token keyword">partition</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">--此处的分区变量x应该跟demo2中的分区变量名一致</span>
<span class="token keyword">select</span> id<span class="token punctuation">,</span> cost<span class="token punctuation">,</span> birthday <span class="token keyword">from</span> demo<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--select中的最后一个表达式birthday，会作为分区变量x的动态值，注意顺序</span>
</code></pre>
<p>4.8 SerDe组件</p>
<p>SerDe是Serialize&#x2F;Deserilize的简称，目的是用于序列化和反序列化。<br>用户在建表时可以用自定义的SerDe或使用Hive自带的SerDe，SerDe能为表切分、解析列，且对列指定相应的数据。</p>
<p>创建表</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">(</span>字段名 字段类型<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
<span class="token keyword">row</span> format serde <span class="token string">'org.apache.hadoop.hive.serde2.RegexSerDe'</span> 
<span class="token keyword">with</span> serdeproperties <span class="token punctuation">(</span><span class="token string">"input.regex"</span> <span class="token operator">=</span> <span class="token string">"id=(.*),name=(.*)"</span><span class="token punctuation">)</span> 
stored <span class="token keyword">as</span> textfile<span class="token punctuation">;</span>
</code></pre>
<h3 id="第5章-数据导入导出操作"><a href="#第5章-数据导入导出操作" class="headerlink" title="第5章 数据导入导出操作"></a>第5章 数据导入导出操作</h3><h4 id="5-1-数据导入"><a href="#5-1-数据导入" class="headerlink" title="5.1 数据导入"></a>5.1 数据导入</h4><h5 id="5-1-1-使用load向表中装载数据"><a href="#5-1-1-使用load向表中装载数据" class="headerlink" title="5.1.1 使用load向表中装载数据"></a>5.1.1 使用load向表中装载数据</h5><pre class=" language-SQL"><code class="language-SQL">load data [local] inpath '/opt/module/datas/student.txt' [overwrite] into table student [partition (partcol1=val1,…)];
</code></pre>
<ol>
<li>load data：表示加载数据</li>
<li>local：表示从本地加载数据到hive表；否则从HDFS加载数据到hive表</li>
<li>inpath：表示加载数据的路径</li>
<li>overwrite：表示覆盖表中已有数据，否则表示追加</li>
<li>into table：表示加载到哪张表</li>
<li>student：表示具体的表</li>
<li>partition：表示上传到指定分区</li>
</ol>
<h5 id="5-1-2-使用insert…values向表中插入数据"><a href="#5-1-2-使用insert…values向表中插入数据" class="headerlink" title="5.1.2 使用insert…values向表中插入数据"></a>5.1.2 使用insert…values向表中插入数据</h5><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">table</span>  student1 <span class="token keyword">partition</span><span class="token punctuation">(</span>month<span class="token operator">=</span><span class="token string">'201709'</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'wangwu'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h5 id="5-1-3-使用insert…select向表中插入数据"><a href="#5-1-3-使用insert…select向表中插入数据" class="headerlink" title="5.1.3 使用insert…select向表中插入数据"></a>5.1.3 使用insert…select向表中插入数据</h5><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> overwrite <span class="token keyword">table</span> student2 <span class="token keyword">partition</span><span class="token punctuation">(</span>month<span class="token operator">=</span><span class="token string">'201708'</span><span class="token punctuation">)</span> <span class="token keyword">select</span> id<span class="token punctuation">,</span> name <span class="token keyword">from</span> student1 <span class="token keyword">where</span> month<span class="token operator">=</span><span class="token string">'201709'</span><span class="token punctuation">;</span>
</code></pre>
<h5 id="5-1-4-用create-as创建表并加载数据"><a href="#5-1-4-用create-as创建表并加载数据" class="headerlink" title="5.1.4 用create as创建表并加载数据"></a>5.1.4 用create as创建表并加载数据</h5><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> student3
<span class="token keyword">as</span> 
<span class="token keyword">select</span> id<span class="token punctuation">,</span> name <span class="token keyword">from</span> student<span class="token punctuation">;</span>
</code></pre>
<h5 id="5-1-5-创建表时通过指定location加载数据路径"><a href="#5-1-5-创建表时通过指定location加载数据路径" class="headerlink" title="5.1.5 创建表时通过指定location加载数据路径"></a>5.1.5 创建表时通过指定location加载数据路径</h5><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> student4<span class="token punctuation">(</span>id <span class="token keyword">int</span><span class="token punctuation">,</span> name string<span class="token punctuation">)</span> <span class="token keyword">row</span> format delimited <span class="token keyword">fields</span> <span class="token keyword">terminated by</span> <span class="token string">'\t'</span> location <span class="token string">'/user/hive/warehouse/student4'</span><span class="token punctuation">;</span>
</code></pre>
<h5 id="5-1-6-import数据到指定Hive表中"><a href="#5-1-6-import数据到指定Hive表中" class="headerlink" title="5.1.6 import数据到指定Hive表中"></a>5.1.6 import数据到指定Hive表中</h5><pre class=" language-sql"><code class="language-sql"><span class="token keyword">import</span> <span class="token keyword">table</span> student2 <span class="token keyword">partition</span><span class="token punctuation">(</span>month<span class="token operator">=</span><span class="token string">'201709'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> <span class="token string">'/user/hive/warehouse/export/student'</span><span class="token punctuation">;</span>
</code></pre>
<blockquote>
<p>注意：先用export导出后，再将数据导入</p>
</blockquote>
<h4 id="5-2-数据导出"><a href="#5-2-数据导出" class="headerlink" title="5.2 数据导出"></a>5.2 数据导出</h4><h5 id="5-2-1-insert导出"><a href="#5-2-1-insert导出" class="headerlink" title="5.2.1 insert导出"></a>5.2.1 insert导出</h5><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> overwrite <span class="token punctuation">[</span><span class="token keyword">local</span><span class="token punctuation">]</span> directory <span class="token string">'/opt/module/datas/export/student1'</span>
<span class="token keyword">ROW</span> FORMAT DELIMITED <span class="token keyword">FIELDS</span> <span class="token keyword">TERMINATED BY</span> <span class="token string">'\t'</span>             
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span>
</code></pre>
<h5 id="5-2-2-export导出到HDFS上"><a href="#5-2-2-export导出到HDFS上" class="headerlink" title="5.2.2 export导出到HDFS上"></a>5.2.2 export导出到HDFS上</h5><pre class=" language-sql"><code class="language-sql">export <span class="token keyword">table</span> <span class="token keyword">default</span><span class="token punctuation">.</span>student <span class="token keyword">to</span> <span class="token string">'/user/hive/warehouse/export/student'</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="5-3-清除表中数据（Truncate）"><a href="#5-3-清除表中数据（Truncate）" class="headerlink" title="5.3 清除表中数据（Truncate）"></a>5.3 清除表中数据（Truncate）</h4><pre class=" language-sql"><code class="language-sql"> <span class="token keyword">truncate</span> <span class="token keyword">table</span> student<span class="token punctuation">;</span>
</code></pre>
<blockquote>
<p>注意：Truncate只能删除管理表（内部表），不能删除外部表中数据</p>
</blockquote>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hive</tag>
      </tags>
  </entry>
  <entry>
    <title>关于数据仓库hive知识的学习(2)</title>
    <url>/2023/05142227.html</url>
    <content><![CDATA[<h3 id="第6章-SQL快速掌握"><a href="#第6章-SQL快速掌握" class="headerlink" title="第6章 SQL快速掌握"></a>第6章 SQL快速掌握</h3><h4 id="6-1-sql的运算模型-–-逐行运算模型"><a href="#6-1-sql的运算模型-–-逐行运算模型" class="headerlink" title="6.1 sql的运算模型 – 逐行运算模型"></a>6.1 sql的运算模型 – 逐行运算模型</h4><p>逐行运算：select后的运算表达式，是对每一行独立运算</p>
<p>表：一个数据的集合（集合中每一行就是一条数据：记录）</p>
<pre><code>select：
    对一条数据的运算逻辑
    -- 常量 :&quot;ok&quot; ,10 ,8.9
    -- 变量 : id , name ,  age,
    -- 运算符表达式：  age+10,  id+8 , id&gt;8  , id&gt;2 and id&lt;9
    -- 函数表达式：  upper(name) , greatest(s1,s2,s3) 
    -- 复合表达式：  greatest(s1,s2,s3)&gt;2 , greatest(s1,s2,s3)+10 , lower(substr(upper(name),0,3))
</code></pre>
<pre><code>from ：选择一个运算的数据集	 
</code></pre>
<pre><code>join：准备数据集（它可以将多个数据集拼成一个数据集，拼的时候可以带条件）
join的拼接有多种方式：
t1 join t2  --&gt; 笛卡尔积,结果的总行数的t1的行数*t2的行数；
t1 join t2 on t1.id=t2.id  --&gt;内连接，满足拼接条件的才拼接..
t1 left join t2 on t1.id=t2.id --&gt; 左（外）连接 left outer join ;左表所有行都保留，连接不上的右表字段为null
t1 right join t2 on t1.id=t2.id --&gt;右（外）连接 right outer join;右表的所有行都保留，连接不上的左表字段为null
t1 full join t2  on t1.id=t2.id --&gt;全（外）连接 full outer join;左、右表的行都保留，拼不上的字段为null
-- hive不支持不等值join
-- hive中有一种特别的join
    left semi join  --&gt;左半连接，是sql中in子句的一个变种实现！
    hive1.x中不支持in，现在的新版本hive支持in子句
</code></pre>
<pre><code>where：逐行过滤将要运算的数据集,where执行在select之前
   -- where id&gt;2
   -- where (id+10)&gt;2
   -- where upper(name) = &#39;ZHANGSAN&#39;
   -- where id in (select id from t_x)
</code></pre>
<pre><code>group by：
函数：类似java代码中的方法，接收变量，返回结果，也就是一个表达式
having：
紧跟group by之后，是对分组后的数据进行按组过滤，将不满足条件表达式的组去除；
</code></pre>
<h4 id="6-2-sql运算模型–分组聚合运算"><a href="#6-2-sql运算模型–分组聚合运算" class="headerlink" title="6.2 sql运算模型–分组聚合运算"></a>6.2 sql运算模型–分组聚合运算</h4><p>– 分组运算模型中，select后面的表达式只能有如下情形：</p>
<ol>
<li>常量</li>
<li>分组key</li>
<li>聚合函数</li>
</ol>
<p><strong>select语句中非分组函数的字段必须声明在GORUP BY中	反之，GROUP BY中声明的字段可以不出现在select语句中</strong></p>
<p><strong>分组key可以有多个，分组key越多，分出来的组也会越多</strong></p>
<blockquote>
<p><em><strong>分组聚合还可以采用 partition by</strong></em></p>
</blockquote>
<h4 id="6-3-sql运算模型–开窗运算（窗口分析运算模型）"><a href="#6-3-sql运算模型–开窗运算（窗口分析运算模型）" class="headerlink" title="6.3 sql运算模型–开窗运算（窗口分析运算模型）"></a>6.3 sql运算模型–开窗运算（窗口分析运算模型）</h4><p>– 可以用窗口分析函数：row_number() over() 来实现</p>
<p>row_number() over(partition by sex order by salary desc) as rn</p>
<h3 id="第7章-HQL查询语法详解"><a href="#第7章-HQL查询语法详解" class="headerlink" title="第7章 HQL查询语法详解"></a>第7章 HQL查询语法详解</h3><pre class=" language-sql"><code class="language-sql"><span class="token punctuation">[</span><span class="token keyword">WITH</span> CommonTableExpression <span class="token punctuation">(</span><span class="token punctuation">,</span> CommonTableExpression<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">]</span>    <span class="token punctuation">(</span>Note: Only available
 starting <span class="token keyword">with</span> Hive <span class="token number">0.13</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">SELECT</span> <span class="token punctuation">[</span><span class="token keyword">ALL</span> <span class="token operator">|</span> <span class="token keyword">DISTINCT</span><span class="token punctuation">]</span> select_expr<span class="token punctuation">,</span> select_expr<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">FROM</span> table_reference
  <span class="token punctuation">[</span><span class="token keyword">WHERE</span> where_condition<span class="token punctuation">]</span>
  <span class="token punctuation">[</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> col_list<span class="token punctuation">]</span>
  <span class="token punctuation">[</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> col_list<span class="token punctuation">]</span>
  <span class="token punctuation">[</span>CLUSTER <span class="token keyword">BY</span> col_list
    <span class="token operator">|</span> <span class="token punctuation">[</span>DISTRIBUTE <span class="token keyword">BY</span> col_list<span class="token punctuation">]</span> <span class="token punctuation">[</span>SORT <span class="token keyword">BY</span> col_list<span class="token punctuation">]</span>
  <span class="token punctuation">]</span>
</code></pre>
<h4 id="7-1-with…as…临时表语法"><a href="#7-1-with…as…临时表语法" class="headerlink" title="7.1 with…as…临时表语法"></a>7.1 with…as…临时表语法</h4><blockquote>
<p>示例：</p>
</blockquote>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">with</span> o <span class="token keyword">as</span> <span class="token punctuation">(</span>
<span class="token keyword">select</span>
id<span class="token punctuation">,</span>m<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>sale<span class="token punctuation">)</span> <span class="token keyword">as</span> amt
<span class="token keyword">from</span> t_sale
<span class="token keyword">group</span> <span class="token keyword">by</span> id<span class="token punctuation">,</span>m
<span class="token punctuation">)</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> o <span class="token keyword">where</span> o<span class="token punctuation">.</span>amt<span class="token operator">></span><span class="token number">80</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="7-2-排序"><a href="#7-2-排序" class="headerlink" title="7.2 排序"></a>7.2 排序</h4><h5 id="7-2-1-全局排序（Order-By）"><a href="#7-2-1-全局排序（Order-By）" class="headerlink" title="7.2.1 全局排序（Order By）"></a>7.2.1 全局排序（Order By）</h5><p>全局排序，强制只有一个reduce</p>
<h5 id="7-2-2-Sort-By"><a href="#7-2-2-Sort-By" class="headerlink" title="7.2.2 Sort By"></a>7.2.2 Sort By</h5><p>每个task内部进行排序，对全局结果集来说不是排序</p>
<p>要设置reduce个数：set mapreduce.job.reduces&#x3D;3;</p>
<p>当设置的reduce为1时，结果与Order By一样</p>
<h5 id="7-2-3-分桶排序1（Distribute-By-Sort-By）"><a href="#7-2-3-分桶排序1（Distribute-By-Sort-By）" class="headerlink" title="7.2.3 分桶排序1（Distribute By + Sort By）"></a>7.2.3 分桶排序1（Distribute By + Sort By）</h5><p>Distribute By：类似MR中partition，进行分区，可以结合sort by使用。<br>注意，Hive要求DISTRIBUTE BY语句要写在SORT BY语句之前。<br>对于distribute by进行测试，一定要分配多reduce进行处理，否则无法看到distribute by的效果。</p>
<p>示例：先按照部门编号分区，再按照员工编号降序排序</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> mapreduce<span class="token punctuation">.</span>job<span class="token punctuation">.</span>reduces<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp distribute <span class="token keyword">by</span> 部门编号 sort <span class="token keyword">by</span> 员工编号 <span class="token keyword">desc</span><span class="token punctuation">;</span>
</code></pre>
<h5 id="7-2-4-分桶排序2（Cluster-By）"><a href="#7-2-4-分桶排序2（Cluster-By）" class="headerlink" title="7.2.4 分桶排序2（Cluster By）"></a>7.2.4 分桶排序2（Cluster By）</h5><p>当distribute by和sorts by字段相同时，可以使用cluster by代替</p>
<p>cluster by除了具有distribute by的功能外还兼具sort by的功能。但是排序只能是升序排序，不能指定排序规则为ASC或者DESC。</p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hive</tag>
      </tags>
  </entry>
  <entry>
    <title>关于日志采集系统Flume知识的学习</title>
    <url>/2023/050462077.html</url>
    <content><![CDATA[<h3 id="第1章-Flume概述"><a href="#第1章-Flume概述" class="headerlink" title="第1章 Flume概述"></a>第1章 Flume概述</h3><h4 id="1-1-Flume定义"><a href="#1-1-Flume定义" class="headerlink" title="1.1 Flume定义"></a>1.1 Flume定义</h4><p>Flume是一个<strong>高可用，高可靠的，分布式的海量日志采集、聚合和传输的系统</strong><br>Flume基于流式架构，灵活简单<br>Flume最主要的作用就是，<strong>实时读取服务器本地磁盘的数据，将数据写入到HDFS</strong></p>
<h4 id="1-2-Flume基础架构"><a href="#1-2-Flume基础架构" class="headerlink" title="1.2 Flume基础架构"></a>1.2 Flume基础架构</h4><p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230504100830651.png" alt="image-20230504100830651"><figcaption>image-20230504100830651</figcaption></figure></p>
<h5 id="1-2-1-Agent"><a href="#1-2-1-Agent" class="headerlink" title="1.2.1 Agent"></a>1.2.1 Agent</h5><p>Agent是一个JVM进程，它以事件的形式将数据从源头送至目的地<br>Agent主要有3个部分组成，Source、Channel、Sink</p>
<h5 id="1-2-2-Source"><a href="#1-2-2-Source" class="headerlink" title="1.2.2 Source"></a>1.2.2 Source</h5><p>Source是负责接收数据到Flume Agent组件。Source组件可以处理各种类型、各种格式的日志数据</p>
<h5 id="1-2-3-Sink"><a href="#1-2-3-Sink" class="headerlink" title="1.2.3 Sink"></a>1.2.3 Sink</h5><p>Sink不断轮询Channel中的事件且批量移除它们，并将这些事件批量写入到存储或索引系统、或者被发送到另外一个Flume Agent</p>
<h5 id="1-2-4-Channel"><a href="#1-2-4-Channel" class="headerlink" title="1.2.4 Channel"></a>1.2.4 Channel</h5><p>Channel是位于Source和Sink之间的缓冲区。因此，Channel允许Source和Sink运作在不同的速率上。Channel是线程安全的，可以同时处理几个Source的写入操作和几个Sink的读取操作<br>Flume自带两种Channel：Memory Channel 和 File Channel<br>Memory Channel是内存中的队列。Memory Channel在不需要关心数据丢失的情景下适用。如果需要关心数据丢失，那么Memory Channel就不应该使用，因为程序死亡、机器宕机或者重启都会导致数据丢失<br>File Channel将所有事件写入磁盘。因此在程序关闭或机器宕机的情况下不会丢失数据</p>
<h5 id="1-2-5-Event"><a href="#1-2-5-Event" class="headerlink" title="1.2.5 Event"></a>1.2.5 Event</h5><p>传输单元，Flume数据传输的基本单元，以Event的形式将数据从源头送至目的地。Event由Header和Body两部分组成，Header用来存放该Event的一些属性，为K-V结构，Body用来存放该条数据，形式为字节数组</p>
<h3 id="第2章-Flume入门"><a href="#第2章-Flume入门" class="headerlink" title="第2章 Flume入门"></a>第2章 Flume入门</h3><h4 id="2-1-Flume入门案例–监控端口数据"><a href="#2-1-Flume入门案例–监控端口数据" class="headerlink" title="2.1 Flume入门案例–监控端口数据"></a>2.1 Flume入门案例–监控端口数据</h4><p>使用Flume监听一个端口，收集该端口的数据，并打印到控制台</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230504111054631.png" alt="image-20230504111054631"><figcaption>image-20230504111054631</figcaption></figure></p>
<p>实现步骤：</p>
<ol>
<li><p>在 flume 目录下创建 job 文件夹并进入 job 文件夹</p>
</li>
<li><p>在 job 文件夹下创建 Flume Agent 配置文件 flume-netcat-logger.conf</p>
</li>
<li><p>在 flume-netcat-logger.conf 文件中添加如下内容</p>
<pre><code># Name the components on this agent		a1：表示agent的名称
a1.sources = r1		r1：表示a1的source的名称
a1.sinks = k1		k1：表示a1的sink名称
a1.channels = c1	c1：表示a1的channel名称

# Describe/configure the source
a1.sources.r1.type = netcat		表示a1是输入源类型为netcat端口类型
a1.sources.r1.bind = localhost	表示a1的监听的主机
a1.sources.r1.port = 44444		表示a1的监听的端口号

# Describe the sink
a1.sinks.k1.type = logger	表示a1的输出目的地是控制台logger类型

# Use a channel which buffers events in memory	
a1.channels.c1.type = memory	表示a1的channel类型是memory内存型
a1.channels.c1.capacity = 1000	表示a1的channel总容量是1000个event
a1.channels.c1.transactionCapacity = 100	表示a1的channel传输时收集到了100条event以后再去提交事务

# Bind the source and sink to the channel
a1.sources.r1.channels = c1	表示r1和c1连接起来
a1.sinks.k1.channel = c1	表示k1和c1连接起来
</code></pre>
</li>
<li><p>开启Flume监听端口<br>第1种写法：bin&#x2F;flume-ng agent –conf conf&#x2F; –name a1 –conf-file job&#x2F;flume-netcat-logger.conf -<br>Dflume.root.logger&#x3D;INFO,console<br>第2种写法：bin&#x2F;flume-ng agent -c conf&#x2F; -n a1 -f job&#x2F;flume-netcat-logger.conf -Dflume.root.logger&#x3D;INFO,console<br>参数说明：</p>
<ul>
<li>–conf&#x2F;-c：表示配置文件存储在 conf&#x2F;目录</li>
<li>–name&#x2F;-n：表示给 agent 起名为 a1</li>
<li>–conf-file&#x2F;-f：flume 本次启动读取的配置文件是在 job 文件夹下的 flume-telnet.conf<br>文件</li>
<li>-Dflume.root.logger&#x3D;INFO,console ：-D 表示 flume 运行时动态修改 flume.root.logger<br>参数属性值，并将控制台日志打印级别设置为 INFO 级别。日志级别包括:log、info、warn、<br>error</li>
</ul>
</li>
<li><p>使用 netcat 工具向本机的 44444 端口发送内容</p>
<pre><code>nc localhost 44444
</code></pre>
</li>
</ol>
<h4 id="2-2-Flume入门案例–实时监控单个追加文件"><a href="#2-2-Flume入门案例–实时监控单个追加文件" class="headerlink" title="2.2 Flume入门案例–实时监控单个追加文件"></a>2.2 Flume入门案例–实时监控单个追加文件</h4><p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="/./%E5%85%B3%E4%BA%8E%E6%97%A5%E5%BF%97%E9%87%87%E9%9B%86%E7%B3%BB%E7%BB%9FFlume%E7%9F%A5%E8%AF%86%E7%9A%84%E5%AD%A6%E4%B9%A0/image-20230505173625217.png" alt="image-20230505173625217"><figcaption>image-20230505173625217</figcaption></figure></p>
<p>这里同上一个案例的区别主要是Flume Agent 配置文件不同</p>
<p>创建配置文件 flume-file-hdfs.conf</p>
<pre><code># Name the components on this agent
a2.sources = r2
a2.sinks = k2
a2.channels = c2

# Describe/configure the source
a2.sources.r2.type = exec
# hive的日志
a2.sources.r2.command = tail -F /opt/module/hive/logs/hive.log

# Describe the sink
a2.sinks.k2.type = hdfs
a2.sinks.k2.hdfs.path = hdfs://hadoop102:8200/flume/%Y%m%d/%H
#上传文件的前缀
a2.sinks.k2.hdfs.filePrefix = logs-
#是否按照时间滚动文件夹
a2.sinks.k2.hdfs.round = true
#多少时间单位创建一个新的文件夹
a2.sinks.k2.hdfs.roundValue = 1
#重新定义时间单位
a2.sinks.k2.hdfs.roundUnit = hour
#是否使用本地时间戳
a2.sinks.k2.hdfs.useLocalTimeStamp = true
#积攒多少个 Event 才 flush 到 HDFS 一次
a2.sinks.k2.hdfs.batchSize = 100
#设置文件类型，可支持压缩
a2.sinks.k2.hdfs.fileType = DataStream
#多久生成一个新的文件
a2.sinks.k2.hdfs.rollInterval = 60
#设置每个文件的滚动大小
a2.sinks.k2.hdfs.rollSize = 134217700
#文件的滚动与 Event 数量无关
a2.sinks.k2.hdfs.rollCount = 0

# Use a channel which buffers events in memory
a2.channels.c2.type = memory
a2.channels.c2.capacity = 1000
a2.channels.c2.transactionCapacity = 100

# Bind the source and sink to the channel
a2.sources.r2.channels = c2
a2.sinks.k2.channel = c2
</code></pre>
<p><strong>注意：对于所有与时间相关的转义序列，Event Header 中必须存在以 “timestamp”的key（除非 hdfs.useLocalTimeStamp 设置为 true，此方法会使用 TimestampInterceptor 自动添加 timestamp）</strong></p>
<h4 id="2-3-Flume入门案例–实时监控目录下多个新文件"><a href="#2-3-Flume入门案例–实时监控目录下多个新文件" class="headerlink" title="2.3 Flume入门案例–实时监控目录下多个新文件"></a>2.3 Flume入门案例–实时监控目录下多个新文件</h4><p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230505175242130.png" alt="image-20230505175242130"><figcaption>image-20230505175242130</figcaption></figure></p>
<p><strong>说明：在使用Spooling Directory Source时，不要在监控目录中创建目录并持续修改文件；上传完成的文件会以.COMPLETED结尾；被监控的文件每500毫秒扫描一次文件变动</strong></p>
<p>创建配置文件 flume-dir-hdfs.conf</p>
<pre><code>a3.sources = r3
a3.sinks = k3
a3.channels = c3

# Describe/configure the source
a3.sources.r3.type = spooldir
a3.sources.r3.spoolDir = /opt/module/flume/upload
a3.sources.r3.fileSuffix = .COMPLETED
a3.sources.r3.fileHeader = true
#忽略所有以.tmp 结尾的文件，不上传
a3.sources.r3.ignorePattern = ([^ ]*\.tmp)

# Describe the sink
a3.sinks.k3.type = hdfs
a3.sinks.k3.hdfs.path =
hdfs://hadoop102:9820/flume/upload/%Y%m%d/%H
#上传文件的前缀
a3.sinks.k3.hdfs.filePrefix = upload-
#是否按照时间滚动文件夹
a3.sinks.k3.hdfs.round = true
#多少时间单位创建一个新的文件夹
a3.sinks.k3.hdfs.roundValue = 1
#重新定义时间单位
a3.sinks.k3.hdfs.roundUnit = hour
#是否使用本地时间戳
a3.sinks.k3.hdfs.useLocalTimeStamp = true
#积攒多少个 Event 才 flush 到 HDFS 一次
a3.sinks.k3.hdfs.batchSize = 100
#设置文件类型，可支持压缩
a3.sinks.k3.hdfs.fileType = DataStream
#多久生成一个新的文件
a3.sinks.k3.hdfs.rollInterval = 60
#设置每个文件的滚动大小大概是 128M
a3.sinks.k3.hdfs.rollSize = 134217700
#文件的滚动与 Event 数量无关
a3.sinks.k3.hdfs.rollCount = 0

# Use a channel which buffers events in memory
a3.channels.c3.type = memory
a3.channels.c3.capacity = 1000
a3.channels.c3.transactionCapacity = 100

# Bind the source and sink to the channel
a3.sources.r3.channels = c3
a3.sinks.k3.channel = c3
</code></pre>
<p>2.4 Flume入门案例–实时监控目录下多个追加文件</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230505175422818.png" alt="image-20230505175422818"><figcaption>image-20230505175422818</figcaption></figure></p>
<p><strong>Exec Source适用于监控一个实时追加的文件，不能实现断点续传；Spooling Source适用于同步新文件，但不适合对实时追加日志的文件进行监听并同步；而Taildir Source适合用于监听多个实时追加的文件，并且能够实现断点续传</strong></p>
<p>创建配置文件 flume-taildir-hdfs.conf</p>
<pre><code>a3.sources = r3
a3.sinks = k3
a3.channels = c3

# Describe/configure the source
a3.sources.r3.type = TAILDIR
a3.sources.r3.positionFile = /opt/module/flume/tail_dir.json
a3.sources.r3.filegroups = f1 f2
a3.sources.r3.filegroups.f1 = /opt/module/flume/files/.*file.*
a3.sources.r3.filegroups.f2 = /opt/module/flume/files2/.*log.*

# Describe the sink
a3.sinks.k3.type = hdfs
a3.sinks.k3.hdfs.path =
hdfs://hadoop102:9820/flume/upload2/%Y%m%d/%H
#上传文件的前缀
a3.sinks.k3.hdfs.filePrefix = upload-
#是否按照时间滚动文件夹
a3.sinks.k3.hdfs.round = true
#多少时间单位创建一个新的文件夹
a3.sinks.k3.hdfs.roundValue = 1
#重新定义时间单位
a3.sinks.k3.hdfs.roundUnit = hour
#是否使用本地时间戳
a3.sinks.k3.hdfs.useLocalTimeStamp = true
#积攒多少个 Event 才 flush 到 HDFS 一次
a3.sinks.k3.hdfs.batchSize = 100
#设置文件类型，可支持压缩
a3.sinks.k3.hdfs.fileType = DataStream
#多久生成一个新的文件
a3.sinks.k3.hdfs.rollInterval = 60
#设置每个文件的滚动大小大概是 128M
a3.sinks.k3.hdfs.rollSize = 134217700
#文件的滚动与 Event 数量无关
a3.sinks.k3.hdfs.rollCount = 0

# Use a channel which buffers events in memory
a3.channels.c3.type = memory
a3.channels.c3.capacity = 1000
a3.channels.c3.transactionCapacity = 100

# Bind the source and sink to the channel
a3.sources.r3.channels = c3
a3.sinks.k3.channel = c3
</code></pre>
<p><strong>Taildir 说明：Taildir Source维护了一个json格式的position file，其会定期的往position file中更新每个文件读取到的最新的位置，因此能够实现断点续传</strong></p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>flume</tag>
      </tags>
  </entry>
  <entry>
    <title>数据仓库建模理论</title>
    <url>/2023/051846990.html</url>
    <content><![CDATA[<h3 id="第1章-数据仓库概述"><a href="#第1章-数据仓库概述" class="headerlink" title="第1章   数据仓库概述"></a>第1章   数据仓库概述</h3><h4 id="1-1-数据仓库概念（Data-Warehouse）"><a href="#1-1-数据仓库概念（Data-Warehouse）" class="headerlink" title="1.1 数据仓库概念（Data Warehouse）"></a>1.1 数据仓库概念（Data Warehouse）</h4><p>数据仓库是一个为数据分析而设计的企业级数据管理系统。<br>是面向主题的、集成的、稳定的和时变的数据集合。<br>输入数据：业务数据，用户行为数据、爬虫数据。<br>数据仓库，将各个异构的数据源数据库的数据统一管理起来，并且完成了质量较差的数据的剔除、格式转换等预处理操作，最终按照一种合理的建模方式来完成源数据组织形式的转变，为企业<strong>制定决策，提供数据支持</strong>。可以帮助企业<strong>改进业务流程、提高产品质量</strong>等。</p>
<h4 id="1-2-数据仓库核心架构"><a href="#1-2-数据仓库核心架构" class="headerlink" title="1.2 数据仓库核心架构"></a>1.2 数据仓库核心架构</h4><ul>
<li>原始数据层–ODS（ODSàOperation Data Store）：存放未经过处理的原始数据，结构上与源系统保持一致，是数据仓库的数据准备区。</li>
<li>明细数据层–DWD（DWDàData Warehouse Detail）：基于维度建模理论进行构建，存放维度模型中的事实表，保存各业务过程中最小粒度的操作记录。</li>
<li>公共维度层–DIM（DIMàDimension）：基于维度建模理论进行构建，存放维度模型中的维度表，保存一致性维度信息。</li>
<li>汇总数据层–DWS（DWSàData Warehouse Summary）：基于上层的指标需求，以分析的主题对象作为建模驱动，构建公共统计粒度的汇总表。</li>
<li>数据应用层–ADS（ADSàApplication Data Service）：存放各项统计指标结果。</li>
</ul>
<h4 id="1-3-数据仓库与数据库的区别"><a href="#1-3-数据仓库与数据库的区别" class="headerlink" title="1.3 数据仓库与数据库的区别"></a>1.3 数据仓库与数据库的区别</h4><ol>
<li>数据库是面向事务的设计，数据仓库是面向主题设计的</li>
<li>数据库一般存储业务数据，数据仓库存储的一般是历史数据</li>
<li>数据库设计是避免冗余，符合业务应用，但是不符合分析。数据仓库在设计是有意引入冗余，依照分析需求，分析维度、分析指标进行设计</li>
<li>数据库是为捕获数据而设计的，数据仓库是为分析数据而设计</li>
</ol>
<h3 id="第2章-数据仓库建模概述"><a href="#第2章-数据仓库建模概述" class="headerlink" title="第2章   数据仓库建模概述"></a>第2章   数据仓库建模概述</h3><h4 id="2-1-数据仓库建模意义"><a href="#2-1-数据仓库建模意义" class="headerlink" title="2.1 数据仓库建模意义"></a>2.1 数据仓库建模意义</h4><p>数据模型就是数据组织和存储的方法，它强调从业务、数据存取和使用角度合理存储数据。只有将数据有序的组织和存储起来之后，数据才能得到高性能、低成本、高效率、高质量的使用。</p>
<h4 id="2-2-数据仓库模型–ER模型"><a href="#2-2-数据仓库模型–ER模型" class="headerlink" title="2.2 数据仓库模型–ER模型"></a>2.2 数据仓库模型–ER模型</h4><p><strong>ER模型</strong>：用实体关系模型来描述企业业务，并用规范化（减少数据冗余，增强数据的一致性）的方式表示出来，在范式理论上符合3NF</p>
<ul>
<li>实体关系模型：实体关系模型将复杂的数据抽象为两个概念——实体和关系。实体表示一个对象，例如学生、班级，关系是指两个实体之间的关系，例如学生和班级之间的从属关系。</li>
<li>三范式：第一范式1NF：属性不可切割；第二范式2NF：不能存在“部分函数依赖”；第三范式3NF：不能存在传递函数依赖。</li>
</ul>
<blockquote>
<p>这种模型方法的出发点是整合数据，其目的是将整个企业的数据进行组合和合并，并进行规范处理，减少数据冗余性，保证数据的一致性（会产生很多表）。这种模型并不适合直接用于分析统计</p>
</blockquote>
<h4 id="2-3-数据仓库模型–维度模型"><a href="#2-3-数据仓库模型–维度模型" class="headerlink" title="2.3 数据仓库模型–维度模型"></a>2.3 数据仓库模型–维度模型</h4><p><strong>维度模型</strong>：将复杂的业务通过<strong>事实</strong>和<strong>维度</strong>两个概念进行呈现，事实通常对应业务过程，而维度通常对应业务过程发生时所处的环境。<br><strong>注</strong>：业务过程可以概括为一个个不可拆分的行为事件，例如电商交易中的下单，取消订单，付款，退单等，都是业务过程。</p>
<p>下图为一个典型的维度模型，其中<strong>位于中心的SalesOrder为事实表</strong>，其中保存的是下单这个业务过程的所有记录。位于周围每张表都是维度表，包括Date（日期），Customer（顾客），Product（产品），Location（地区）等，这些维度表就组成了每个订单发生时所处的环境，即何人、何时、在何地下单了何种产品。从图中可以看出，模型相对清晰、简洁。</p>
<figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230518104312602.png" alt="image-20230518104312602" style="zoom:50%;"><figcaption>image-20230518104312602</figcaption></figure>

<blockquote>
<p>维度建模以数据分析作为出发点，为数据分析服务，因此它关注的重点是用户如何更快的完成需求分析以及如何实现较好的大规模复杂查询的响应性能</p>
</blockquote>
<h3 id="第3章-维度建模理论之事实表"><a href="#第3章-维度建模理论之事实表" class="headerlink" title="第3章 维度建模理论之事实表"></a>第3章 维度建模理论之事实表</h3><p>事实表（“细长”：列比较少、行比较多，且行的增速快）作为数据仓库维度建模的核心，紧紧围绕着业务过程来设计。其包含与该业务过程的维度引用（维度表外键）以及该业务过程的度量（通常是可累加的数字类型字段）</p>
<h4 id="3-1-事务型事实表"><a href="#3-1-事务型事实表" class="headerlink" title="3.1 事务型事实表"></a>3.1 事务型事实表</h4><p><strong>概述</strong>：事务型事实表用来记录各业务过程，它保存的是各业务过程的原子操作事件，即最细粒度（粒度是指事实表中一行数据所表达的业务细节程度）的操作事件，可用于分析与各业务过程相关的各项统计指标</p>
<p><strong>设计流程</strong>：选择业务过程–&gt;声明粒度–&gt;确定维度–&gt;确定事实</p>
<ul>
<li><p>选择业务过程：挑选需要的业务，一个业务过程对应一张事务型事实表</p>
<p>可以确定有哪些事务型事实表</p>
</li>
<li><p>声明粒度：精确定义每张事务型事实表的每行数据表示什么</p>
<p>可以确定每张事务型事实表的每行数据是什么</p>
</li>
<li><p>确定维度：确定与每张事务型事实表相关的维度有哪些</p>
<p>可以确定每张事务型事实表的维度外键</p>
</li>
<li><p>确定事实：“事实”，指的是每个业务过程的度量值（通常是可累加的数字类型的值，例如：次数、个数、件数、金额等）</p>
<p>可以确定每张事务型事实表的度量值字段</p>
</li>
</ul>
<h4 id="3-2-周期型事实表"><a href="#3-2-周期型事实表" class="headerlink" title="3.2 周期型事实表"></a>3.2 周期型事实表</h4><p><strong>概述</strong>：周期快照事实表以具有规律性的、可预见的时间间隔来记录事实，主要用于分析一些存量型（例如商品库存，账户余额）或者状态型（空气温度，行驶速度）指标。</p>
<h4 id="3-3-累计型事实表"><a href="#3-3-累计型事实表" class="headerlink" title="3.3 累计型事实表"></a>3.3 累计型事实表</h4><p><strong>概述</strong>：累计快照事实表是基于一个业务流程中的<strong>多个关键业务过程</strong>联合处理而构建的事实表，如交易流程中的下单、支付、发货、确认收货业务过程。</p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>数据仓库</tag>
      </tags>
  </entry>
  <entry>
    <title>关于消息队列Kafka知识的学习</title>
    <url>/2023/042039691.html</url>
    <content><![CDATA[<p>Kafka是一项非常重要的消息队列技术，在大数据场景中被主要采用。</p>
<h3 id="第1章-Kafka概述"><a href="#第1章-Kafka概述" class="headerlink" title="第1章 Kafka概述"></a>第1章 Kafka概述</h3><h4 id="1-1-Kafka的定义"><a href="#1-1-Kafka的定义" class="headerlink" title="1.1 Kafka的定义"></a>1.1 Kafka的定义</h4><p>Kafka传统定义：Kafka是一个分布式的基于发布&#x2F;订阅模式的消息队列（Message Queue），主要应用于大数据实时处理领域。</p>
<p>发布&#x2F;订阅：消息的发布者不会将消息直接发送给特定的订阅者，而是将发布的消息分为不同的类别，订阅者只接收感兴趣的消息。</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="C:\Users\28331\AppData\Roaming\Typora\typora-user-images\image-20230420120502679.png" alt="image-20230420120502679"><figcaption>image-20230420120502679</figcaption></figure></p>
<p>Kafka最新定义：Kafka是一个开源的分布式事件流平台，被数千家公司用于高性能数据管道、流分析、数据集成和关键任务应用。</p>
<h4 id="1-2-传统消息队列的主要应用场景"><a href="#1-2-传统消息队列的主要应用场景" class="headerlink" title="1.2 传统消息队列的主要应用场景"></a>1.2 传统消息队列的主要应用场景</h4><p>主要应用场景包括：缓冲&#x2F;消峰，解耦，异步通信</p>
<figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="C:\Users\28331\AppData\Roaming\Typora\typora-user-images\image-20230420113210146.png" alt="image-20230420113210146" style="zoom: 80%;"><figcaption>image-20230420113210146</figcaption></figure>

<figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="C:\Users\28331\AppData\Roaming\Typora\typora-user-images\image-20230420113250219.png" alt="image-20230420113250219" style="zoom: 80%;"><figcaption>image-20230420113250219</figcaption></figure>

<figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="C:\Users\28331\AppData\Roaming\Typora\typora-user-images\image-20230420113310640.png" alt="image-20230420113310640" style="zoom: 80%;"><figcaption>image-20230420113310640</figcaption></figure>

<h4 id="1-3-Kafka的特点"><a href="#1-3-Kafka的特点" class="headerlink" title="1.3 Kafka的特点"></a>1.3 Kafka的特点</h4><ul>
<li>高吞吐量、低延迟：Kafka每秒可以处理几十万条消息，它的延迟最低只有几毫秒，每个topic可以分为多个partition，由多个consumer group对partition进行consume操作</li>
<li>可扩展性：Kafka集群支持热扩展。</li>
<li>持久性、可靠性：消息被持久化到本地磁盘，并且支持数据备份防止数据丢失。</li>
<li>容错性：允许集群中有节点失败（若副本数量为n，则允许n-1个节点失败）</li>
<li>高并发：支持数千个客户端同时读写</li>
</ul>
<p>综合传统消息队列的主要应用场景和Kafka的特点，Kafka起到的作用可以归纳为：消峰填谷，解耦！在大数据流式计算领域中，Kafka主要作为计算机系统的前置缓存和输出结果缓存。其扮演的角色通常为：存储系统（持久性）；消息系统；流处理平台。</p>
<h4 id="1-4-Kafka的基础架构"><a href="#1-4-Kafka的基础架构" class="headerlink" title="1.4 Kafka的基础架构"></a>1.4 Kafka的基础架构</h4><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="C:\Users\28331\AppData\Roaming\Typora\typora-user-images\image-20230420115303092.png" alt="image-20230420115303092" style="zoom:80%;"><figcaption>image-20230420115303092</figcaption></figure>

<ol>
<li>Producer：消息生产者，就是向Kafka broker发消息的客户端</li>
<li>Consumer：消息消费者，向Kafka broker取消息的客户端</li>
<li>Consumer Group（CG）：消费者组，由多个consumer组成。消费者组内每个消费者负责消费不同分区的数据，一个分区只能由一个组内消费者消费；消费者组之间互不影响。所有的消费者都属于某个消费者组，即消费者组是一个逻辑上的一个订阅者</li>
<li>Broker：一台Kafka服务器就是一个broker。一个集群由多个broker组成。一个broker可以容纳多个topic</li>
<li>Topic：可以理解为一个队列，生产者和消费者面向的都是一个topic</li>
<li>Partition：为了实现扩展性，一个非常大的tipic可以分布到多个broker（即服务器）上，一个topic可以分为多个partition，每个partition是一个有序的队列</li>
<li>Replica：副本。一个topic的每个分区都有若干个副本，一个Leader和若干个Follower</li>
<li>Leader：每个分区多个副本的“主”，生产者发送数据的对象，以及消费数据的对象都是Leader</li>
<li>Follower：每个分区多个副本的“从”，实时从Leader中同步数据，保持和Leader数据的同步。Leader发生故障时，某个Follower会成为新的Leader</li>
</ol>
<h3 id="第2章-Kafka命令行操作"><a href="#第2章-Kafka命令行操作" class="headerlink" title="第2章 Kafka命令行操作"></a>第2章 Kafka命令行操作</h3><h4 id="2-1-主题命令行操作"><a href="#2-1-主题命令行操作" class="headerlink" title="2.1 主题命令行操作"></a>2.1 主题命令行操作</h4><ul>
<li><p>查看当前服务器中的所有topic                                                                                                                                             bin&#x2F;kafka-topics.sh –bootstrap-server 节点名称:9092 –list</p>
</li>
<li><p>创建主题</p>
<p>bin&#x2F;kafka-topics.sh –bootstrap-server 节点名称:9092 –create –partitions 分区数 –replication-factor 副本数 –topic 主题名称</p>
</li>
<li><p>查看指定主题详情</p>
<p>bin&#x2F;kafka-topics.sh –bootstrap-server 节点名称:9092 –describe –topic 主题名称</p>
</li>
<li><p>修改主题分区数</p>
<p>bin&#x2F;kafka-topics.sh –bootstrap-server 节点名称:9092 –alter –topic 主题名称 –partitions 修改后的分区数</p>
</li>
<li><p>删除主题</p>
<p>bin&#x2F;kafka-topics.sh –bootstrap-server 节点名称:9092 –delete –topic 主题名称</p>
</li>
</ul>
<h4 id="2-2-生产者命令行操作"><a href="#2-2-生产者命令行操作" class="headerlink" title="2.2 生产者命令行操作"></a>2.2 生产者命令行操作</h4><ul>
<li><p>发送消息</p>
<p>bin&#x2F;kafka-console-producer.sh  –bootstrap-server 节点名称:9092 –topic 主题名称</p>
</li>
</ul>
<h4 id="2-3-消费者命令行操作"><a href="#2-3-消费者命令行操作" class="headerlink" title="2.3 消费者命令行操作"></a>2.3 消费者命令行操作</h4><ul>
<li><p>消费指定主题中的消息</p>
<p>bin&#x2F;kafka-console-consumer.sh  –bootstrap-server 节点名称:9092 –topic 主题名称</p>
</li>
<li><p>把该主题中的所有数据读取出来（包括历史数据）</p>
<p>bin&#x2F;kafka-console-consumer.sh  –bootstrap-server 节点名称:9092 –from-beginning –topic 主题名称</p>
</li>
</ul>
<h3 id="第3章-Kafka生产者"><a href="#第3章-Kafka生产者" class="headerlink" title="第3章 Kafka生产者"></a>第3章 Kafka生产者</h3><h4 id="3-1-生产者消息发送流程"><a href="#3-1-生产者消息发送流程" class="headerlink" title="3.1 生产者消息发送流程"></a>3.1 生产者消息发送流程</h4><p>在消息发送的过程中，涉及到了两个线程–main线程和sender线程。在main线程中创建了一个双端队列RecordAccumulator。main线程将消息发送到RecordAccumulator，sender线程不断从RecordAccumulator中拉取消息发送到Kafka Broker</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="C:\Users\28331\AppData\Roaming\Typora\typora-user-images\image-20230420164903715.png" alt="image-20230420164903715"><figcaption>image-20230420164903715</figcaption></figure></p>
<p>ISR队列：Leader以及与Leader保持同步的Follower的正常存活副本队列</p>
<blockquote>
<p>注意：即使acks&#x3D;-1，也不能完全保证数据发送的100%完整性？因为，如果服务端目标partition的同步副本只有Leader自己了，此时，它收到数据就会给生产者反馈成功。但是一旦反馈之后就宕机，数据还未被持久化，则完整性不能得到保证</p>
</blockquote>
<p>注意：消息发送失败会自动重试，不需要我们在回调函数中手动重试</p>
<h4 id="3-2-异步发送API"><a href="#3-2-异步发送API" class="headerlink" title="3.2 异步发送API"></a>3.2 异步发送API</h4><p>创建MAVEN项目</p>
<p>导入Kafka依赖</p>
<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;
    &lt;artifactId&gt;kafka-clients&lt;/artifactId&gt;
    &lt;version&gt;3.0.0&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p>创建并配置 Kafka 生产者的配置对象</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 1. 创建 kafka 生产者的配置对象</span>
Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 2. 给 kafka 配置对象添加配置信息：bootstrap.servers</span>
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>BOOTSTRAP_SERVERS_CONFIG<span class="token punctuation">,</span>
<span class="token string">"hadoop102:9092"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// key,value 序列化（必须）：key.serializer，value.serializer</span>
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>KEY_SERIALIZER_CLASS_CONFIG<span class="token punctuation">,</span>
<span class="token string">"org.apache.kafka.common.serialization.StringSerializer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>VALUE_SERIALIZER_CLASS_CONFIG<span class="token punctuation">,</span>
<span class="token string">"org.apache.kafka.common.serialization.StringSerializer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 3. 创建 kafka 生产者对象</span>
KafkaProducer<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>  String<span class="token operator">></span>  kafkaProducer  <span class="token operator">=</span>  <span class="token keyword">new</span>
<span class="token class-name">KafkaProducer</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h5 id="3-2-1-不带回调函数的API代码"><a href="#3-2-1-不带回调函数的API代码" class="headerlink" title="3.2.1 不带回调函数的API代码"></a>3.2.1 不带回调函数的API代码</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 4. 调用 send 方法,发送消息</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
kafkaProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">,</span><span class="token string">"atguigu "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h5 id="3-2-2-带回调函数的API代码"><a href="#3-2-2-带回调函数的API代码" class="headerlink" title="3.2.2 带回调函数的API代码"></a>3.2.2 带回调函数的API代码</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 4. 调用 send 方法,发送消息</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 添加回调</span>
    kafkaProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span>  <span class="token class-name">ProducerRecord</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">,</span><span class="token string">"atguigu "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> 
    <span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 该方法在 Producer 收到 ack 时调用，为异步调用</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCompletion</span><span class="token punctuation">(</span>RecordMetadata metadata<span class="token punctuation">,</span>Exception exception<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">// 没有异常,输出信息到控制台</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 主 题 ： "</span>  <span class="token operator">+</span>
                metadata<span class="token punctuation">.</span><span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"->"</span> <span class="token operator">+</span> <span class="token string">"分区："</span> <span class="token operator">+</span> metadata<span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">// 出现异常打印</span>
                exception<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 延迟一会会看到数据发往不同分区</span>
    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p>回调函数会在 producer 收到 ack 时调用，为异步调用，该方法有两个参数，分别是元<br>数据信息（RecordMetadata）和异常信息（Exception），如果 Exception 为 null，说明消息发<br>送成功，如果 Exception 不为 null，说明消息发送失败</p>
<h4 id="3-3-同步发送API"><a href="#3-3-同步发送API" class="headerlink" title="3.3 同步发送API"></a>3.3 同步发送API</h4><p>只需在异步发送的基础上，调用一下get()方法即可</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 4. 调用 send 方法,发送消息</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 同步发送</span>
    kafkaProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">,</span><span class="token string">"kafka"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p>注意：不论是异步发送还是同步发送，都还有非常重要的一步：关闭资源</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 5. 关闭资源</span>
kafkaProducer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="3-4-生产者分区"><a href="#3-4-生产者分区" class="headerlink" title="3.4 生产者分区"></a>3.4 生产者分区</h4><h5 id="3-4-1-分区好处"><a href="#3-4-1-分区好处" class="headerlink" title="3.4.1 分区好处"></a>3.4.1 分区好处</h5><ol>
<li>便于合理使用存储资源，每个partition在一个Broker上存储，可以把海量的数据按照分区切割成一块一块存储在多台Broker上。合理控制分区的任务，可以实现负载均衡的效果</li>
<li>提高并行度，生产者可以以分区为单位发送数据；消费者可以以分区为单位消费数据</li>
</ol>
<h5 id="3-4-2-生产者发送消息的分区策略"><a href="#3-4-2-生产者发送消息的分区策略" class="headerlink" title="3.4.2 生产者发送消息的分区策略"></a>3.4.2 生产者发送消息的分区策略</h5><ol>
<li><p>指明partition的情况下，直接将指明的值作为partition的值；例如：partition&#x3D;0，所有数据写入分区0</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 4. 调用 send 方法,发送消息</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 指定数据发送到 1 号分区，key 为空（IDEA 中 ctrl + p 查看参数）</span>
    kafkaProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span>  <span class="token class-name">ProducerRecord</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"atguigu "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> 
    <span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCompletion</span><span class="token punctuation">(</span>RecordMetadata metadata<span class="token punctuation">,</span>Exception e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 主 题 ： "</span>  <span class="token operator">+</span>
            metadata<span class="token punctuation">.</span><span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"->"</span> <span class="token operator">+</span> <span class="token string">"分区："</span> <span class="token operator">+</span> metadata<span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
</li>
<li><p>没有指明partition值但有key的情况下，将key的hash值与topic的partition数进行取余得到partition的值；例如：key1的hash值&#x3D;5，key2的hash值&#x3D;6，topic的分区数&#x3D;2，那么key1对应的value1写入1号分区，key2对应的value2写入0号分区</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 4. 调用 send 方法,发送消息</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 依次指定 key 值为 a,b,f ，数据 key 的 hash 值与 3 个分区求余，分别发往 1、2、0</span>
    kafkaProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span>  <span class="token class-name">ProducerRecord</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"atguigu "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> 
    <span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCompletion</span><span class="token punctuation">(</span>RecordMetadata metadata<span class="token punctuation">,</span>Exception e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 主 题 ： "</span>  <span class="token operator">+</span>
            metadata<span class="token punctuation">.</span><span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"->"</span> <span class="token operator">+</span> <span class="token string">"分区："</span> <span class="token operator">+</span> metadata<span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
</li>
<li><p>既没有partition值又没有key值的情况下，Kafka采用Sticky Partition（黏性分区器），会随机选择一个分区，并尽可能一直使用该分区，待该分区的batch已满或者已完成，Kafka再随机选一个分区进行使用（和上一次的分区不同）；例如：第一次随机选择0号分区，等0号分区当前批次满了（默认16k）或者linger.ms设置的时间到，Kafka再随机选择一个分区进行使用（如果还是0会继续随机）</p>
<blockquote>
<p>代码示例如–3.2.2 带回调函数的API代码</p>
</blockquote>
</li>
<li><p>自定义分区器</p>
<ol>
<li>定义类实现Partitioner接口</li>
<li>重写partition()方法</li>
<li>在生产者的配置对象中添加自定义分区器</li>
</ol>
</li>
</ol>
<p>例：实现一个分区器实现，发送过来的数据中如果包含 atguigu，就发往 0 号分区，不包含 atguigu，就发往 1号分区。</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//setup1、setup2</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>Partitioner<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>common<span class="token punctuation">.</span>Cluster<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">/**
* 1. 实现接口 Partitioner
* 2. 实现 3 个方法:partition,close,configure
* 3. 编写 partition 方法,返回分区号
*/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyPartitioner</span> <span class="token keyword">implements</span> <span class="token class-name">Partitioner</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/**
    * 返回信息对应的分区
    * @param topic 主题
    * @param key 消息的 key
    * @param keyBytes 消息的 key 序列化后的字节数组
    * @param value 消息的 value
    * @param valueBytes 消息的 value 序列化后的字节数组
    * @param cluster 集群元数据可以查看分区信息
    * @return
    */</span>		
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span>  <span class="token keyword">int</span>  <span class="token function">partition</span><span class="token punctuation">(</span>String  topic<span class="token punctuation">,</span>  Object  key<span class="token punctuation">,</span>  <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keyBytes<span class="token punctuation">,</span> Object value<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> 			valueBytes<span class="token punctuation">,</span> Cluster cluster<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 获取消息</span>
        String msgValue <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 创建 partition</span>
        <span class="token keyword">int</span> partition<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 判断消息是否包含 atguigu</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>msgValue<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"atguigu"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        partition <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        partition <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 返回分区号</span>
        <span class="token keyword">return</span> partition<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 关闭资源</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 配置方法</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> configs<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
<span class="token comment" spellcheck="true">//setup3</span>
<span class="token comment" spellcheck="true">// 添加自定义分区器</span>
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>PARTITIONER_CLASS_CONFIG<span class="token punctuation">,</span><span class="token string">"com.atguigu.kafka.producer.MyPartitioner"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="3-5-生产经验–生产者如何提高吞吐量"><a href="#3-5-生产经验–生产者如何提高吞吐量" class="headerlink" title="3.5 生产经验–生产者如何提高吞吐量"></a>3.5 生产经验–生产者如何提高吞吐量</h4><ol>
<li>修改batch.size大小，修改为32k</li>
<li>修改linger.ms等待时间，修改为5~100ms</li>
<li>修改compress.type压缩模式，修改为“snappy”</li>
<li>修改RecordAccumulator缓冲区大小，修改为64M</li>
</ol>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// batch.size：批次大小，默认 16K</span>
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>BATCH_SIZE_CONFIG<span class="token punctuation">,</span> <span class="token number">16384</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// linger.ms：等待时间，默认 0</span>
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>LINGER_MS_CONFIG<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// RecordAccumulator：缓冲区大小，默认 32M：buffer.memory</span>
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>BUFFER_MEMORY_CONFIG<span class="token punctuation">,</span><span class="token number">33554432</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// compression.type：压缩，默认 none，可配置值 gzip、snappy、lz4 和 zstd</span>
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>COMPRESSION_TYPE_CONFIG<span class="token punctuation">,</span><span class="token string">"snappy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="3-6-生产经验–数据可靠性"><a href="#3-6-生产经验–数据可靠性" class="headerlink" title="3.6 生产经验–数据可靠性"></a>3.6 生产经验–数据可靠性</h4><blockquote>
<p>ack应答原理：</p>
</blockquote>
<p>ack&#x3D;0：生产者发送过来的数据，不需要等数据落盘应答<br>ack&#x3D;1：生产者发送过来的数据，Leader收到数据后应答<br>ack&#x3D;-1：生产者发送过来的数据，Leader和ISR队列里面的所有节点收齐数据后应答</p>
<blockquote>
<p>思考：Leader收到数据，所有Follower都开始同步数据，但有一个Follower，因为某种故障，迟迟不能与Leader进行同步，那这个问题怎么解决呢？</p>
</blockquote>
<p>Leader维护了一个动态的in-sync replica set（ISR） ），意为和Leader保持同步的Follower+Leader集合(leader：0，isr:0,1,2)。如果Follower长时间未向Leader发送通信请求或同步数据，则该Follower将被踢出ISR。该时间阈值由replica.lag.time.max.ms参数设定，默认30s。例如2超时，(leader:0, isr:0,1)。</p>
<p><strong>数据完全可靠条件 &#x3D; ACK级别设置为-1 +  分区副本大于等于2 + ISR里应答的最小副本数量大于等于2</strong></p>
<blockquote>
<p>代码配置</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 设置 acks</span>
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>ACKS_CONFIG<span class="token punctuation">,</span> <span class="token string">"all"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 重试次数 retries，默认是 int 最大值，2147483647</span>
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>RETRIES_CONFIG<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="3-7-生产经验–数据去重"><a href="#3-7-生产经验–数据去重" class="headerlink" title="3.7 生产经验–数据去重"></a>3.7 生产经验–数据去重</h4><h5 id="3-7-1-数据传递语义"><a href="#3-7-1-数据传递语义" class="headerlink" title="3.7.1 数据传递语义"></a>3.7.1 数据传递语义</h5><ul>
<li>至少传递一次 &#x3D;  ACK级别设置为-1 +  分区副本大于等于2 + ISR里应答的最小副本数量大于等于2<br>可以保证数据不丢失，但是不能保证数据不重复（在Leader准备应答时，Leader发生故障，但是Follower已经同步数据）</li>
<li>最多一次 &#x3D; ACK级别设置为0<br>可以保证数据不重复，但是不能保证数据不丢失</li>
<li>精确一次：对于一些非常重要的信息，比如和钱相关的数据，要求数据既不能重复也不丢失</li>
</ul>
<p><strong>Kafka 0.11版本以后，引入了一项重大特性：<em>幂等性和事务</em></strong></p>
<h5 id="3-7-2-幂等性"><a href="#3-7-2-幂等性" class="headerlink" title="3.7.2 幂等性"></a>3.7.2 幂等性</h5><p><strong>幂等性</strong>就是指Producer不论向Broker发送多少次重复数据，Broker端都只会持久化一条，保证了不重复</p>
<p>精确一次（ （Exactly Once） ） &#x3D;  幂等性 +  至少一次（ （ ack&#x3D;-1 +  分区副本数&gt;&#x3D;2 + ISR 最小副本数量&gt;&#x3D;2） ）  </p>
<p>重复数据的判断标准：具有**&lt;PID, Partition, SeqNumber&gt;**相同主键的消息提交时，Broker只会持久化一条。其中PID是Kafka每次重启都会分配一个新的会话ID（所以幂等性只能保证的是在单分区单会话内不重复）；Partition 表示分区号；Sequence Number是单调自增的。</p>
<p>那么如何使用幂等性呢？<em><strong>开启参数 enable.idempotence 默认为 true，false关闭</strong></em></p>
<h5 id="3-7-3-生产者事务"><a href="#3-7-3-生产者事务" class="headerlink" title="3.7.3 生产者事务"></a>3.7.3 生产者事务</h5><blockquote>
<p>Kafka事务原理</p>
</blockquote>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230428154752478.png" alt="image-20230428154752478"><figcaption>image-20230428154752478</figcaption></figure></p>
<blockquote>
<p>代码配置</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 设置事务 id（必须），事务 id 任意起名</span>
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>TRANSACTIONAL_ID_CONFIG<span class="token punctuation">,</span><span class="token string">"transaction_id_0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">--</span><span class="token operator">-</span>
<span class="token comment" spellcheck="true">// 1 初始化事务</span>
<span class="token keyword">void</span> <span class="token function">initTransactions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 2 开启事务</span>
<span class="token keyword">void</span> <span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ProducerFencedException<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 3 在事务内提交已经消费的偏移量（主要用于消费者）</span>
<span class="token keyword">void</span> <span class="token function">sendOffsetsToTransaction</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>TopicPartition<span class="token punctuation">,</span> OffsetAndMetadata<span class="token operator">></span> offsets<span class="token punctuation">,</span>
String  consumerGroupId<span class="token punctuation">)</span>  <span class="token keyword">throws</span>
ProducerFencedException<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 4 提交事务</span>
<span class="token keyword">void</span> <span class="token function">commitTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ProducerFencedException<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 5 放弃事务（类似于回滚事务的操作）</span>
<span class="token keyword">void</span> <span class="token function">abortTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ProducerFencedException<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 初始化事务</span>
kafkaProducer<span class="token punctuation">.</span><span class="token function">initTransactions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 开启事务</span>
kafkaProducer<span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 4. 调用 send 方法,发送消息</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 发送消息</span>
kafkaProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span>  <span class="token class-name">ProducerRecord</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">,</span>
<span class="token string">"atguigu "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// int i = 1 / 0;</span>
<span class="token comment" spellcheck="true">// 提交事务</span>
kafkaProducer<span class="token punctuation">.</span><span class="token function">commitTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 终止事务</span>
kafkaProducer<span class="token punctuation">.</span><span class="token function">abortTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 5. 关闭资源</span>
kafkaProducer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="3-8-生产经验–数据有序"><a href="#3-8-生产经验–数据有序" class="headerlink" title="3.8 生产经验–数据有序"></a>3.8 生产经验–数据有序</h4><p>单分区内，有序<br>多分区，分区与分区之间无序</p>
<h4 id="3-9-生产经验–数据乱序"><a href="#3-9-生产经验–数据乱序" class="headerlink" title="3.9 生产经验–数据乱序"></a>3.9 生产经验–数据乱序</h4><ol>
<li><p>Kafka在1.x版本之前保证数据单分区有序，条件如下：<br>max.in.flight.requests.per.connection&#x3D;1（不需要考虑是否开启幂等性）</p>
</li>
<li><p>Kafka在1.x及以后版本保证数据单分区有序，条件如下：<br>（1）未开启幂等性<br>max.in.flight.requests.per.connection需要设置未1<br>（2）开启幂等性<br>max.in.flight.requests.per.connection需要设置小于等于5<br>原因说明：因为在Kafka1.x以后，启用幂等后，Kafka服务端会缓存producer发来的最近5个request的元数据，故无论如何，都可以保证最近5个request的数据都是有序的</p>
<p><strong>如果开启了幂等性且缓存的请求个数小于5个，会在服务端重新排序</strong></p>
</li>
</ol>
<h3 id="第4章-Kafka-Broker"><a href="#第4章-Kafka-Broker" class="headerlink" title="第4章 Kafka Broker"></a>第4章 Kafka Broker</h3><h4 id="4-1-Kafka-Broker工作流程"><a href="#4-1-Kafka-Broker工作流程" class="headerlink" title="4.1 Kafka Broker工作流程"></a>4.1 Kafka Broker工作流程</h4><h5 id="4-1-1-Zookeeper存储的Kafka信息"><a href="#4-1-1-Zookeeper存储的Kafka信息" class="headerlink" title="4.1.1 Zookeeper存储的Kafka信息"></a>4.1.1 Zookeeper存储的Kafka信息</h5><p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230503225140019.png" alt="image-20230503225140019"><figcaption>image-20230503225140019</figcaption></figure></p>
<blockquote>
<p>注：在0.9版本之前Kafka的offset信息存储在Zookeeper中，在0.9版本之后，存储在Kafka的topic_offsets主题中</p>
</blockquote>
<h5 id="4-1-2-Kafka-Broker总体工作流程"><a href="#4-1-2-Kafka-Broker总体工作流程" class="headerlink" title="4.1.2 Kafka Broker总体工作流程"></a>4.1.2 Kafka Broker总体工作流程</h5><p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230503225259694.png" alt="image-20230503225259694"><figcaption>image-20230503225259694</figcaption></figure></p>
<h4 id="4-2-生产经验–节点服役和退役"><a href="#4-2-生产经验–节点服役和退役" class="headerlink" title="4.2 生产经验–节点服役和退役"></a>4.2 生产经验–节点服役和退役</h4><h4 id="4-3-Kafka副本"><a href="#4-3-Kafka副本" class="headerlink" title="4.3 Kafka副本"></a>4.3 Kafka副本</h4><h5 id="4-3-1-副本基本信息"><a href="#4-3-1-副本基本信息" class="headerlink" title="4.3.1 副本基本信息"></a>4.3.1 副本基本信息</h5><ol>
<li>Kafka副本作用：提高数据可靠性</li>
<li>Kafka默认副本1个，生产环境一般配置为2个，保证数据可靠性；太多副本会增加磁盘存储空间，增加网络上数据传输，降低效率</li>
<li>Kafka中副本分为：Leader 和 Follower。Kafka生产者只会把数据发往Leader，然后Follower找Leader进行同步数据</li>
<li>Kafka分区中的所有副本统称为AR<br>AR &#x3D; ISR + OSR<br><em><strong>OSR</strong></em>，表示Follower与Leader副本同步时，延迟过多的副本</li>
</ol>
<h5 id="4-3-2-Leader选举流程"><a href="#4-3-2-Leader选举流程" class="headerlink" title="4.3.2 Leader选举流程"></a>4.3.2 Leader选举流程</h5><p>Leader选举流程为4.1.2Broker总体工作流程图中的（1）、（2）、（3）、（4）步</p>
<p><strong>Kafka集群中有一个broker的Controller会被选举为Controller Leader，负责管理集群broker的上下线，所有topic的分区副本分配和Leader选举等工作</strong></p>
<h5 id="4-3-3-Leader-和-Follower故障处理细节"><a href="#4-3-3-Leader-和-Follower故障处理细节" class="headerlink" title="4.3.3 Leader 和 Follower故障处理细节"></a>4.3.3 Leader 和 Follower故障处理细节</h5><p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230503231507905-1683126934125-1.png" alt="image-20230503231507905"><figcaption>image-20230503231507905</figcaption></figure></p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230503231437092.png" alt="image-20230503231437092"><figcaption>image-20230503231437092</figcaption></figure></p>
<h4 id="4-4-文件存储"><a href="#4-4-文件存储" class="headerlink" title="4.4 文件存储"></a>4.4 文件存储</h4><h5 id="4-4-1-文件存储机制"><a href="#4-4-1-文件存储机制" class="headerlink" title="4.4.1 文件存储机制"></a>4.4.1 文件存储机制</h5><p>1）topic数据的存储机制	</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="/./%E5%85%B3%E4%BA%8E%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97Kafka%E7%9F%A5%E8%AF%86%E7%9A%84%E5%AD%A6%E4%B9%A0/image-20230508203739197.png" alt="image-20230508203739197"><figcaption>image-20230508203739197</figcaption></figure></p>
<p>2）index 和 log 文件详解</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="/./%E5%85%B3%E4%BA%8E%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97Kafka%E7%9F%A5%E8%AF%86%E7%9A%84%E5%AD%A6%E4%B9%A0/image-20230508212208719.png" alt="image-20230508212208719"><figcaption>image-20230508212208719</figcaption></figure></p>
<h5 id="4-4-2-文件清理策略"><a href="#4-4-2-文件清理策略" class="headerlink" title="4.4.2 文件清理策略"></a>4.4.2 文件清理策略</h5><p>Kafka中<strong>默认的日志保存时间为7天</strong>，可以通过调整如下参数修改保存时间：</p>
<ul>
<li>log.retention.hours，最低优先级–小时，默认7天</li>
<li>log.retention.minutes，分钟</li>
<li>log.retention.ms，最高优先级–毫秒</li>
<li>log.retention.check.interval.ms，负责设置检查周期，默认5分钟</li>
</ul>
<p>那么日志一旦超过了设置的时间，怎么处理呢？Kafka中提供的日志清理策略有<strong>delete 和 compact</strong>两种</p>
<p>1）delete日志删除：将过期数据删除</p>
<ul>
<li>log.cleanup.policy &#x3D; delete	所有数据启用删除策略</li>
</ul>
<p>（1）基于时间：默认打开。以segment中所有记录中的最大时间戳作为该文件时间戳</p>
<p>（2）基于大小：默认关闭。超过设置的所有日志总大小，删除最早的segment</p>
<p>​	log.retention.bytes，默认等于-1，表示无穷大</p>
<p>2）compact日志压缩：对于相同key的不同value值，只保留最后一个版本</p>
<ul>
<li>log.cleanup.policy &#x3D; compact	所有数据启用压缩策略</li>
</ul>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="/./%E5%85%B3%E4%BA%8E%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97Kafka%E7%9F%A5%E8%AF%86%E7%9A%84%E5%AD%A6%E4%B9%A0/image-20230508215050506.png" alt="image-20230508215050506"><figcaption>image-20230508215050506</figcaption></figure></p>
<p>压缩后的offset可能是不连续的，比如上图中没有6，当从这些offset消费消息时，将会拿到比这个offset大的offset对应的消息，实际上会拿到offset为7的消息，并从这个位置开始消费<br>这种策略只适合特殊场景，比如消息的key是用户ID，value是用户的资料，通过这种压缩策略，整个消息集里就保存了所有用户最新的资料</p>
<p>4.5 高效读写数据</p>
<ul>
<li><p>Kafka本身的分布式集群，可以采用分区技术，并行度高</p>
</li>
<li><p>读数据采用稀疏索引，可以快速定位要消费的数据</p>
</li>
<li><p>顺序写磁盘</p>
<p>Kafka的producer生产数据，是一直追加到log文件末端，为顺序写。顺序写能到600M&#x2F;s，随机写只有100K&#x2F;s，因为顺序写省去大量磁头寻址的时间</p>
</li>
<li><p>页缓存+零拷贝技术</p>
</li>
</ul>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230517235003073.png" alt="image-20230517235003073"><figcaption>image-20230517235003073</figcaption></figure></p>
<h3 id="第5章-Kafka消费者"><a href="#第5章-Kafka消费者" class="headerlink" title="第5章 Kafka消费者"></a>第5章 Kafka消费者</h3><h4 id="5-1-Kafka消费方式"><a href="#5-1-Kafka消费方式" class="headerlink" title="5.1 Kafka消费方式"></a>5.1 Kafka消费方式</h4><p>consumer采用<strong>pull（拉）模式</strong>从broker中主动拉取数据</p>
<blockquote>
<p>pull模式不足之处是，如果Kafka一直没有数据，消费者可能会陷入循环之中，一直返回空数据！</p>
</blockquote>
<h4 id="5-2-Kafka消费者工作流程"><a href="#5-2-Kafka消费者工作流程" class="headerlink" title="5.2 Kafka消费者工作流程"></a>5.2 Kafka消费者工作流程</h4><h5 id="5-2-1-消费者总体工作流程"><a href="#5-2-1-消费者总体工作流程" class="headerlink" title="5.2.1 消费者总体工作流程"></a>5.2.1 消费者总体工作流程</h5><p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/kakfa%E6%B6%88%E8%B4%B9%E8%80%85%E6%80%BB%E4%BD%93%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="image-20230517235750314"><figcaption>image-20230517235750314</figcaption></figure></p>
<blockquote>
<p>可以看出都是从副本leader拉数据</p>
</blockquote>
<h5 id="5-2-2-消费者组原理"><a href="#5-2-2-消费者组原理" class="headerlink" title="5.2.2 消费者组原理"></a>5.2.2 消费者组原理</h5><p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230518000047461.png" alt="image-20230518000047461"><figcaption>image-20230518000047461</figcaption></figure></p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230518000113496.png" alt="image-20230518000113496"><figcaption>image-20230518000113496</figcaption></figure></p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230518000204148.png" alt="image-20230518000204148"><figcaption>image-20230518000204148</figcaption></figure></p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230518000231855.png" alt="image-20230518000231855"><figcaption>image-20230518000231855</figcaption></figure></p>
<h4 id="5-3-消费者API"><a href="#5-3-消费者API" class="headerlink" title="5.3 消费者API"></a>5.3 消费者API</h4><blockquote>
<p>注意：在消费者 API 代码中必须配置消费者组 id。命令行启动消费者不填写消费者组id，会被自动填写随机的消费者组 id。</p>
</blockquote>
<p>创建并配置 Kafka 生产者的配置对象</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 1.创建消费者的配置对象</span>
Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 2.给消费者配置对象添加参数</span>
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span>BOOTSTRAP_SERVERS_CONFIG<span class="token punctuation">,</span><span class="token string">"hadoop102:9092"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 配置序列化 必须</span>
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span>KEY_DESERIALIZER_CLASS_CONFIG<span class="token punctuation">,</span>
StringDeserializer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span>VALUE_DESERIALIZER_CLASS_CONFIG<span class="token punctuation">,</span>
StringDeserializer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 配置消费者组（组名任意起名） 必须</span>
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span>GROUP_ID_CONFIG<span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>需求：创建一个独立消费者，消费 first主题中数据</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 创建消费者对象</span>
KafkaConsumer<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>  String<span class="token operator">></span>  kafkaConsumer  <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">KafkaConsumer</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 注册要消费的主题（可以消费多个主题）</span>
ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> topics <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
topics<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
kafkaConsumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>topics<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 拉取数据打印</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 设置 1s 中消费一批数据</span>
    ConsumerRecords<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>  String<span class="token operator">></span>  consumerRecords  <span class="token operator">=</span> kafkaConsumer<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 打印消费到的数据</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>ConsumerRecord<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> consumerRecord <span class="token operator">:</span>consumerRecords<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>consumerRecord<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p>需求：创建一个独立消费者，消费 first主题 0 号分区的数据</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 创建消费者对象</span>
KafkaConsumer<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>  String<span class="token operator">></span>  kafkaConsumer  <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">KafkaConsumer</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 消费某个主题的某个分区数据</span>
ArrayList<span class="token operator">&lt;</span>TopicPartition<span class="token operator">></span>  topicPartitions  <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
topicPartitions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TopicPartition</span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
kafkaConsumer<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>topicPartitions<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 拉取数据打印</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 设置 1s 中消费一批数据</span>
    ConsumerRecords<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>  String<span class="token operator">></span>  consumerRecords  <span class="token operator">=</span> kafkaConsumer<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 打印消费到的数据</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>ConsumerRecord<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> consumerRecord <span class="token operator">:</span>consumerRecords<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>consumerRecord<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p>需求：测试同一个主题的分区数据，只能由一个消费者组中的一个消费</p>
<p>复制一份代码，在 IDEA 中同时启动，即可启动同一个消费者组中的两个消费者</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 创建消费者对象</span>
KafkaConsumer<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>  String<span class="token operator">></span>  kafkaConsumer  <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">KafkaConsumer</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 注册主题</span>
ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> topics <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
topics<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
kafkaConsumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>topics<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 拉取数据打印</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 设置 1s 中消费一批数据</span>
    ConsumerRecords<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>  String<span class="token operator">></span>  consumerRecords  <span class="token operator">=</span> kafkaConsumer<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 打印消费到的数据</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>ConsumerRecord<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> consumerRecord <span class="token operator">:</span>consumerRecords<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>consumerRecord<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="5-4-生产经验–分区的分配以及再平衡"><a href="#5-4-生产经验–分区的分配以及再平衡" class="headerlink" title="5.4 生产经验–分区的分配以及再平衡"></a>5.4 生产经验–分区的分配以及再平衡</h4><p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230520231827510.png" alt="image-20230520231827510"><figcaption>image-20230520231827510</figcaption></figure></p>
<h5 id="5-4-1-Range分区"><a href="#5-4-1-Range分区" class="headerlink" title="5.4.1 Range分区"></a>5.4.1 Range分区</h5><p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230520232726068.png" alt="image-20230520232726068"><figcaption>image-20230520232726068</figcaption></figure></p>
<p><strong>再平衡</strong>：停止掉 0 号消费者，快速重新发送消息观看结果（45s 以内，越快越好）<br>1 号消费者：消费到 3、4号分区数据<br>2 号消费者：消费到 5、6号分区数据</p>
<p>0 号消费者的任务会整体被分配到 1 号消费者或者 2 号消费者</p>
<blockquote>
<p>说明：0号消费者挂掉后，消费者组需要按照超时时间 45s 来判断它是否退出，所以需要等待，时间到了 45s 后，判断它真的退出就会把任务分配给其他 broker 执行</p>
</blockquote>
<p>再次重新发送消息观看结果（45s 以后）<br>1 号消费者：消费到 0、1、2、3 号分区数据<br>2 号消费者：消费到 4、5、6号分区数据<br>说明：消费者 0 已经被踢出消费者组，所以重新按照 range 方式分配</p>
<h5 id="5-4-2-RoundRobin分区"><a href="#5-4-2-RoundRobin分区" class="headerlink" title="5.4.2 RoundRobin分区"></a>5.4.2 RoundRobin分区</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 修改分区分配策略</span>
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span>PARTITION_ASSIGNMENT_STRATEGY_CONFIG<span class="token punctuation">,</span> <span class="token string">"org.apache.kafka.clients.consumer.RoundRobinAssignor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230520233436300.png" alt="image-20230520233436300"><figcaption>image-20230520233436300</figcaption></figure></p>
<p><strong>再平衡</strong>：停止掉 0 号消费者，快速重新发送消息观看结果（45s 以内，越快越好）<br>1 号消费者：消费到 1、4号分区数据<br>2 号消费者：消费到 2、5号分区数据</p>
<p>0 号消费者的任务会按照RoundRobin的方式，把数据轮询分成0、3和6号分区数据，分别由1号消费者或2号消费者消费。</p>
<p>再次重新发送消息观看结果（45s 以后）<br>1 号消费者：消费到 0、2、4、6 号分区数据<br>2 号消费者：消费到 1、3、5号分区数据<br>说明：消费者 0 已经被踢出消费者组，所以重新按照 range 方式分配</p>
<h5 id="5-4-3-Sticky分区"><a href="#5-4-3-Sticky分区" class="headerlink" title="5.4.3 Sticky分区"></a>5.4.3 Sticky分区</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 修改分区分配策略</span>
ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> startegys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
startegys<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"org.apache.kafka.clients.consumer.StickyAssignor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span>PARTITION_ASSIGNMENT_STRATEGY_CONFIG<span class="token punctuation">,</span>startegys<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>粘性分区定义：可以理解为分配的结果带有“粘性的”。即在执行一次新的分配之前，考虑上一次分配的结果，尽量少的调整分配的变动，可以节省大量的开销。</p>
<p>粘性分区是 Kafka 从 0.11.x 版本开始引入这种分配策略，首先会尽量均衡的放置分区到消费者上面，在出现同一消费者组内消费者出现问题的时候，会尽量保持原有分配的分区不变化。</p>
<p><strong>再平衡</strong>：停止掉 0 号消费者，快速重新发送消息观看结果（45s 以内，越快越好）<br><br>1 号消费者：消费到 2、5、3号分区数据<br>2 号消费者：消费到 4、6号分区数据</p>
<p>0 号消费者的任务会按照粘性规则，尽可能均衡的随机分成 0 和 1 号分区数据，分别由 1号消费者或者 2号消费者消费。</p>
<p>再次重新发送消息观看结果（45s 以后）<br>1 号消费者：消费到 2、3、5号分区数据<br>2 号消费者：消费到 0、1、4、6 号分区数据<br>说明：消费者 0 已经被踢出消费者组，所以重新按照粘性方式分配</p>
<h4 id="5-5-offset位移"><a href="#5-5-offset位移" class="headerlink" title="5.5 offset位移"></a>5.5 offset位移</h4><h5 id="5-5-1-offset的默认维护位置"><a href="#5-5-1-offset的默认维护位置" class="headerlink" title="5.5.1 offset的默认维护位置"></a>5.5.1 offset的默认维护位置</h5><p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230520235452353.png" alt="image-20230520235452353"><figcaption>image-20230520235452353</figcaption></figure></p>
<p>__consumer_offsets 主题里面采用 key 和 value 的方式存储数据。key 是 group.id+topic+分区号，value 就是当前 offset 的值。每隔一段时间，kafka 内部会对这个 topic 进行compact，也就是每个 group.id+topic+分区号就保留最新数据。</p>
<h5 id="5-5-2-自动提交offset"><a href="#5-5-2-自动提交offset" class="headerlink" title="5.5.2 自动提交offset"></a>5.5.2 自动提交offset</h5><p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230521000115808.png" alt="image-20230521000115808"><figcaption>image-20230521000115808</figcaption></figure></p>
<p>自动提交offset代码设置</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 是否自动提交 offset</span>
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span>ENABLE_AUTO_COMMIT_CONFIG<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 提交 offset 的时间周期 1000ms，默认 5s</span>
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span>AUTO_COMMIT_INTERVAL_MS_CONFIG<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h5 id="5-5-3-手动提交offset"><a href="#5-5-3-手动提交offset" class="headerlink" title="5.5.3 手动提交offset"></a>5.5.3 手动提交offset</h5><p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230521000347921.png" alt="image-20230521000347921"><figcaption>image-20230521000347921</figcaption></figure></p>
<p>首先设置手动提交offset</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 是否自动提交 offset</span>
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span>ENABLE_AUTO_COMMIT_CONFIG<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<ol>
<li><p>同步提交</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 消费数据</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 读取消息</span>
    ConsumerRecords<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>  String<span class="token operator">></span>  consumerRecords  <span class="token operator">=</span> consumer<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 输出消息</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>ConsumerRecord<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> consumerRecord <span class="token operator">:</span>consumerRecords<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>consumerRecord<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 同步提交 offset</span>
    consumer<span class="token punctuation">.</span><span class="token function">commitSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
</li>
<li><p>异步提交</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 消费数据</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 读取消息</span>
    ConsumerRecords<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>  String<span class="token operator">></span>  consumerRecords  <span class="token operator">=</span> consumer<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 输出消息</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>ConsumerRecord<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> consumerRecord <span class="token operator">:</span>consumerRecords<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>consumerRecord<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 异步提交 offset</span>
    consumer<span class="token punctuation">.</span><span class="token function">commitAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
</li>
</ol>
<h5 id="5-5-4-指定offset消费"><a href="#5-5-4-指定offset消费" class="headerlink" title="5.5.4 指定offset消费"></a>5.5.4 指定offset消费</h5><p><strong>auto.offset.reset &#x3D; earliest | latest | none 默认是 latest</strong></p>
<ul>
<li>earliest：自动将偏移量重置为最早的偏移量，–from-beginning</li>
<li>latest（默认值）：自动将偏移量重置为最新偏移量</li>
<li>none：如果未找到消费者组的先前偏移量，则向消费者抛出异常</li>
</ul>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230521001240507.png" alt="image-20230521001240507"><figcaption>image-20230521001240507</figcaption></figure></p>
<p><strong>任意指定offset位移开始消费</strong>代码</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 1 创建一个消费者</span>
KafkaConsumer<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>  String<span class="token operator">></span>  kafkaConsumer  <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">KafkaConsumer</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 2 订阅一个主题</span>
ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> topics <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
topics<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
kafkaConsumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>topics<span class="token punctuation">)</span><span class="token punctuation">;</span>

Set<span class="token operator">&lt;</span>TopicPartition<span class="token operator">></span> assignment<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span>assignment<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    kafkaConsumer<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 获取消费者分区分配信息（有了分区分配信息才能开始消费）</span>
    assignment <span class="token operator">=</span> kafkaConsumer<span class="token punctuation">.</span><span class="token function">assignment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 遍历所有分区，并指定 offset 从 1700 的位置开始消费</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>TopicPartition tp<span class="token operator">:</span> assignment<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    kafkaConsumer<span class="token punctuation">.</span><span class="token function">seek</span><span class="token punctuation">(</span>tp<span class="token punctuation">,</span> <span class="token number">1700</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 3 消费该主题数据</span>
</code></pre>
<h5 id="5-5-5-指定时间消费"><a href="#5-5-5-指定时间消费" class="headerlink" title="5.5.5 指定时间消费"></a>5.5.5 指定时间消费</h5><p>废话不多说，直接上代码</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 1 创建一个消费者</span>
KafkaConsumer<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>  String<span class="token operator">></span>  kafkaConsumer  <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">KafkaConsumer</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 2 订阅一个主题</span>
ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> topics <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
topics<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
kafkaConsumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>topics<span class="token punctuation">)</span><span class="token punctuation">;</span>

Set<span class="token operator">&lt;</span>TopicPartition<span class="token operator">></span> assignment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span>assignment<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    kafkaConsumer<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 获取消费者分区分配信息（有了分区分配信息才能开始消费）</span>
    assignment <span class="token operator">=</span> kafkaConsumer<span class="token punctuation">.</span><span class="token function">assignment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

HashMap<span class="token operator">&lt;</span>TopicPartition<span class="token punctuation">,</span> Long<span class="token operator">></span> timestampToSearch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 封装集合存储，每个分区对应一天前的数据</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>TopicPartition topicPartition <span class="token operator">:</span> assignment<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    timestampToSearch<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>topicPartition<span class="token punctuation">,</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">3600</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 获取从 1 天前开始消费的每个分区的 offset</span>
Map<span class="token operator">&lt;</span>TopicPartition<span class="token punctuation">,</span>  OffsetAndTimestamp<span class="token operator">></span>  offsets  <span class="token operator">=</span>kafkaConsumer<span class="token punctuation">.</span><span class="token function">offsetsForTimes</span><span class="token punctuation">(</span>timestampToSearch<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 遍历每个分区，对每个分区设置消费时间。</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>TopicPartition topicPartition <span class="token operator">:</span> assignment<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    OffsetAndTimestamp  offsetAndTimestamp  <span class="token operator">=</span> offsets<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>topicPartition<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 根据时间指定开始消费的位置</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>offsetAndTimestamp <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        kafkaConsumer<span class="token punctuation">.</span><span class="token function">seek</span><span class="token punctuation">(</span>topicPartition<span class="token punctuation">,</span>offsetAndTimestamp<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 3 消费该主题数据</span>
</code></pre>
<p>5.5.6 重复消费和漏消费</p>
<p>重复消费：已经消费了数据，但是 offset没提交</p>
<p>漏消费：先提交 offset后消费，有可能会造成数据的漏消费</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230521002002630.png" alt="image-20230521002002630"><figcaption>image-20230521002002630</figcaption></figure></p>
<h4 id="5-6-生产经验–消费者事务"><a href="#5-6-生产经验–消费者事务" class="headerlink" title="5.6 生产经验–消费者事务"></a>5.6 生产经验–消费者事务</h4><p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230521002127636.png" alt="image-20230521002127636"><figcaption>image-20230521002127636</figcaption></figure></p>
<h4 id="5-7-生产经验–数据积压（消费者如何提高吞吐量）"><a href="#5-7-生产经验–数据积压（消费者如何提高吞吐量）" class="headerlink" title="5.7 生产经验–数据积压（消费者如何提高吞吐量）"></a>5.7 生产经验–数据积压（消费者如何提高吞吐量）</h4><p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230521002250871.png" alt="image-20230521002250871"><figcaption>image-20230521002250871</figcaption></figure></p>
<h3 id="扩展章节–Kafka-Kraft模式"><a href="#扩展章节–Kafka-Kraft模式" class="headerlink" title="扩展章节–Kafka-Kraft模式"></a>扩展章节–Kafka-Kraft模式</h3><p><strong>Kafka-Kraft架构</strong></p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="/./%E5%85%B3%E4%BA%8E%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97Kafka%E7%9F%A5%E8%AF%86%E7%9A%84%E5%AD%A6%E4%B9%A0/image-20230521002607905.png" alt="image-20230521002607905"><figcaption>image-20230521002607905</figcaption></figure></p>
<p>左图为 Kafka 现有架构，元数据在 zookeeper（小人） 中，运行时动态选举 controller，由controller进行 Kafka 集群管理。右图为 kraft模式架构（实验性），不再依赖 zookeeper集群，而是用三台 controller节点代替 zookeeper，元数据保存在 controller中，由 controller 直接进行 Kafka集群管理。</p>
<p>这样做的好处有以下几个：</p>
<ul>
<li>Kafka 不再依赖外部框架，而是能够独立运行</li>
<li>controller管理集群时，不再需要从 zookeeper中先读取数据，集群性能上升</li>
<li>由于不依赖 zookeeper，集群扩展时不再受到 zookeeper读写能力限制</li>
<li>controller 不再动态选举，而是由配置文件规定。这样我们可以有针对性的加强controller 节点的配置，而不是像以前一样对随机 controller 节点的高负载束手无策</li>
</ul>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>算法与数据结构</title>
    <url>/2023/060851507.html</url>
    <content><![CDATA[<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="算法概念"><a href="#算法概念" class="headerlink" title="算法概念"></a>算法概念</h3><p>算法（Algorithm）：一个计算过程，解决问题的方法。Niklaus Wirth说过：“程序&#x3D;数据结构+算法”</p>
<h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>时间复杂度：用来评估算法运行效率的一个式子。一般来说，时间复杂度高的算法比复杂度低的算法慢</p>
<p>常见的时间复杂度：O(1)&lt;O(logn)&lt;O(n)</p>
<p>快速判断算法复杂度（适用于绝大多数简单情况）：</p>
<ul>
<li>确定问题规模n</li>
<li>循环减半过程-&gt;logn</li>
<li>k层关于n的循环-&gt;n**k</li>
</ul>
<p>复杂情况：根据算法执行过程判断</p>
<h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p>空间复杂度：用来评估算法内存占用大小的式子</p>
<p>空间复杂度的表示方式与实践复杂度完全一样：</p>
<ul>
<li>算法使用了几个变量：O(1)</li>
<li>算法使用了长度为n的一维列表：O(n)</li>
<li>算法使用了m行n列的二维列表：O(mn)</li>
</ul>
<p>“空间换时间”：时间比空间重要，分布式技术就是这个原理</p>
<h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>递归的两个特点：</p>
<ul>
<li>调用自身</li>
<li>结束条件</li>
</ul>
<blockquote>
<p>了解了以上概念，我们就开始真正的学习算法了！</p>
</blockquote>
<h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p>查找：在一些数据元素中，通过一定的方法找出与给定关键字相同的数据元素的过程<br>列表查找（线性表查找）：从列表中查找指定元素<br>输入：列表、待查找元素；输出：元素下标（未找到元素时一般返回None或-1）<br>内置列表查找函数：index()</p>
<h4 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h4><p>顺序查找：也叫线性查找，从列表第一个元素开始，顺序进行搜索，直到找到元素或搜索到列表最后一个元素为止</p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#线性查找</span>
<span class="token keyword">def</span> <span class="token function">linear_search</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> ind<span class="token punctuation">,</span>val <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> val <span class="token operator">==</span> value<span class="token punctuation">:</span>
            <span class="token keyword">return</span> ind
        <span class="token keyword">else</span><span class="token punctuation">:</span><span class="token keyword">return</span> None
</code></pre>
<p>时间复杂度：O(n)</p>
<h4 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h4><p>二分查找：又叫折半查找，从有序列表的初始候选区li[0:n]开始，通过对 待查找 的值与候选区中间值的比较，可以使候选区减少一般</p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#二分查找</span>
<span class="token keyword">def</span> <span class="token function">binary_search</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">:</span>
    left <span class="token operator">=</span> <span class="token number">0</span>
    right <span class="token operator">=</span> len<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#候选区有值</span>
        mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
        <span class="token keyword">if</span> li<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> val<span class="token punctuation">:</span>
            <span class="token keyword">return</span> mid
        <span class="token keyword">elif</span> li<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> val<span class="token punctuation">:</span>
            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            right <span class="token operator">=</span> mid <span class="token operator">-</span><span class="token number">1</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> None
</code></pre>
<p>时间复杂度：O(logn)</p>
<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>排序：将一组“无序”的记录序列调整为“有序”的记录序列<br>列表排序：将无序列表变为有序列表<br>输入：列表；输出：有序列表<br>升序与降序<br>内置排序函数：sort()</p>
<h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p>列表每两个相邻的数，如果前面比后面大，则交换这两个数<br>一趟排序完成后，则无序区减少一个数，有序区增加一个数</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">bubble_sort</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#第i趟，总共需要排n-1趟</span>
        exchage <span class="token operator">=</span> <span class="token boolean">False</span>     <span class="token comment" spellcheck="true">#标志位，因为后面可能在某一趟就已经排好序了，后面就不需要再执行遍历交换</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token operator">-</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#遍历无序区的数字</span>
            <span class="token keyword">if</span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> li<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                li<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>li<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> li<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>li<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
                exchage <span class="token operator">=</span> <span class="token boolean">True</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token operator">not</span> exchage<span class="token punctuation">:</span>
            <span class="token keyword">return</span>
</code></pre>
<p>时间复杂度：O(n**2)</p>
<h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><p>一趟排序记录最小的数，放到第一个位置<br>再一趟排序记录列表无序区最小的数，放到第二个位置<br>算法关键点：有序区和无序区、无序区最小数的位置</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">select_sort</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#i是第几趟</span>
        min_loc <span class="token operator">=</span> i	<span class="token comment" spellcheck="true">#初始化最小值的下标</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> li<span class="token punctuation">[</span>min_loc<span class="token punctuation">]</span><span class="token punctuation">:</span>
                min_loc <span class="token operator">=</span> j
        li<span class="token punctuation">[</span>min_loc<span class="token punctuation">]</span><span class="token punctuation">,</span>li<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> li<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>li<span class="token punctuation">[</span>min_loc<span class="token punctuation">]</span>
    <span class="token keyword">return</span> li
</code></pre>
<p>时间复杂度：O(n**2)</p>
<h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><p>初始时手里（有序区）只有一张牌<br>每次（从无序区）摸一张牌，插入到手里已有牌的正确位置</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">insert_sort</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#表示摸到的牌的下标</span>
        tmp <span class="token operator">=</span> li<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        j <span class="token operator">=</span> i<span class="token number">-1</span> <span class="token comment" spellcheck="true">#j指的是手里的牌的下标</span>
        <span class="token keyword">while</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">and</span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> tmp<span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">#右移的条件</span>
            li<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
            j <span class="token operator">-=</span> <span class="token number">1</span>
        li<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp   <span class="token comment" spellcheck="true">#插入</span>
    <span class="token keyword">return</span> li
</code></pre>
<p>时间复杂度：O(n**2)</p>
<h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p>取一个元素p（第一个元素）使元素p归位–到他该到的位置<br>列表被p分成两部分，左边都比p小，右边都比p大<br>递归左右两边完成排序</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">partition</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">:</span>
    tmp <span class="token operator">=</span> li<span class="token punctuation">[</span>left<span class="token punctuation">]</span>
    <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>
        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right <span class="token operator">and</span> li<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">>=</span> tmp<span class="token punctuation">:</span>     <span class="token comment" spellcheck="true">#从右边找比tmp小的数,这里再加一个判断left&lt;right是为了当右边全比tmp大时，可以直接跳出while循环，不再执行下面的向右走循环</span>
            right <span class="token operator">-=</span> <span class="token number">1</span>      <span class="token comment" spellcheck="true">#往左走一步</span>
        li<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> li<span class="token punctuation">[</span>right<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#把右边的值写到左边的空位上</span>
        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right <span class="token operator">and</span> li<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> tmp<span class="token punctuation">:</span>     <span class="token comment" spellcheck="true">#从左边找比tmp大的数</span>
            left <span class="token operator">+=</span> <span class="token number">1</span>       <span class="token comment" spellcheck="true">#往右走一步</span>
        li<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> li<span class="token punctuation">[</span>left<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#把左边的值写到左边的空位上</span>
    li<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> tmp      <span class="token comment" spellcheck="true">#把tmp归位</span>
    <span class="token keyword">return</span> left
    
<span class="token keyword">def</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#至少两个元素</span>
        mid <span class="token operator">=</span> partition<span class="token punctuation">(</span>li<span class="token punctuation">,</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span>
        quick_sort<span class="token punctuation">(</span>li<span class="token punctuation">,</span>left<span class="token punctuation">,</span>mid<span class="token number">-1</span><span class="token punctuation">)</span>
        quick_sort<span class="token punctuation">(</span>li<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">)</span>
</code></pre>
<p>时间复杂度：O(nlogn)</p>
<h4 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h4><h5 id="堆排序前传–树与二叉树"><a href="#堆排序前传–树与二叉树" class="headerlink" title="堆排序前传–树与二叉树"></a>堆排序前传–树与二叉树</h5><p>树是一种可以递归定义的数据结构，比如：目录结构<br>树是由n个节点组成的集合：</p>
<ul>
<li>如果n&#x3D;0，那这是一棵空树</li>
<li>如果n&gt;0，那存在1个节点作为树的根节点，其他节点可以分为m个集合，每个集合本身又是一棵树</li>
</ul>
<figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230608181705424.png" alt="image-20230608181705424" style="zoom:50%;"><figcaption>image-20230608181705424</figcaption></figure>

<blockquote>
<p>树的度：节点往下分几个叉</p>
</blockquote>
<p>二叉树：度不超过2的树<br>每个节点最多有两个孩子节点<br>两个孩子节点被区分为左孩子节点和右孩子节点</p>
<figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230608182145712.png" alt="image-20230608182145712" style="zoom:50%;"><figcaption>image-20230608182145712</figcaption></figure>

<p>满二叉树：一个二叉树，如果每一层的节点数都达到最大值，则这个二叉树就是满二叉树</p>
<figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230608182540016.png" alt="image-20230608182540016" style="zoom:50%;"><figcaption>image-20230608182540016</figcaption></figure>

<p>完全二叉树：叶节点只能出现在最下层和次下层，并且最下面一层的节点都集中在该层最左边的若干位置的二叉树</p>
<figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230608182558126.png" alt="image-20230608182558126" style="zoom:50%;"><figcaption>image-20230608182558126</figcaption></figure>

<p>二叉树的存储方式（表示方式）：</p>
<ul>
<li>链式存储方式</li>
<li>顺序存储方式</li>
</ul>
<h5 id="堆排序-1"><a href="#堆排序-1" class="headerlink" title="堆排序"></a><strong>堆排序</strong></h5><p>堆：一种特殊的完全二叉树结构<br>大根堆：一棵完全二叉树，满足任一节点都比其孩子节点大<br>小根堆：一棵完全二叉树，满足任一节点都比其孩子节点小</p>
<p>堆的<strong>向下调整</strong>：假设：节点的左右子树都是堆，但自身不是堆。当根节点的左右子树都是堆时，可以通过一次向下的调整来将其换成一个堆</p>
<p>如何进行堆排序：</p>
<ol>
<li>建立堆。</li>
<li>得到堆顶元素。</li>
<li>去掉堆顶，将堆最后一个元素放到堆顶，此时可通过一次调整重新使堆有序。</li>
<li>堆顶元素为第二大元素。</li>
<li>重复步骤3、4，直到堆空。</li>
</ol>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#向下调整过程</span>
<span class="token keyword">def</span> <span class="token function">sift</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span>low<span class="token punctuation">,</span>high<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    :param li: 列表
    :param low: 堆的根节点位置
    :param right: 堆的最后一个元素的位置
    :return:
    """</span>
    i <span class="token operator">=</span> low<span class="token comment" spellcheck="true">#i最开始指向根节点</span>
    j <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token comment" spellcheck="true">#j开始是左孩子</span>
    tmp <span class="token operator">=</span> li<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#把堆顶存起来</span>
    <span class="token keyword">while</span> j <span class="token operator">&lt;=</span> high<span class="token punctuation">:</span><span class="token comment" spellcheck="true">#如果右孩子有并且比较大</span>
        <span class="token keyword">if</span> j<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;=</span>high <span class="token operator">and</span> li<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
            j <span class="token operator">=</span> j<span class="token operator">+</span><span class="token number">1</span> <span class="token comment" spellcheck="true">#j指向右孩子</span>
        <span class="token keyword">if</span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> tmp<span class="token punctuation">:</span>
            li<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
            i <span class="token operator">=</span> j       <span class="token comment" spellcheck="true">#往下看一层</span>
            j <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>i <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">#tmp更大，把tmp放到i的位置上</span>
            li<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token comment" spellcheck="true">#把tmp放到某一级领导的位置</span>
            <span class="token keyword">break</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        li<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token comment" spellcheck="true">#把tmp放到叶子节点上的位置</span>

<span class="token comment" spellcheck="true">#实现堆排序</span>
<span class="token keyword">def</span> <span class="token function">heap_sort</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">:</span>
    n <span class="token operator">=</span> len<span class="token punctuation">(</span>li<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token number">-2</span><span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true">#i表示建堆的时候调整的部分的根的下标</span>
        sift<span class="token punctuation">(</span>li<span class="token punctuation">,</span>i<span class="token punctuation">,</span>n<span class="token number">-1</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true">#建堆完成</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true">#i指向堆的最后一个位置</span>
        li<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>li<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> li<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>li<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        sift<span class="token punctuation">(</span>li<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token number">-1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#i-1是新的high</span>
</code></pre>
<p>时间复杂度：O(nlogn)</p>
<h5 id="堆排序–内置模块"><a href="#堆排序–内置模块" class="headerlink" title="堆排序–内置模块"></a>堆排序–内置模块</h5><p>Python内置模块–heapq</p>
<p>常用函数：</p>
<ul>
<li>heapify(x)	#建堆</li>
<li>heappush(heap,item)</li>
<li>heappop(heap)</li>
</ul>
<h5 id="堆排序–topk问题"><a href="#堆排序–topk问题" class="headerlink" title="堆排序–topk问题"></a>堆排序–topk问题</h5><p>现在有n个数，设计算法得到前k大的数（k&lt;n）</p>
<p>解决思路：</p>
<p>取列表前k个元素建立一个小根堆，堆顶就是目前第k大的数<br>依次向后遍历原列表，对于列表中的元素，如果小于堆顶，则忽略该元素；如果大于堆顶，则将堆顶更换为该元素，并且对堆进行一次调整</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sift</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span>low<span class="token punctuation">,</span>high<span class="token punctuation">)</span><span class="token punctuation">:</span>
    i <span class="token operator">=</span> low
    j <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>i <span class="token operator">+</span> <span class="token number">1</span>
    tmp <span class="token operator">=</span> li<span class="token punctuation">[</span>low<span class="token punctuation">]</span>
    <span class="token keyword">while</span> j <span class="token operator">&lt;=</span> high<span class="token punctuation">:</span>
        <span class="token keyword">if</span> j <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> high <span class="token operator">and</span> li<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
            j <span class="token operator">=</span> j<span class="token operator">+</span><span class="token number">1</span>
        <span class="token keyword">if</span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> tmp<span class="token punctuation">:</span>
            li<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
            i <span class="token operator">=</span> j
            j <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>i <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">break</span>
        li<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp
        
<span class="token keyword">def</span> <span class="token function">topk</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 1、建堆</span>
    heap <span class="token operator">=</span> li<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>k<span class="token punctuation">]</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token number">-2</span><span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        sift<span class="token punctuation">(</span>heap<span class="token punctuation">,</span>i<span class="token punctuation">,</span>k<span class="token number">-1</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true">#2、遍历</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>k<span class="token punctuation">,</span>len<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> li<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> li<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
            sift<span class="token punctuation">(</span>heap<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>k<span class="token number">-1</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true">#3、出数</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>k<span class="token number">-1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> heap<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> heap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        sift<span class="token punctuation">(</span>li<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token number">-1</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> heap
</code></pre>
<p>时间复杂度：O(nlogk)</p>
<h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><p>分解：将列表约分越小，直至分成一个元素<br>终止条件：一个元素是有序的<br>合并：将两个有序列表归并，列表越来越大</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span>low<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>high<span class="token punctuation">)</span><span class="token punctuation">:</span>
    i <span class="token operator">=</span> low
    j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
    ltmp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">while</span> i<span class="token operator">&lt;=</span>mid <span class="token operator">and</span> j<span class="token operator">&lt;=</span>high<span class="token punctuation">:</span><span class="token comment" spellcheck="true">#只要左右两边都有数</span>
        <span class="token keyword">if</span> li<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
            ltmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>li<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
            i <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            ltmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>li<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
            j <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token comment" spellcheck="true">#while执行完，肯定有一部分没数了</span>
    <span class="token keyword">while</span> i <span class="token operator">&lt;=</span> mid<span class="token punctuation">:</span>
        ltmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>li<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        i <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">while</span> j <span class="token operator">&lt;=</span> high<span class="token punctuation">:</span>
        ltmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>li<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
        j <span class="token operator">+=</span> <span class="token number">1</span>
    li<span class="token punctuation">[</span>low<span class="token punctuation">:</span>high<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> ltmp

<span class="token keyword">def</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span>low<span class="token punctuation">,</span>high<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> low <span class="token operator">&lt;</span>  high<span class="token punctuation">:</span><span class="token comment" spellcheck="true">#至少有两个元素</span>
        mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
        merge_sort<span class="token punctuation">(</span>li<span class="token punctuation">,</span>low<span class="token punctuation">,</span>mid<span class="token punctuation">)</span>
        merge_sort<span class="token punctuation">(</span>li<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>high<span class="token punctuation">)</span>
        merge<span class="token punctuation">(</span>li<span class="token punctuation">,</span>low<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>high<span class="token punctuation">)</span>
</code></pre>
<p>时间复杂度：O(nlogn)</p>
<h4 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h4><p>希尔排序是一种分组插入排序算法<br>首先取一个整数d1&#x3D;n&#x2F;2，将元素分为d1个组，每组相邻量元素之间距离为d1，在各组内进行直接插入排序<br>取第二个整数d2&#x3D;d1&#x2F;2，重复上诉分组排序过程，直到di&#x3D;1，即所有元素在同一组内进行直接插入排序<br>希尔排序每趟并不使某些元素有序，而是整体数据越来越接近有序；最后一趟排序使得所有数据有序</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">insert_sort_gap</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span>gap<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>gap<span class="token punctuation">,</span>len<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#表示摸到的牌的下标</span>
        tmp <span class="token operator">=</span> li<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        j <span class="token operator">=</span> i<span class="token operator">-</span>gap <span class="token comment" spellcheck="true">#j指的是手里的牌的下标</span>
        <span class="token keyword">while</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">and</span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> tmp<span class="token punctuation">:</span><span class="token comment" spellcheck="true">#右移的条件</span>
            li<span class="token punctuation">[</span>j<span class="token operator">+</span>gap<span class="token punctuation">]</span> <span class="token operator">=</span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
            j <span class="token operator">-=</span> gap
        li<span class="token punctuation">[</span>j<span class="token operator">+</span>gap<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token comment" spellcheck="true">#插入</span>

<span class="token keyword">def</span> <span class="token function">shell_sort</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">:</span>
    d <span class="token operator">=</span> len<span class="token punctuation">(</span>li<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
    <span class="token keyword">while</span> d <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">:</span>
        insert_sort_gap<span class="token punctuation">(</span>li<span class="token punctuation">,</span>d<span class="token punctuation">)</span>
        d <span class="token operator">//=</span> <span class="token number">2</span>
</code></pre>
<h4 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h4><p>对列表进行排序，已知列表中的数范围都在0到100之间。设计时间复杂度为O(n)的算法<br>建立一个列表，下标为0~100，值为当前下标在列表中出现的次数</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">count_sort</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span>max_count<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    count <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>max_count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> val <span class="token keyword">in</span> li<span class="token punctuation">:</span>
        count<span class="token punctuation">[</span>val<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
    li<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> ind<span class="token punctuation">,</span>val <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">:</span>
            li<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ind<span class="token punctuation">)</span>
</code></pre>
<p>在计数排序中，如果元素的范围比较大（比如在1到1亿之间），如何改造算法？桶排序是一个解决方法<br>桶排序：首先将元素分在不同的桶中，再对每个桶中的元素排序<br>比如最大的数是10000，第一个桶就是0<del>100，第二个桶就是101</del>200 …</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">bucket_sort</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>max_num<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    buckets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#创建桶</span>
    <span class="token keyword">for</span> val <span class="token keyword">in</span> li<span class="token punctuation">:</span>
        i <span class="token operator">=</span> min<span class="token punctuation">(</span>val <span class="token operator">//</span> <span class="token punctuation">(</span>max_num <span class="token operator">//</span> n<span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#i表示val放到几号桶中</span>
        buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>val<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#把val加到桶里</span>
        <span class="token comment" spellcheck="true">#保持桶内的顺序</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">=</span> buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token keyword">break</span>
    sorted_li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> buc <span class="token keyword">in</span> buckets<span class="token punctuation">:</span>
        sorted_li<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>buc<span class="token punctuation">)</span>
    <span class="token keyword">return</span> sorted_li
</code></pre>
<h4 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h4><p>多关键字排序：假如现在有一个员工表，要求按照年龄排序，年龄相同的员工按照工资排序<br>先按照年龄进行排序，再按照薪资进行稳定的排序</p>
<p>数字的排序也可以看作是多关键字排序：比如两位数的数字进行比较，先比较十位，再比较个位 …</p>
<p>但是在此算法中，我们是先从最后一位开始排序，再一次排序前一位</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">radix_sort</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">:</span>
    max_num <span class="token operator">=</span> max<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#最大值 9->1位数，99->2位数，999->3位数，1000->4位数</span>
    it <span class="token operator">=</span> <span class="token number">0</span>	<span class="token comment" spellcheck="true">#位数标志符</span>
    <span class="token keyword">while</span> <span class="token number">10</span> <span class="token operator">**</span> it <span class="token operator">&lt;=</span> max_num<span class="token punctuation">:</span>
        buckets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> val <span class="token keyword">in</span> li<span class="token punctuation">:</span>
            <span class="token comment" spellcheck="true">#987 it=0 987%10->7;    it=1 987//10->98 98%10->8;  it=2 987//100->9</span>
            digit <span class="token operator">=</span> <span class="token punctuation">(</span>val <span class="token operator">//</span> <span class="token number">10</span> <span class="token operator">**</span> it<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span>
            buckets<span class="token punctuation">[</span>digit<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>val<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true">#分桶完成</span>
        li<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> buc <span class="token keyword">in</span> buckets<span class="token punctuation">:</span>
            <span class="token comment" spellcheck="true"># 把数重新写回li</span>
            li<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>buc<span class="token punctuation">)</span>
        it <span class="token operator">+=</span> <span class="token number">1</span>
</code></pre>
<p>时间复杂度：O(max_num*n)</p>
]]></content>
      <categories>
        <category>算法与数据结构</category>
      </categories>
      <tags>
        <tag>算法与数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>那些年我做过的“学习用”项目</title>
    <url>/2023/042646735.html</url>
    <content><![CDATA[<h3 id="第一个项目：离线数仓（hadoop-flume-kafka-hive）"><a href="#第一个项目：离线数仓（hadoop-flume-kafka-hive）" class="headerlink" title="第一个项目：离线数仓（hadoop+flume+kafka+hive）"></a>第一个项目：离线数仓（hadoop+flume+kafka+hive）</h3><p>数据仓库</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230426233540128.png" alt="image-20230426233540128"><figcaption>image-20230426233540128</figcaption></figure></p>
<p>系统数据流程图</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230426233006098-1682523445038-4.png" alt="image-20230426233006098"><figcaption>image-20230426233006098</figcaption></figure></p>
<p>开始就是安装需要用到的软件：<br>hadoop<br>zookeeper<br>kafka<br>flume<br>mysql<br>maxwell<br>datax<br>hive<br>dolphinscheduler<br>superset</p>
<p>设置进程启停脚本：<br>lg.sh：运行hadoop102、hadoop103上生产日志数据的jar包，并把数据写入文件app.date.log文件<br>f1.sh：启动hadoop102、hadoop03上的flume进程，采集日志数据文件app.date.log中的数据到kafka的topic_log主题<br>mxw.sh：启动hadoop102上的maxwell进程，监控mysql中指定数据库的变化（首先需要开启mysql的binlog），将变化的数据写入kafka的topic_db主题<br>f2.sh：启动hadoop104上的flume进程，采集kafka的topic_log主题中的日志数据到hdfs中<br>gen_import_config.py：datax的配置文件生成脚本<br>gen_import_config.sh：datax的批量配置文件生成脚本<br>mysql_to_hdfs_full.sh：mysql全量表数据同步至hdfs的脚本<br>f3.sh：启动hadoop104上的flume进程，采集kafka的topic_db主题中的业务数据到hdfs中<br>mysql_to_kafka_inc_init.sh：mysql增量表首次全量同步业务数据至kafka<br>cluster.sh：启动和关闭zookeeper、hadoop、kafka、采集flume–f1、日志消费flume–f2、业务消费flume–f3、maxwell<br>hdfs_to_ods_log.sh：将hdfs中的日志数据导入hive的ods层中对应的表中<br>hdfs_to_ods_db.sh：将hdfs中的业务数据导入hive的ods层中对应的表中<br>ods_to_dim_init.sh：将hive的ods层数据首日装载到dim层中<br>ods_to_dim.sh：将hive的ods层数据每日装载到dim层中<br>ods_to_dwd_init.sh：将hive的ods层数据首日装载到dwd层中<br>ods_to_dwd.sh：将hive的ods层数据每日装载到dwd层中<br>dwd_to_dws_1d_init.sh：将hive中的dwd层数据 装载dws层最近1日数据表中<br>dws_1d_to_dws_nd.sh：将hive中的dws层最近1日数据 装载到dws层最近n日数据表中<br>dws_1d_to_dws_td_init.sh：将hive中的dws层最近1日数据 首日 装载到dws层历史至今数据表中<br>dws_1d_to_dws_td.sh：将hive中的dws层最近1日数据 每日 装载到dws层历史至今数据表中<br>dws_to_ads.sh：将dws层数据装载到ads层数据表中</p>
<p>在hive中创建按层次分布的数据仓库–使用DataGrip创建</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230426230726666.png" alt="image-20230426230726666"><figcaption>image-20230426230726666</figcaption></figure></p>
<p>ADS层</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230506185735889.png" alt="image-20230506185735889"><figcaption>image-20230506185735889</figcaption></figure></p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230506185753481.png" alt="image-20230506185753481"><figcaption>image-20230506185753481</figcaption></figure></p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230426231200000.png" alt="ADS层数据"><figcaption>ADS层数据</figcaption></figure></p>
<p>DWS层</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230506185645322.png" alt="image-20230506185645322"><figcaption>image-20230506185645322</figcaption></figure></p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230506185703842.png" alt="image-20230506185703842"><figcaption>image-20230506185703842</figcaption></figure></p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/DWS%E5%B1%82%E6%95%B0%E6%8D%AE.png" alt="image-20230426231355375"><figcaption>image-20230426231355375</figcaption></figure></p>
<p>DWD层</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230506185545495.png" alt="image-20230506185545495"><figcaption>image-20230506185545495</figcaption></figure></p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230506185604987.png" alt="image-20230506185604987"><figcaption>image-20230506185604987</figcaption></figure></p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/DWD%E5%B1%82%E6%95%B0%E6%8D%AE.png" alt="image-20230426231507605"><figcaption>image-20230426231507605</figcaption></figure></p>
<p>DIM层</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230506185233492.png" alt="image-20230506185233492"><figcaption>image-20230506185233492</figcaption></figure></p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230506185504319.png" alt="image-20230506185504319"><figcaption>image-20230506185504319</figcaption></figure></p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/DIM%E5%B1%82%E6%95%B0%E6%8D%AE.png" alt="image-20230426231557848"><figcaption>image-20230426231557848</figcaption></figure></p>
<p>ODS层</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230506185132757.png" alt="image-20230506185132757"><figcaption>image-20230506185132757</figcaption></figure></p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230506185152140.png" alt="image-20230506185152140"><figcaption>image-20230506185152140</figcaption></figure></p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/ODS%E5%B1%82%E6%95%B0%E6%8D%AE.png" alt="image-20230426231637998"><figcaption>image-20230426231637998</figcaption></figure></p>
<p>将报表数据（ADS层数据）导出到MySQL–使用DataX</p>
<p>使用脚本hdfs_to_mysql.sh：将ADS层数据导入MySQL</p>
<p>启动dolphinscheduler，并通过web ui访问</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230426162836842.png" alt="image-20230426162836842"><figcaption>image-20230426162836842</figcaption></figure></p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230426162721178.png" alt="image-20230426162721178"><figcaption>image-20230426162721178</figcaption></figure></p>
<p>查看虚拟机进程</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230426164046511.png" alt="image-20230426164046511"><figcaption>image-20230426164046511</figcaption></figure></p>
<p>管理项目</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230426162905277.png" alt="image-20230426162905277"><figcaption>image-20230426162905277</figcaption></figure></p>
<p>管理工作流</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230426162936789.png" alt="image-20230426162936789"><figcaption>image-20230426162936789</figcaption></figure></p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230426163008508.png" alt="image-20230426163008508"><figcaption>image-20230426163008508</figcaption></figure></p>
<p>为每个步骤添加脚本（这些脚本就是之前在虚拟机中编写的脚本）</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230426163045722.png" alt="image-20230426163045722"><figcaption>image-20230426163045722</figcaption></figure></p>
<p>执行任务</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230426163824085.png" alt="image-20230426163824085"><figcaption>image-20230426163824085</figcaption></figure></p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230426163901535.png" alt="image-20230426163901535"><figcaption>image-20230426163901535</figcaption></figure></p>
<p>使用superset进行可视化展示</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230426164823994.png" alt="image-20230426164823994"><figcaption>image-20230426164823994</figcaption></figure></p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230426164844424.png" alt="image-20230426164844424"><figcaption>image-20230426164844424</figcaption></figure></p>
<p>编辑各类表单</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230426165147121.png" alt="image-20230426165147121"><figcaption>image-20230426165147121</figcaption></figure></p>
<p>查看离线指标看板</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230426165057382.png" alt="image-20230426165057382"><figcaption>image-20230426165057382</figcaption></figure></p>
]]></content>
      <tags>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>项目中遇到的问题以及解决办法</title>
    <url>/2023/042428729.html</url>
    <content><![CDATA[<h3 id="第一个项目：离线数仓（hadoop-flume-kafka-hive）"><a href="#第一个项目：离线数仓（hadoop-flume-kafka-hive）" class="headerlink" title="第一个项目：离线数仓（hadoop+flume+kafka+hive）"></a>第一个项目：离线数仓（hadoop+flume+kafka+hive）</h3><h3 id="第二个项目：flink实时数仓（flink-kafka-hbase-clickhouse）"><a href="#第二个项目：flink实时数仓（flink-kafka-hbase-clickhouse）" class="headerlink" title="第二个项目：flink实时数仓（flink+kafka+hbase+clickhouse）"></a>第二个项目：flink实时数仓（flink+kafka+hbase+clickhouse）</h3><blockquote>
<p>问题1：使用Maxwell实现业务数据增量同步时，Maxwell无法启动，日志报错：无法找到监控的数据库–xxx（是在MySQL中建立Maxwell元数据库之后，才创建的xxx数据库），Maxwell元数据库中无xxx数据库信息</p>
</blockquote>
<p>解决办法：删除Maxwell元数据库，直接启动Maxwell或（先在MySQL中重新创建Maxwell元数据库再启动Maxwell）  </p>
<p>问题2：</p>
<p><a href="%22%5B(21%E6%9D%A1%E6%B6%88%E6%81%AF">🪂参考文章</a> 解决Maxwell报错RuntimeException: Couldn‘t find database xxx_伯利恒教堂的博客-CSDN博客](<a class="link" href="https://blog.csdn.net/m0_46503302/article/details/129854142">https://blog.csdn.net/m0_46503302/article/details/129854142 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>)”)</p>
<hr>
<h3 id="第三个项目：spark-streaming实时商品推荐系统（大作业）"><a href="#第三个项目：spark-streaming实时商品推荐系统（大作业）" class="headerlink" title="第三个项目：spark streaming实时商品推荐系统（大作业）"></a>第三个项目：spark streaming实时商品推荐系统（大作业）</h3>]]></content>
      <tags>
        <tag>分享</tag>
      </tags>
  </entry>
</search>
