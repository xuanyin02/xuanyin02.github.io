<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hadoop面试常见问题</title>
    <url>/2023/05169473.html</url>
    <content><![CDATA[<h4 id="一-什么是Hadoop？"><a href="#一-什么是Hadoop？" class="headerlink" title="一 什么是Hadoop？"></a>一 什么是Hadoop？</h4><p>Hadoop是一个开源的分布式计算平台，可以处理大规模数据集。它由两个核心组件组成：HDFS文件系统 和 MapReduce计算框架。</p>
<h4 id="二-Hadoop的优点是什么？"><a href="#二-Hadoop的优点是什么？" class="headerlink" title="二 Hadoop的优点是什么？"></a>二 Hadoop的优点是什么？</h4><p>  可以处理大规模数据集，支持PB级别的数据存储和处理</p>
<p>  可以在廉价的硬件上运行，降低了成本</p>
<p>  可以通过数据冗余和自动故障转移来提高可靠性</p>
<p>  可以通过水平扩展来提高性能</p>
<p>  可以通过MapReduce计算框架来处理复杂的数据分析任务</p>
<h4 id="三-Hadoop的工作流程是什么？"><a href="#三-Hadoop的工作流程是什么？" class="headerlink" title="三 Hadoop的工作流程是什么？"></a>三 Hadoop的工作流程是什么？</h4><p>  数据被分割成块并存储在HDFS中</p>
<p>  MapReduce框架将任务分配给集群中的节点</p>
<p>  每个节点运行Map任务来处理数据块</p>
<p>  Map任务输出键值对，这些键值对被shuffle后传递给Reduce任务</p>
<p>  Reduce任务对键值对进行聚合和处理，并将结果写回HDFS</p>
<h4 id="四-Hadoop的数据复制是如何实现的？–涉及HDFS数据写入流程"><a href="#四-Hadoop的数据复制是如何实现的？–涉及HDFS数据写入流程" class="headerlink" title="四 Hadoop的数据复制是如何实现的？–涉及HDFS数据写入流程"></a>四 Hadoop的数据复制是如何实现的？–涉及HDFS数据写入流程</h4><p>  Hadoop是数据复制是通过HDFS实现的，当数据被写入HDFS时，它被分成块并复制到多个节点上。默认情况下，每个块会被复制到三个节点上，以提高数据的可靠性。如果一个节点失效，HDFS会自动将数据块复制到其他节点上，以保证数据的可用性。</p>
<h4 id="五-Hadoop是数据压缩是如何实现的？"><a href="#五-Hadoop是数据压缩是如何实现的？" class="headerlink" title="五 Hadoop是数据压缩是如何实现的？"></a>五 Hadoop是数据压缩是如何实现的？</h4><p>  Hadoop是数据压缩是通过MapReduce框架中的压缩器实现的。压缩器可以在Map和Reduce任务之间压缩和解压缩数据。Hadoop支持多种压缩算法，包括Gzip、Bzip2和Snappy等。</p>
<h4 id="六-Hadoop的数据安全是如何实现的？"><a href="#六-Hadoop的数据安全是如何实现的？" class="headerlink" title="六 Hadoop的数据安全是如何实现的？"></a>六 Hadoop的数据安全是如何实现的？</h4><p>  Hadoop的数据安全是通过HDFS中的访问控制列表（ACL）和MapReduce框架中的用户身份验证实现的。ACL可以控制对HDFS中文件和目录的访问权限。MapReduce框架可以通过用户身份验证来确保只有授权用户才能运行作业。</p>
<h4 id="七-Hadoop的调优技巧有哪些？"><a href="#七-Hadoop的调优技巧有哪些？" class="headerlink" title="七 Hadoop的调优技巧有哪些？"></a>七 Hadoop的调优技巧有哪些？</h4><p>  增加节点数：通过增加节点数来提高性能</p>
<p>  调整块大小：通过调整块大小来提高性能</p>
<p>  使用压缩：通过使用压缩来减少数据传输量和磁盘空间</p>
<p>  调整内存和CPU：通过调整内存和CPU来提高性能</p>
<p>  使用本地磁盘：通过使用本地磁盘来提高性能</p>
<p>  避免数据倾斜：通过避免数据倾斜来提高性能</p>
<h4 id="八-Hadoop是常见问题有哪些？"><a href="#八-Hadoop是常见问题有哪些？" class="headerlink" title="八 Hadoop是常见问题有哪些？"></a>八 Hadoop是常见问题有哪些？</h4><p>  数据倾斜：当数据分布不均匀时，会导致某些节点的负载过重，从而影响性能</p>
<p>  网络带宽限制：当集群中的节点之间的网络带宽不足时，会影响性能</p>
<p>  硬件故障：当节点硬件故障时，会影响数据可靠性和性能</p>
<p>  数据丢失：当数据丢失时，会影响数据可靠性和性能</p>
<p>  安全问题：当Hadoop集群存在安全漏洞时，会影响数据安全性和性能</p>
<h4 id="九-如何解决Hadoop是常见问题？"><a href="#九-如何解决Hadoop是常见问题？" class="headerlink" title="九 如何解决Hadoop是常见问题？"></a>九 如何解决Hadoop是常见问题？</h4><p>  数据倾斜：通过数据预处理、数据分区和数据复制等方法来避免数据倾斜</p>
<p>  网络带宽限制：通过增加网络带宽、优化数据传输和调整数据块大小等方法来解决网络带宽限制问题</p>
<p>  硬件故障：通过使用冗余节点、自动故障转移和备份等方法来提高数据可靠性</p>
<p>  数据丢失：通过使用数据备份、数据恢复和数据冗余等方法来提高数据可靠性</p>
<p>  安全问题：通过使用访问控制列表、用户身份验证和加密等方法来提高数据安全性</p>
<h4 id="十-请说下HDFS读写流程"><a href="#十-请说下HDFS读写流程" class="headerlink" title="十 请说下HDFS读写流程"></a>十 请说下HDFS读写流程</h4><p>HDFS写流程：</p>
<ol>
<li>Client发送上传请求，通过RPC与NameNode建立通信，NameNode检查用户是否有上传权限，以及上传的文件是否在HDFS对应的目录下不重名，如果这两者有任意一个不满足，则直接报错，如果两者都满足，则返回给客户端一个可以上传的信息；</li>
<li>Client根据文件的大小进行切分，默认128M一块，切分完成之后给NameNode发送请求第一个block块上传到哪些服务器上；</li>
<li>NameNode收到请求之后，根据网络拓扑和机架感知以及副本机制进行文件分配，返回可用的DataNode的地址；</li>
<li>Cilent收到地址之后与服务器地址列表中的一个节点如A进行通信，本质上就是RPC调用，建立pipeline，A收到请求后会继续调用B，B再调用C，将整个pipeline建立完成，逐级返回Client；</li>
<li>Cilent开始向A上发送第一个block（先从磁盘读取数据然后放到本地缓存），以packet（数据包，64kb）为单位，A收到一个packet就会发送给B，然后B发送给C，A每传完一个packet就会放入一个应答队列等待应答；</li>
<li>数据被分隔成一个个的packet数据包在pipeline上依次传输，在pipeline反向传输中，逐个发送ack（命令正确应答），最终由pipeline中第一个DataNode节点A将pipeline ack发送给Cilent；</li>
<li>当一个block传输完成之后，Client再次请求NameNode上传第二个block，NameNode重新选择三台DataNode给Client。</li>
</ol>
<p>HDFS读流程：</p>
<ol>
<li>Client向NameNode发送RPC请求，请求block的位置；</li>
<li>NameNode收到请求之后会检查用户权限以及是否有这个文件，如果都符合，则会视情况返回部分或全部的block列表，对于每个block，NameNode都会返回含有该block副本的DataNode地址；这些返回的DataNode地址，会按照集群拓扑结构得出DataNode与客户端的距离，然后进行排序，排序两个规则：网络拓扑结构中距离Client近的排靠前；心跳机制中超时汇报的DataNode状态为STALE，这样的排靠后；</li>
<li>Client选取排序靠前的DataNode来读取block，如果Client本身就是DataNode，那么将从本地直接获取数据（短路读取特性）；</li>
<li>底层本质上是建立Socket Stream（FSDataInputStream），重复的调用父类DataInputStream的read方法，知道这个块上的数据读取完毕；</li>
<li>当读完列表的block后，若文件读取还没有结束，Client会继续向NameNode获取下一批的block列表；</li>
<li>读取完一个block都会进行checksum验证，如果读取DataNode时出现错误，Client会通知NameNode，然后再从下一个拥有该block副本的DataNode继续读；</li>
<li>read方法是并行的读取block信息，不是一块一块的读取；NameNode只是返回Client请求包含块的DataNode地址，并不是返回请求块是数据；</li>
<li>最终读取来所有的block会合并成一个完整的最终文件。</li>
</ol>
<h4 id="十一-HDFS在读取文件的时候，如果其中一个块突然损坏了怎么办？"><a href="#十一-HDFS在读取文件的时候，如果其中一个块突然损坏了怎么办？" class="headerlink" title="十一 HDFS在读取文件的时候，如果其中一个块突然损坏了怎么办？"></a>十一 HDFS在读取文件的时候，如果其中一个块突然损坏了怎么办？</h4><p>  Cilent读取完DataNode上的块之后会进行checksum验证，也就是把客户端读取到本地的块与HDFS上的原始块进行校验，如果发现校验结果不一致，客户端会通知NameNode，然后再从下一个拥有该block副本的DataNode继续读。</p>
<h4 id="十二-HDFS在上传文件的时候，如果其中一个DataNode突然挂掉了怎么办？"><a href="#十二-HDFS在上传文件的时候，如果其中一个DataNode突然挂掉了怎么办？" class="headerlink" title="十二 HDFS在上传文件的时候，如果其中一个DataNode突然挂掉了怎么办？"></a>十二 HDFS在上传文件的时候，如果其中一个DataNode突然挂掉了怎么办？</h4><p>  客户端上传文件时与DataNode建立pipeline管道，管道的正方向是客户端向DataNode发送的数据包，管道反方向是DataNode向客户端发送ack确认，也就是正确接收到数据包之后发送一个已确认接收到的应答。</p>
<p>  当DataNode突然挂掉了，客户端接收不到这个DataNode发送的ack确认，客户端会通知NameNode，NameNode检查该块的副本与规定的不符，NameNode会通知DataNode去复制副本，并将挂掉的DataNode做下线处理，不再让它参与文件上传与下载。</p>
<h4 id="十三-NameNode在启动的时候会做哪些操作？"><a href="#十三-NameNode在启动的时候会做哪些操作？" class="headerlink" title="十三 NameNode在启动的时候会做哪些操作？"></a>十三 NameNode在启动的时候会做哪些操作？</h4><p>NameNode数据存储在内存和本地磁盘，本地磁盘数据存储在fsimage镜像文件和edits编辑日志文件。</p>
<p>首次启动NameNode：</p>
<ol>
<li><p>格式化文件系统，为了生成fsimage镜像文件</p>
</li>
<li><p>启动NameNode：</p>
<ol>
<li>读取fsimage文件，将文件内容加载进内容</li>
<li>等待DataNode注册与发送block report</li>
</ol>
</li>
<li><p>启动DataNode：</p>
<ol>
<li>向NameNode注册</li>
<li>发送block report</li>
<li>检查fsimage中记录的块的数量和block report中的块是总数是否相同</li>
</ol>
</li>
<li><p>对文件系统进行操作（创建目录、上传文件、删除文件等）：</p>
<p>此时内存中已经有文件系统改变的信息，但是磁盘中没有文件系统改变的信息，此时会将这些改变信息写入edits中，edits文件中存储的是文件系统元数据改变的信息</p>
</li>
</ol>
<p>第二次启动NameNode：</p>
<ol>
<li>读取fsimage和edits文件；</li>
<li>将fsimage和edits文件合并成新的fsimage文件；</li>
<li>创建新的edits文件，内容开始为空；</li>
<li>启动DataNode</li>
</ol>
<h4 id="十四-谈谈对Secondary-NameNode的了解，它的工作机制是怎样的？"><a href="#十四-谈谈对Secondary-NameNode的了解，它的工作机制是怎样的？" class="headerlink" title="十四 谈谈对Secondary NameNode的了解，它的工作机制是怎样的？"></a>十四 谈谈对Secondary NameNode的了解，它的工作机制是怎样的？</h4><p>Secondary NameNode是合并NameNode的edits logs到fsimage文件中。</p>
<p>它的具体工作机制：</p>
<ol>
<li>Secondary NameNode询问NameNode是否需要checkpoint。直接带回结果；</li>
<li>Secondary NameNode请求执行checkpoint；</li>
<li>NameNode滚动正在写的edits日志；</li>
<li>将滚动前的edits日志和fsimage镜像文件拷贝到Secondary NameNode；</li>
<li>Secondary NameNode加载edits日志和fsimage镜像文件到内存，并合并；</li>
<li>生成新的镜像文件fsimage.checkpoint；</li>
<li>拷贝到fsimage.checkpoint到NameNode；</li>
<li>NameNode将fsimage.checkpoint重新命名成fsimage；</li>
</ol>
<p>所以如果NameNode中的元数据丢失，是可以从Secondary NameNode恢复一部分元数据信息的，但不是全部，因为NaneNode正在写的edits日志还没有拷贝到Secondary NameNode，这部分恢复不了。</p>
<h4 id="十五-Secondary-NameNode不能恢复NameNode的全部数据，那如何保证NameNode数据存储安全？"><a href="#十五-Secondary-NameNode不能恢复NameNode的全部数据，那如何保证NameNode数据存储安全？" class="headerlink" title="十五 Secondary NameNode不能恢复NameNode的全部数据，那如何保证NameNode数据存储安全？"></a>十五 Secondary NameNode不能恢复NameNode的全部数据，那如何保证NameNode数据存储安全？</h4><p>这个问题就要说NameNode的高可用了，即NameNode HA。</p>
<p>一个NameNode有单点故障问题，那就配置两个NameNode，配置有两个关键点，一是必须要保证这两个NameNode的元数据信息必须要同步的，二是一个NameNode挂掉之后另一个要立马补上。</p>
<ol>
<li>元数据信息同步在HA方案中采用的是“共享存储”。每次写文件时，需要将日志同步写入共享存储，这个步骤成功才能认定写文件成功。然后备份节点定期从共享存储同步日志，以便进行主备切换。</li>
<li>监控NameNode状态采用zookeeper，两个NameNode节点的状态存放在zookeeper中，另外，两个NameNode节点分别有一个进程监控程序–ZKFC，实时读取zookeeper中NameNode的状态，来判断当前的NameNode是不是已经宕机。如果Standby的NameNode节点的ZKFC发现主节点已经挂掉，那么就会强制给原本的Active NameNode节点发送强制关闭请求，之后将Standby的NameNode设置为Active。</li>
</ol>
<h4 id="十六-在NameNode-HA中，会出现脑裂问题吗？怎么解决脑裂？"><a href="#十六-在NameNode-HA中，会出现脑裂问题吗？怎么解决脑裂？" class="headerlink" title="十六 在NameNode HA中，会出现脑裂问题吗？怎么解决脑裂？"></a>十六 在NameNode HA中，会出现脑裂问题吗？怎么解决脑裂？</h4><p>会出现脑裂问题：假设 NameNode1 当前为 Active 状态，NameNode2 当前为 Standby 状态。如果某一时刻 NameNode1 发生了“假死”现象（在进行垃圾回收时 和 网络延迟大时 可能发生），那么 Zookeeper 服务端会认为 NameNode1 挂掉了，根据前面的主备切换逻辑，NameNode2 会替代 NameNode1 进入 Active 状态。但是此时 NameNode1 可能仍然处于 Active 状态正常运行，这样 NameNode1 和 NameNode2 都处于 Active 状态，都可以对外提供服务。这种情况称为脑裂。</p>
<p>脑裂对于NameNode这类对数据一致性要求非常高的系统来说是灾难性的，数据会发生错乱且无法恢复。zookeeper社区对这种问题的解决方法叫做fencing（隔离），也就是想办法把旧是Active NameNode隔离起来，使它不能正常对外提供服务。</p>
<p>在进行fencing的时候，会执行以下操作：</p>
<ol>
<li>首先尝试调用这个旧Active NameNode的HAServiceProtocol RPC接口的transition ToStandby方法，看能不能把它转换为Standby状态。</li>
<li>如果失败，那么就执行Hadoop配置文件之中预定义的隔离措施，Hadoop目前主要提供两种隔离措施，通常会选择sshfence：<ol>
<li>sshfence：通过SSH登录到目标机器上，执行命令fuser将对应的进程杀死；</li>
<li>shellfence：执行一个用户自定义的shell脚本来将对应的进程隔离。</li>
</ol>
</li>
</ol>
<h4 id="十七-小文件过多会有什么危害，如何避免？"><a href="#十七-小文件过多会有什么危害，如何避免？" class="headerlink" title="十七 小文件过多会有什么危害，如何避免？"></a>十七 小文件过多会有什么危害，如何避免？</h4><p>Hadoop上大量HDFS元数据信息存储在NameNode内存中，因此过多的小文件必定会压垮NameNode的内存。</p>
<p>每个元数据对象约占50byte，所以如果有1千万个小文件，每个文件占用一个block，则NameNode大约需要2G空间。如果存储1亿个文件，则NameNode需要20G空间。</p>
<p>显而易见的解决这个问腿的方法就是合并小文件，可以选择在客户端上传时执行一定的策略先合并，或者是使用Hadoop的CombineFileInputFormat&lt;K,V&gt;实现小文件的合并。</p>
<h4 id="十八-请说下HDFS的组织架构"><a href="#十八-请说下HDFS的组织架构" class="headerlink" title="十八 请说下HDFS的组织架构"></a>十八 请说下HDFS的组织架构</h4><ol>
<li>Client：客户端<ol>
<li>切分文件。文件上传HDFS的时候，Client将文件切分成一个一个的Block，然后进行存储</li>
<li>与NameNode交互，获取文件的位置信息</li>
<li>与DataNode交互，读取或者写入数据</li>
<li>Client提供一些命令来管理HDFS，比如启动关闭HDFS、访问HDFS目录及内容（hdfs dfs -ls &#x2F;）等</li>
</ol>
</li>
<li>NameNode：名称节点，也称主节点，存储数据的元数据信息，不存储具体的数据<ol>
<li>管理HDFS的名称空间</li>
<li>管理数据块映射信息</li>
<li>配置副本策略</li>
<li>处理客户端读写请求</li>
</ol>
</li>
<li>DataNode：数据节点，也称从节点。NameNode下达命令，DataNode执行实际的操作<ol>
<li>存储实际的数据块</li>
<li>执行数据块的读&#x2F;写操作</li>
</ol>
</li>
<li>Secondary NameNode：并非NameNode的热备。当NameNode挂掉的时候，它并不能马上替换NameNode并提供服务<ol>
<li>辅助NameNode，分担其工作量</li>
<li>定期合并Fsimage和Edits，并推送给NameNode</li>
<li>在紧急情况下，可辅助恢复NameNode</li>
</ol>
</li>
</ol>
<h4 id="十九-请说下MR中的Map-Task的工作机制"><a href="#十九-请说下MR中的Map-Task的工作机制" class="headerlink" title="十九 请说下MR中的Map Task的工作机制"></a>十九 请说下MR中的Map Task的工作机制</h4><p>简单概述：</p>
<p>inputFile通过split被切割为多个split文件，通过Record按行读取内容给map（自己写的处理逻辑的方法），数据被map处理完之后，交给OutputCollect收集器，对其结果key进行分区（默认使用的hashPartitioner），然后写入buffer，每个map task都有一个内存缓冲区（环形缓冲区），存放着map的输出结果，当缓冲区快满的时候需要将缓冲区的数据以一个临时文件的方式溢写到磁盘，当整个map task结束后再对磁盘中这个map task产生的所有临时文件做合并，生成最终的正式输出文件，然后等待reduce task的拉取。</p>
<p>详细步骤：</p>
<ol>
<li>读取数据组件 InputFormat（默认 TextInputFormat）会通过 getSplits 方法对输入目录中的文件进行逻辑切片规划得到InputSplit，有多少个InputSplit就对应启动多少个map task</li>
<li>将输入文件切分为InputSplit之后，由RecordReader对象（默认是LineRecordReader）进行读取，以 \n 作为分隔符，读取一行数据，返回&lt;key,value&gt;，key表示每行首字符偏移量，value表示这一行文本内容</li>
<li>读取InputSplit返回&lt;key,value&gt;，进入用户自己继承的Mapper类中，执行用户重写的map函数，RecordReader读取一行这里调用一次</li>
<li>Mapper逻辑结束之后，将Mapper的每条结果通过 context.write进行collect数据收集。在collect中，会先对其进行分区处理，默认使用HashPartitioner</li>
<li>接下来，会将数据写入内存，内存中这片区域叫做环形缓冲区（默认100M），缓冲区的作用是批量收集Mapper结果，减少磁盘IO的影响。我们的key&#x2F;value键值对以及Partition的结果都会被写入缓冲区。当然，写入之前，key与value值都会被序列化成字节数组</li>
<li>当环形缓冲区的数据达到溢写比例（默认0.8），也就是80M时，溢写线程启动，需要对这80M空间内的数据做排序和合并。排序是MR模型默认的行为，这里的排序也是对序列化的字节做的排序</li>
<li>合并溢写文件，每次溢写会在磁盘上生成一个临时溢出文件（写之前判断是否有Combiner），如果Mapper的输出结果真的很大，有多次这样的溢写发生，磁盘上相应的就会有多个临时溢出文件存在。当整个数据处理结束之后开始对磁盘中的所有临时文件进行Merge归并、排序，因为最终的文件只有一个写入磁盘，并且为这个文件提供了一个索引文件，以记录每个reduce对应数据的偏移量</li>
</ol>
<h4 id="二十-请说下MR中Reduce-Task的工作机制"><a href="#二十-请说下MR中Reduce-Task的工作机制" class="headerlink" title="二十 请说下MR中Reduce Task的工作机制"></a>二十 请说下MR中Reduce Task的工作机制</h4><p>简单描述：</p>
<p>Reduce大致分为copy、sort、reduce三个阶段，重点在前两个阶段</p>
<p>copy阶段包含一个eventFetcher来获取已完成的map列表，由Fetcher线程去copy数据，在此过程中启动两个merge线程，分别为inMemoryMerger和onDiskMerger，分别将内存中的数据merge到磁盘和磁盘中是数据进行merge。待数据copy完成之后，copy阶段就完成了。</p>
<p>开始sort阶段，sort阶段主要是执行finalMerge操作，纯粹的sort阶段，完成之后就是reduce阶段，调用用户定义的reduce函数进行处理</p>
<p>详细步骤：</p>
<ol>
<li><p>Copy阶段：简单地拉取数据。Reduce进程启动一些数据copy线程（Fetcher），通过HTTP方式请求map task获取属于自己的文件（map task的分区会标识每个map task属于哪个reduce task，默认reduce task的标识从0开始）</p>
</li>
<li><p>Merge阶段：在远程拷贝数据的同时，Reduce Task启动了两个后台线程对内存和磁盘上的文件进行合并，以防止内存使用过多或磁盘文件过多</p>
<p>merge有三种形式：内存到内存；内存到磁盘；磁盘到磁盘。默认情况下第一种形式不启用。当内存中的数据量到达一定阈值，就直接启动内存到磁盘的merge。与map端类似，这也是溢写的过程，这个过程中如果你设置有Combiner，也是会启用的，然后在磁盘中生成了众多的溢写文件。内存到磁盘的merge方式一直在运行，直到没有map端的数据时才结束，然后启动第三种磁盘到磁盘的merge方式生成最终的文件</p>
</li>
<li><p>合并排序：把分散的数据合并成一个大的数据后，还会再对合并后的数据排序</p>
</li>
<li><p>对排序后的键值对调用reduce方法：键相等的键值对调用一次reduce方法，每次调用会产生零个或者多个键值对，最后把这些输出的键值对写入到HDFS文件中</p>
</li>
</ol>
<h4 id="二十一-请说下MR中的shuffle阶段"><a href="#二十一-请说下MR中的shuffle阶段" class="headerlink" title="二十一 请说下MR中的shuffle阶段"></a>二十一 请说下MR中的shuffle阶段</h4><p>shuffle阶段分为四个步骤：分区、排序、规约、分组，其中前三个步骤在map阶段完成，最后一个步骤在reduce阶段完成</p>
<p>shuffle是MR的核心，它分布在MR的map阶段和reduce阶段。一般把从map产生输出开始到reduce取得数据作为输入之前的过程称作shuffle</p>
<ol>
<li>Collect阶段：将Map Task的结果输出到默认为100M的环形缓冲区，保存的是key&#x2F;value，Partition分区信息等</li>
<li>Spill阶段：当内存中的数据量达到一定的阈值的时候，就会将数据写入本地磁盘，在将数据写入磁盘之前需要对数据进行一次排序的操作，如果配置了Combiner，还会将有相同分区号和key的数据进行排序</li>
<li>Map Task阶段的Merge：把所有溢出的临时文件进行一次合并操作，以确保一个Map Task最终只产生一个中间数据文件</li>
<li>Copy阶段：Reduce Task启动Fetcher线程到已完成Map Task的节点上复制一份属于自己的数据，这些数据默认会保存在内存的缓冲区中，当内存的缓冲区达到一定阈值的时候，就会将数据写到磁盘上</li>
<li>Reduce Task阶段的Merge：在Reduce Task远程复制数据的同时，会在后台开启两个线程对内存到本地的数据文件进行合并操作</li>
<li>Sort阶段：在对数据进行合并的同时，会进行排序操作，由于Map Task阶段已经对数据进行了局部的排序，Reduce Task只需保证copy的数据的最终整体有效性即可</li>
</ol>
<p>Shuffle中的缓冲区大小会影响到MR程序的执行效率，原则上说，缓冲区越大，磁盘io的次数越少，执行速度越快。缓冲区的大小可以通过参数调整，参数：mapreduce.task.io.sort.mb 默认100M</p>
<h4 id="二十二-shuffle阶段的数据压缩机制了解吗？"><a href="#二十二-shuffle阶段的数据压缩机制了解吗？" class="headerlink" title="二十二 shuffle阶段的数据压缩机制了解吗？"></a>二十二 shuffle阶段的数据压缩机制了解吗？</h4><p>在shuffle阶段，可以看到数据通过大量拷贝，从map阶段输出的数据，都要通过网络拷贝，发送到reduce阶段，这一过程中，涉及到大量的网络IO，如果数据能够进行压缩，那么数据的发送量就会少很多</p>
<p>hadoop当中支持的压缩算法：gzip、bzip2、LZO、LZ4、Snappy，这几种压缩算法综合压缩和解压缩的速率，谷歌的Snappy是最优的，一般都选择Snappy压缩。</p>
<h4 id="二十三-在写MR时，什么情况下可以使用规约？"><a href="#二十三-在写MR时，什么情况下可以使用规约？" class="headerlink" title="二十三 在写MR时，什么情况下可以使用规约？"></a>二十三 在写MR时，什么情况下可以使用规约？</h4><p>规约（Combiner）是不能够影响任务的运行结果的局部汇总，适用于求和类，不适用于求平均值，如果reduce的输入参数类型和输出参数的类型是一样的，则规约的类可以使用reduce类，只需要在驱动类中指明规约的类即可</p>
<h4 id="二十四-YARN集群的架构和工作原理知道多少？"><a href="#二十四-YARN集群的架构和工作原理知道多少？" class="headerlink" title="二十四 YARN集群的架构和工作原理知道多少？"></a>二十四 YARN集群的架构和工作原理知道多少？</h4><p>YARN的基本设计思想是将MapReduce V1中的JobTracker拆分为两个独立的服务：ResourceManager和ApplicationMaster</p>
<p>ResourceManager负责整个系统的资源管理和分配，ApplicationMaster负责单个应用程序的管理</p>
<ol>
<li><p>ResourceManager：RM是一个全局的资源管理器，负责整个系统的资源管理和分配，它由两个部分组成：调度器（Scheduler）和应用程序管理器（Application Manager）</p>
<p>调度器根据容量、队列等限制条件，将系统中的资源分配给正在运行的应用程序，在保证容量、公平性和服务等级的前提下，优化集群资源利用率，让所有的资源都被充分利用。应用程序管理器负责管理整个系统中是所有的应用程序，包括应用程序的提交、与调度器协商资源以启动ApplicationMaster、监控ApplicationMaster运行状态并在失败时重启它。</p>
</li>
<li><p>ApplicationMaster：用户提交的一个应用程序会ApplicationMaster，它的主要功能有：</p>
<ol>
<li>与RM调度器协商以获得资源，资源以Container表示</li>
<li>将得到的任务进一步分配给内部的任务</li>
<li>与NM通信与启动&#x2F;停止任务</li>
<li>监控所有的内部任务状态，并在任务运行失败的时候重新为任务申请资源以重启任务</li>
</ol>
</li>
<li><p>NodeManager：NodeManager是每个节点上的资源和任务管理器，一方面，它会定期地向RM汇报本节点上的资源使用情况和各个Container的运行状态；另一方面，他接收并处理来自AM的Container启动和停止请求</p>
</li>
<li><p>Container：Container是YARN中的资源抽象，封装了各种资源。一个应用程序会分配一个Container，这个应用程序只能使用Container中描述的资源。不同于MapReduce V1中槽位solt的资源封装，Container是一个动态资源的划分单位，更能充分利用资源。</p>
</li>
</ol>
<h4 id="二十五-YARN的任务提交流程是怎样的？"><a href="#二十五-YARN的任务提交流程是怎样的？" class="headerlink" title="二十五 YARN的任务提交流程是怎样的？"></a>二十五 YARN的任务提交流程是怎样的？</h4><p>当JobClient向YARN提交一个应用程序后，YARN将分两个阶段运行这个应用程序：一是启动ApplicationMaster；二是由ApplicationMaster创建应用程序，为它申请资源，监控运行直到结束。具体步骤如下：</p>
<ol>
<li>用户向YARN提交一个应用程序，并指定ApplicationMaster程序、启动ApplicationMaster、用户程序</li>
<li>RM为这个应用程序分配第一个Container，并与之对应的NM通讯，要求他在这个Container中启动应用程序ApplicationMaster</li>
<li>ApplicationMaster向RM注册，然后拆分为内部各个子任务，为各个内部任务申请资源，并监控这些任务的运行，直到结束</li>
<li>AM采用轮询的方式向RM申请和领取资源</li>
<li>RM为AM分配资源，以Container形式返回</li>
<li>AM申请到资源后，便与之对应的NM通讯，要求NM启动任务</li>
<li>NodeManager为任务设置好运行环境，将任务启动命令写到一个脚本中，并通过运行这个脚本启动任务</li>
<li>各个任务向AM汇报自己的状态和进度，以便当任务失败时可以重启任务</li>
<li>应用程序完成后，ApplicationMaster向ResourceManager注销并关闭自己</li>
</ol>
<h4 id="二十六-YARN的资源调度三种模型了解吗？"><a href="#二十六-YARN的资源调度三种模型了解吗？" class="headerlink" title="二十六 YARN的资源调度三种模型了解吗？"></a>二十六 YARN的资源调度三种模型了解吗？</h4><p>在YARN中有三种调度器可以选择：FIFO Scheduler、Capacity Scheduler、Fair Scheduler</p>
<p>Apache版本的hadoop默认使用的是Capacity Scheduler调度方式。CDH版本的默认使用的是Fair Scheduler调度方式</p>
<p>FIFO Scheduler（先来先服务）：</p>
<p>FIFO Scheduler把应用按提交的顺序排成一个队列，这是一个先进先出队列，在进行资源分配的时候，先给队列中最头上的应用分配资源，待最头上的应用需求满足后再给下一个分配</p>
<p>FIFO Scheduler是最简单也是最容易理解的调度器，也不需要任何配置，但它并不适用于共享集群。大的应用可能会占用所有集群资源，这就导致其他应用被阻塞。</p>
<p>Capacity Scheduler（能力调度器）：</p>
<p>对于Capacity调度器，有一个专门的队列用来运行小任务，但是为小任务专门设置一个队列会预先占用一定的集群资源，这就导致大任务的执行时间会落后于使用FIFO Scheduler调度器时的时间</p>
<p>Fair Scheduler（公平调度器）：</p>
<p>在Fair调度器中，我们不需要预先占用一定的系统资源，Fair调度器会为所有的job动态的调整系统资源</p>
<p>比如：当第一个大job提交时，只有这一个job在运行，此时它获得了所有集群资源；当第二个小job提交后，Fair调度器会分配一般资源给这个小job，让这两个任务公平的共享集群资源</p>
<p>需要注意的是，在Fair调度器中，第二个任务提交到获得资源会有一定延迟，因为它需要等待第一个任务释放占用的Container。小人物执行完成之后，也会释放自己占用的资源，大人物又获得了全部的系统资源。最终的效果就是Fair调度器即得到了高的资源利用率又能保证小人物及时完成。</p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>WEB前端基础知识的学习</title>
    <url>/2023/04196383.html</url>
    <content><![CDATA[<h2 id="关于”WEB前端“基础知识的学习"><a href="#关于”WEB前端“基础知识的学习" class="headerlink" title="关于”WEB前端“基础知识的学习"></a>关于”WEB前端“基础知识的学习</h2><p>​				你也许会问为什么我会学习前端呢？难道是想成为一个全栈程序员，成为别人眼中的大佬？NO NO NO. 虽然我也想成为一个全栈程序员，更想成为大佬，但是目前–2023年4月18日21点37分42秒，学习前端只是为了满足课程基本要求。下面我将分享在学习前端基础时记的笔记。（此次课程学习了HTML+CSS+JavaScript，以及jQuery和Ajax）</p>
<h3 id="HTML："><a href="#HTML：" class="headerlink" title="HTML："></a>HTML：</h3><blockquote>
<p>网页的基本结构：</p>
</blockquote>
<pre class=" language-html"><code class="language-html">head是网页的头部，head中的内容不会在网页中直接出现，主要用来帮助浏览器或搜索引擎来解析网页
    titile中的内容会显示在浏览器的标题栏，搜索引擎会主要根据title中的内容来判断网页主要内容
    meta主要用于设置网页的一些元数据，元数据不是给用户看
            charset 指定网页的字符集
            name    指定数据的名称
            content 指定的数据内容
            keywords 表示网站的关键字，可以同时指定多个关键字，关键字间使用，隔开
            description 用于指定网站的描述
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>HTML5,CSS,前端<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>这是一个非常不错的网站<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>refresh<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3;url<span class="token punctuation">=</span>https://www.baidu.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>	//页面将在3秒后重定向到百度网
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>meta<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>	//title标签的内容会作为搜索结果的超链接上的文字显示
body是html的子元素，表示网页的主体，网页中所有的可见内容都应该写在body里
    h1网页的一级标题
</code></pre>
<blockquote>
<p>网页标签属性：</p>
</blockquote>
<pre class=" language-html"><code class="language-html">属性，在标签中（开始标签或自结束标签）还可以设置属性
        属性是一个键值对（x=y）
        属性用来设置标签中的内容如何显示
        
        属性和标签名或其他属性应该使用空格隔开
        属性不能瞎写，应该根据文档中的规定来编写
        有些属性有属性值，有些没有。如果有属性值，属性值应该使用引号引起来
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>这是我的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>第三个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span>网页！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
</code></pre>
<blockquote>
<p>语义化标签：</p>
</blockquote>
<pre><code>在网页中HTML专门用来负责网页的结构，所以在使用HTML标签时，应该关注的是标签的语义，而不是它的样式
块元素（block element）
    -在网页中一般通过块元素来对页面进行布局
行内元素（inline element）
    -行内元素主要用来包裹文字

    -一般情况下会在块元素中放行内元素，而不会在行内元素中放块元素
    -块元素中基本什么都能放
    -p元素中不能放任何的块

浏览器在解析网页时，会自动对网页中不符合规范的内容进行修正
    比如：
        标签写在了根元素的外部
        p元素中嵌套了块元素
        根元素中出现了head和body以外的子元素
       ...
常见块级元素：
   div、form、h1~h6、hr、p（标识段落）、table、ul等
常见内联元素：
   a、b、em（加重语调）、i、span、strong（强调）等
行内块级元素（特点：不换行、能够识别宽高）：
   button、img、input等
  
hgroup标签用来为标签分组，可以将一组相关的标题同时放入到hgroup
p标签标识页面中的一个段落
em标签用于表示语音语调的一个加重
strong表示强调，重要内容
blockquote表示一个长引用
q表示一个短引用
br表示页面中的换行
hr表示页面中出现一条水平线
...

布局标签（结构化语义标签）:
    header  表示网页的头部
    main    表示网页的主体部分(一个页面中只会有一个main)
    footer  表示网页的底部
    nav     表示网页中的导航
    aside   表示和主体相关的其他内容(侧边栏)
    article 表示一个独立的文章
    section 表示一个独立的区块，上边的标签不能表示时使用section

    div 没有语义，就用来表示一个区块，目前来说div还是我们主要的布局元素
    span    行内元素，没有任何的语义，一般用于在网页中选中文字
</code></pre>
<blockquote>
<p>列表：</p>
</blockquote>
<pre class=" language-html"><code class="language-html">列表（list）
1、铅笔
2、尺子
3、橡皮

在html中也可以创建列表，html列表一共有三种
1、有序列表
2、无序列表
3、定义列表

有序列表，使用ol标签来创建有序列表
使用li表示列表项

无序列表，使用ul标签来创建无序列表
使用li表示列表项

定义列表，使用dl标签来创建定义列表
使用dt来表示定义的内容
使用dd来对内容进行解释说明

列表之间可以互相嵌套

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>结构<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>表现<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>行为<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>结构<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>表现<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>行为<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>结构<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>结构用来表示网页的结构，结构用来规定网页中哪里是标题，哪里是段落<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span>
</code></pre>
<blockquote>
<p>表格：</p>
</blockquote>
<pre class=" language-html"><code class="language-html">表格标签：
       表格:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>
       行:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
       单元格（列）:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>
表格属性：
       border:设置表格的边框
       width:设置表格的宽度
       height:设置表格的高度
       
       示例：
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>尚学堂<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>黑马<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>多易<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>阿里<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>京东<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>腾讯<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>
快捷键生成表格：
            table>tr*2>td*3<span class="token entity" title="&#123;">&amp;#123;</span>文本信息<span class="token entity" title="&#125;">&amp;#125;</span>
</code></pre>
<blockquote>
<p>表格的合并：</p>
</blockquote>
<pre class=" language-html"><code class="language-html">水平合并：colspan--保留左边，删除右边
垂直合并：rowspan--保留上边，删除下边
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>单元格6单元格7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>单元格8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>单元格9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>单元格10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
</code></pre>
<blockquote>
<p>form表单：</p>
</blockquote>
<pre class=" language-html"><code class="language-html">表单是由容器和控件组成的，一个表单一般应该包含用户填写的信息的输入框，提交按钮等，
这些输入框，按钮叫做控件，表单就是容器，它能够容纳各种各样的控件

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get | post<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myform<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>
    action服务器地址
    name表单名称
    method中get和post的区别：
       数据提交方式，get把提交的数据url可以看到，post看不到
       get一般用于提交少量数据，post用来提交大量数据
</code></pre>
<blockquote>
<p>超链接：</p>
</blockquote>
<pre class=" language-html"><code class="language-html">超链接可以让我们从一个页面跳转到另一个页面，或者是当前页面的其他的位置
    使用a标签来定义超链接
         属性：
         href 指定跳转的目标路径
             -值可以是一个外部网站的地址
             -也可以写一个内部页面的地址
        超链接也是一个行内元素，在a标签中可以嵌套除它自身外任何的元素
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://www.baidu.com<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>超链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
        target属性：用来指定超链接打开的位置
             可选值：
             -self 默认值在当前页面中打开超链接
             _blank 在一个新的页面中打开超链接
</code></pre>
<p>内联框架：</p>
<pre class=" language-html"><code class="language-html">内联框架，用于向当前页面中引入一个其他的页面
       src 指定要引入的网页的路径
       frameborder 指定内联框架的边框
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://www.qq.com<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>800<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>600<span class="token punctuation">"</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span>
</code></pre>
<h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS:"></a>CSS:</h3><p>网页实际是一个多层的结构，通过CSS可以分别为网页的每一层来<em><strong>设置样式</strong></em>，而最终我们能看到只是网页的最上边一层</p>
<blockquote>
<p>使用CSS来设置样式的三种方式：</p>
</blockquote>
<pre class=" language-html"><code class="language-html">第一种方式：(内联样式，行内样式)
     -在标签内部通过style属性来设置元素的样式
     -问题：
          使用内联样式，样式只能对一个标签生效，如果希望影响到多个元素必须在每一个元素中都复制一遍
          并且当样式发生变化时，我们必须要一个一个的修改，非常的不方便
     -注意：开始时绝对不要使用内联样式
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span> <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>少小离家老大回，乡音无改鬓毛衰<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>

第二种方式(内部样式)：
     -将样式编写到head中的style标签里
          然后通过CSS的选择器来选中元素并为其设置各种样式
          可以同时为多个标签设置样式，并且修改只需要修改一处即可全部应用
     -内部样式表更加方便对样式进行复用
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
        p&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
            <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#00FF00</span><span class="token punctuation">;</span>
            <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>
        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>落霞与孤鹜齐飞，秋水共长天一色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>

第三种方式（外部样式表） 最佳实践
     -可以将css样式编写到一个外部的css文件中
          然后通过link标签来引入外部的css文件
     -外部样式表需要通过link标签进行引入，
          意味着只要想使用这些样式的网页都可以对其进行引用
          使样式可以在不同页面之间进行复用
     -将样式编写到外部的css文件中，可以使用到浏览器的缓存机制
          从而加快网页的加载速度，提高用户的体验
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./style.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
</code></pre>
<blockquote>
<p>选择器：</p>
</blockquote>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
        <span class="token comment" spellcheck="true">/* 全局选择器：
            可以与任何元素匹配，优先级最低，一般做样式初始化 */</span>
        *&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
            <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>
            <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/* 元素选择器：
            所有的标签，都可以是选择器
            标签选择器，选择的是页面上所有这种类型的标签，所以经常描述“共性”，无法描述某一个元素的“个性” */</span>
        p&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
            <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>
        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/* 类选择器：
            规定用圆点.来定义，针对你想要的所有标签使用
            class属性的特点：
                类选择器可以被多种标签使用
                类名不能以数字开头
                同一个标签可以使用多个类选择器，用空格隔开 */</span>
        <span class="token number">.</span>oneclass&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">800</span>px<span class="token punctuation">;</span>
        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>
        <span class="token number">.</span>content&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
            <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>
        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>HELLO<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>oneclass<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>你好<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>oneclass content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>世界<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
        <span class="token comment" spellcheck="true">/* ID选择器：
            针对某一个特定的标签来使用，只能使用一次。CSS中的ID选择器以#来定义
            ID是唯一的
            ID不能以数字开头 */</span>
        #mytitle&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
            <span class="token property">border</span><span class="token punctuation">:</span><span class="token number">3</span>px dashed green<span class="token punctuation">;</span>
        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/* 合并选择器：
            语法：选择器1,选择器2,...&amp;#123;&amp;#125;
            作用：提取共同的样式，减少重复代码 */</span>
        p,h<span class="token number">3</span>&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
            <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>
            <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/* 选择器的优先级：
            CSS中，权重用数字衡量
            元素选择器的权重为：1
            类选择器的权重为：10
            ID选择器的权重为：100
            内联样式的权重为：1000
            优先级从高到低：行内样式>ID选择器>类选择器>元素选择器 */</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>

关系选择器：
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
        <span class="token comment" spellcheck="true">/* 后代选择器：
            定义：选择所有被E元素包含的F元素，中间用空格隔开
            E F&amp;#123;&amp;#125; */</span>
        ul li&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
            <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/* 子代选择器：
            选择所有作为E元素的直接子元素F，对更深一层的元素不起作用，用>表示
            E>F&amp;#123;&amp;#125; */</span>
        div>p&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
            <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>
        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/* 相邻兄弟选择器：
            选择紧跟E元素后的F元素，选择相邻的第一个兄弟元素，用+号表示
            E+F&amp;#123;&amp;#125; */</span>
        h<span class="token number">1</span>+p&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
            <span class="token property">color</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span>
        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/* 通用兄弟选择器：
            选择E元素之后的所有兄弟元素F，作用于多个元素，用~隔开
            E~F&amp;#123;&amp;#125; */</span>
        h<span class="token number">3</span>~p&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
            <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>
        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span> 
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
</code></pre>
<blockquote>
<p>盒子模型：</p>
</blockquote>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
        <span class="token comment" spellcheck="true">/* 盒子模型：
            Margin(外边距)-清除边框外的区域，外边距是透明的
            Border(边框)-围绕在内边距和内容外的边框
            Padding(内边距)-清除内容周围的区域
            Content(内容)-盒子的内容，显示文本和图像 */</span>
        div&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>
            <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span>
            <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
            <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>
            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">2</span>px solid gray<span class="token punctuation">;</span>
            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>
        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
        <span class="token comment" spellcheck="true">/* 弹性盒子模型：
            弹性盒子由弹性容器（Flex container）和弹性子元素（Flex item）组成
            弹性容器通过设置display属性的值为flex将其定义为弹性容器
            弹性容器内包含了一个或多个弹性子元素 */</span>
        <span class="token number">.</span>container&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>
            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>
            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#555</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">/* 定义为弹性容器 */</span>
            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">/*设置各个子元素摆放方式*/</span>
            <span class="token property">flex-direction</span><span class="token punctuation">:</span> row-reverse<span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">/*设置子元素水平摆放位置*/</span>
            <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">/*设置子元素垂直摆放位置*/</span>
            <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>   
        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
</code></pre>
<blockquote>
<p>浮动以及清除浮动：</p>
</blockquote>
<pre class=" language-html"><code class="language-html">浮动的定义：
     float属性定义在哪个方向浮动，任何元素都可以浮动
浮动的原理：
     浮动以后使元素脱离了文档流
     浮动只有左右浮动，没有上下浮动
     元素向左浮动：
         脱离文档流之后，元素相当于在页面上面增加一个浮层来放置内容。此时可以理解为有两层页面，
         一层是底层的原页面，一层是脱离文档流的上层页面，所以会出现折叠现象。
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
        <span class="token number">.</span>box&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
            <span class="token property">background-color</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span>
            <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>

        <span class="token number">.</span>container&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>
            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>
            <span class="token property">background-color</span><span class="token punctuation">:</span> blueviolet<span class="token punctuation">;</span>
        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>

浮动副作用：
     浮动元素会造成父元素高度塌陷
     后续元素会受到影响
        
     清除浮动：
         当父元素出现塌陷的时候，对布局是不利的，所以我们必须清除副作用
         解决方案有很多种：
                父元素设置高度
                受影响的元素增加clear属性
                父级标签的样式添加overflow清除浮动
                伪对象方式
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
        <span class="token number">.</span>container&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">/* height: 500px; */</span>
            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#888</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">/* overflow: hidden;
            clear: both; */</span>
        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>

        <span class="token number">.</span><span class="token property">container</span><span class="token punctuation">:</span><span class="token punctuation">:</span>after&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
            <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>
            <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
            <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>
        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>

        <span class="token number">.</span>box&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>
            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>
            <span class="token property">background-color</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span>
            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>
            <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>

        <span class="token number">.</span>text&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>
            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>
            <span class="token property">background-color</span><span class="token punctuation">:</span> blueviolet<span class="token punctuation">;</span>
            <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>
        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
</code></pre>
<blockquote>
<p>动画：</p>
</blockquote>
<pre class=" language-html"><code class="language-html">直接演示一波：
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
        div&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
            <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
            <span class="token property">animation</span><span class="token punctuation">:</span> myAnim <span class="token number">3</span>s linear <span class="token number">0</span>s infinite<span class="token punctuation">;</span>
        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>

        <span class="token property">div</span><span class="token punctuation">:</span>hover&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
            <span class="token property">animation-play-state</span><span class="token punctuation">:</span> paused<span class="token punctuation">;</span>
        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>

        <span class="token atrule"><span class="token rule">@keyframes</span> myAnim &amp;#123<span class="token punctuation">;</span></span>
            <span class="token number">0%</span>&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
                <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
            &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>
            <span class="token number">50%</span>&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
                <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>
            &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>
            <span class="token number">100%</span>&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
                <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
            &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>
        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
</code></pre>
<h3 id="JavaScript："><a href="#JavaScript：" class="headerlink" title="JavaScript："></a>JavaScript：</h3><p>JavaScript的引入方式和CSS十分类似</p>
<pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--在内部编写javascript--></span>
    <span class="token comment" spellcheck="true">&lt;!-- &lt;script>
        alert("hello js");        
    &lt;/script> --></span>
    
<span class="token comment" spellcheck="true">&lt;!--链接外部的js文件--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./demo.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
</code></pre>
<blockquote>
<p>输出语句：</p>
</blockquote>
<ul>
<li>使用windows.alert()写入警告框</li>
<li>使用document.write()写入HTML输出</li>
<li>使用console.log()写入浏览器控制台</li>
</ul>
<blockquote>
<p>变量&amp;数据类型：</p>
</blockquote>
<pre class=" language-html"><code class="language-html">JavaScript是弱类型语言
    用var关键字来声明变量

    ECMAScript 6 新增了 let 关键字来定义变量
    ECMAScript 6 新增了 const 关键字来定义一个只读的常量，一旦声明，就不能更改常量的值。
    
    var:
       1、作用域：全局变量
       2、变量可以重复定义
            
    let:
       1、作用域：局部变量
       2、变量不可以重复定义
       
JavaScript中分为：原始类型和引用类型
        5种原始类型：
            numbe：数字（整数、小数、NaN（Not a Number））
            string：字符、字符串，单引号、双引号皆可
            boolean：布尔
            null：对象为空，null被认为是对象的占位符，使用typeof运算符会返回“Object”
            undefined：当声明的变量未初始化时，该变量的默认值是undefined

        引用类型，合成数据类型，复合数据类型：object（对象）
        var user = <span class="token entity" title="&#123;">&amp;#123;</span>
            age:18,
            name:"iwen",
            hunyin:flase
        <span class="token entity" title="&#125;">&amp;#125;</span>

        使用typeof运算符可以获取数据类型
        alter(typeof age) 
</code></pre>
<blockquote>
<p>window窗口对象：</p>
</blockquote>
<pre><code>Window
      window：获取窗口对象
      获取：直接使用window，其中 window. 可以省略
      window.alert(&quot;abc&quot;)  --&gt; alert(&quot;abc&quot;)

      方法：
          alert()     显示带有一段消息和一个确认按钮的警告框
          confirm()   显示带有一段消息以及确认按钮和取消按钮的对话框  --&gt; 点击确认会返回true，点击取消会返回false
          setInterval(function,毫秒值)按照指定的周期（以毫秒计）来调用函数或计算表达式，循环执行
          setTimeout(function,毫秒值)在指定的毫秒数后调用函数或计算表达式，只执行一次
</code></pre>
<blockquote>
<p>数组方法：</p>
</blockquote>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
    <span class="token comment" spellcheck="true">// Array.isArray()</span>
    <span class="token comment" spellcheck="true">// Array.isArray方法返回一个布尔值，表示参数是否为数组。它可以弥补typeof运算符的不足。</span>
    <span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"尚学堂"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// push()/pop()</span>
    <span class="token comment" spellcheck="true">// push方法用于在数组的末端添加一个或多个元素，并返回添加新元素后的数组长度。注意：该方法会改变原数组。</span>
    <span class="token comment" spellcheck="true">// pop方法用于删除数组的最后一个长度，并返回该元素。注意：该方法会改变原数组。</span>
    <span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    arr2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"尚学堂"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>
    arr2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'itbaizhan'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>
    arr2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">var</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'尚学堂'</span><span class="token punctuation">,</span><span class="token string">'itbaizhan'</span><span class="token punctuation">,</span><span class="token string">'WEB前端'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    arr3<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'WEB前端'</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// shift()/unshift()</span>
    <span class="token comment" spellcheck="true">// shift方法用于删除数组的第一个元素，并返回该元素。注意，该方法会改变数组</span>
    <span class="token comment" spellcheck="true">// unshift方法用于在数组的第一个位置添加元素，并返回添加新元素后的数组长度</span>
    <span class="token keyword">var</span> arr4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'尚学堂'</span><span class="token punctuation">,</span><span class="token string">'itbaizhan'</span><span class="token punctuation">,</span><span class="token string">'WEB前端'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    arr4<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// '尚学堂'</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr4<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// shift方法去清空一个数组</span>
    <span class="token keyword">var</span> item<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>item <span class="token operator">=</span> arr4<span class="token punctuation">.</span>shift<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr4<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">var</span> arr5 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'尚学堂'</span><span class="token punctuation">,</span><span class="token string">'itbaizhan'</span><span class="token punctuation">,</span><span class="token string">'WEB前端'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    arr5<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">'baizhan'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr5<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// unshift方法可以接受多个参数，这些参数都会添加到目标数组头部</span>
    arr5<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">'测试'</span><span class="token punctuation">,</span><span class="token string">'JavaScript'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr5<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// join()</span>
    <span class="token comment" spellcheck="true">// join方法以指定参数作为分隔符，将所有数组成员连接为一个字符串返回。如果不提供参数，默认用逗号分隔</span>
    <span class="token keyword">var</span> arr6 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr6<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10,20,30,40</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr6<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10|20|30|40</span>

    <span class="token comment" spellcheck="true">// concat()</span>
    <span class="token comment" spellcheck="true">// concat方法用于多个数组的合并。它将新数组的成员，添加到原数组成员的后部，然后返回一个新数组，原数组不变</span>
    <span class="token keyword">var</span> arr7 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'world'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'!'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr7<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 除了数组作为参数，concat也接受其他类型的值作为参数，添加到目标数组后部。</span>
    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment" spellcheck="true">// indexOf()</span>
    <span class="token comment" spellcheck="true">// indexOf方法返回给定元素在数组中第一次出现的位置，如果没有出现则返回-1</span>
    <span class="token keyword">var</span> arr8 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    arr8<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>
    arr8<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -1</span>
    <span class="token comment" spellcheck="true">// indexOf方法还可以接受第二个参数，表示搜索的开始位置</span>
    <span class="token punctuation">[</span><span class="token string">'尚学堂'</span><span class="token punctuation">,</span><span class="token string">'百战程序员'</span><span class="token punctuation">,</span><span class="token string">'itbaizhan'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'尚学堂'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -1</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
</code></pre>
<blockquote>
<p>函数：</p>
</blockquote>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// 函数是一段可以反复调用的代码块</span>

        <span class="token comment" spellcheck="true">// 函数的声明：</span>
        <span class="token comment" spellcheck="true">//     function命令：function命令声明的代码区块，就是一个函数。function命令后面是函数名，函数名后面是一对圆括号，里面是传入函数的参数。函数体放在大括号里面。</span>

        <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"结果:"</span><span class="token punctuation">,</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
</code></pre>
<blockquote>
<p>CSS操作：</p>
</blockquote>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token comment" spellcheck="true">// HTML元素的style属性</span>
        <span class="token comment" spellcheck="true">// 操作CSS样式最简单的方法，就是使用网页元素节点的setAttribute方法直接操作网页元素的style属性</span>

        <span class="token keyword">var</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// box.setAttribute("style","width:200px;height:200px;background:red;")</span>

        <span class="token comment" spellcheck="true">// box.style.width = "300px";</span>
        <span class="token comment" spellcheck="true">// box.style.height = "300px";</span>
        <span class="token comment" spellcheck="true">// box.style.backgroundColor = "red";</span>

        box<span class="token punctuation">.</span>style<span class="token punctuation">.</span>cssText <span class="token operator">=</span> <span class="token string">"width:200px;height:200px;background:red;"</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
</code></pre>
<h3 id="jQuery："><a href="#jQuery：" class="headerlink" title="jQuery："></a>jQuery：</h3><blockquote>
<p>第一个例子：</p>
</blockquote>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>第一个例子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/jquery-3.6.4.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Hello jQuery"</span><span class="token punctuation">)</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true">//简便写法</span>
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Hello jQuery"</span><span class="token punctuation">)</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
</code></pre>
<p>​				1.(document),是jQuery中的函数名称，document是函数的参数，作用是将document对象 变成 jQuery函数库可以使用的对象。2.ready是jQuery中的函数，是准备的意思，当页面的dom对象加载成功后，会执行ready函数的内容。ready相当于js中的onLoad事件</p>
<blockquote>
<p>dom对象 与 jQuery对象的互转：</p>
</blockquote>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>我是按钮<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btnClick()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
function btnClick()<span class="token entity" title="&#123;">&amp;#123;</span>
            //获取dom对象
            var obj = document.getElementById("btn");
            //使用dom的value属性来获取值
            alert("使用dom对象的属性="+obj.value);
            //把dom对象转jQuery，使用jQuery库中的函数
            var $jObj = $(obj);
            //调用jQuery中的函数，获取value的值
            alert($jObj.val())
        <span class="token entity" title="&#125;">&amp;#125;</span>
</code></pre>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>计算平方<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btnClick()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txt<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>整数<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
function btnClick()<span class="token entity" title="&#123;">&amp;#123;</span>
            //使用jQuery的语法，获取页面中的dom对象
            //var obj = $("#txt")[0];   //从数组中获取下标为0的dom对象（jQuery对象是一个数组）
            var obj = $("#txt").get(0);   //从数组中获取下标为0的dom对象（jQuery对象是一个数组）
            //alert(obj.value)
            var num = obj.value;
            obj.value = num * num;
        <span class="token entity" title="&#125;">&amp;#125;</span>
</code></pre>
<blockquote>
<p>事件：</p>
</blockquote>
<pre><code>  1.定义元素监听事件 ：
  语法：$(选择器).监听事件名称(处理函数)
  说明：监听事件名称是js事件中去掉on后的内容，js中的onclick的监听事件名称是click
  
  例如：
  为页面中所有的button绑定onclick，并关联处理函数func1
  $(&quot;button&quot;).click(func1)
  为页面中所有的tr标签绑定onmouseover，并关联处理函数func2
  $(&quot;tr&quot;).mouseover(func2)
  
  $(&quot;#btn&quot;).click(function()&#123; 
  alert(&quot;处理按钮单击&quot;) 
  &#125;)
  
  2.on()绑定事件
  on()方法在被选元素上添加事件处理程序。该方法给API带来很多便利，推荐使用该方法
  语法：$(选择器).on(event,function)
  event：事件一个或多个，多个之间空格分开
  function：可选，规定当事件发生时运行的函数

  $(&quot;#btn&quot;).on(&quot;click&quot;,function()&#123;
 alert(&quot;处理按钮单击&quot;)
 &#125;)
</code></pre>
<blockquote>
<p>基本选择器：</p>
</blockquote>
<p>​				根据id，class属性，标签类型名定位HTML元素，转为jQuery对象，下面通过代码演示</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>基本选择器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">
        div&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
            <span class="token property">background</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span>
            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>
        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/jquery-3.6.4.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token keyword">function</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//id选择器</span>
            <span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//使用jQuery中改变样式的函数</span>
            obj1<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background"</span><span class="token punctuation">,</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">function</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//class选择器</span>
            <span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".two"</span><span class="token punctuation">)</span>
            <span class="token comment" spellcheck="true">//使用jQuery中改变样式的函数</span>
            obj2<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background"</span><span class="token punctuation">,</span><span class="token string">"yellow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        	<span class="token keyword">function</span> <span class="token function">fun3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//class选择器</span>
            <span class="token keyword">var</span> obj3 <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//数组有3个对象</span>
            <span class="token comment" spellcheck="true">//使用jQuery中改变样式的函数</span>
            obj3<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background"</span><span class="token punctuation">,</span><span class="token string">"blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        <span class="token keyword">function</span> <span class="token function">fun4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">var</span> obj4 <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            obj4<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background"</span><span class="token punctuation">,</span><span class="token string">"green"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是one的div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>two<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是样式是two的div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>我是没有id，class的div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>我是span标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>获取id是one的dom对象<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fun1()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>获取class是two的dom对象<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fun2()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>获取标签是div的dom对象<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fun3()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>全部选择器<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fun4()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
</code></pre>
<blockquote>
<p>表单选择器：</p>
</blockquote>
<pre><code>    使用&lt;input&gt;标签的type属性值，定位dom对象的方式
    语法：$(&quot;:type 属性值&quot;)
    
    例如：$(&quot;:text&quot;)，选择的是所有的单行文本框
    	 $(&quot;:button&quot;)，选择的是所有的按钮
</code></pre>
<pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span>  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/jquery-3.6.4.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token keyword">function</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//使用表单选择器 $(":type的值")</span>
            <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//获取value属性的值</span>
            <span class="token function">alert</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">function</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//定位radio</span>
        <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":radio"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//数组，目前是两个对象 man、woman</span>
        <span class="token comment" spellcheck="true">//循环数组</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>obj<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//从数组中获取成员，使用下标的方式</span>
            <span class="token keyword">var</span> dom <span class="token operator">=</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//使用dom对象的属性，获取value值</span>
            <span class="token function">alert</span><span class="token punctuation">(</span>dom<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>我是type<span class="token punctuation">=</span>text<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>man<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>男 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>woman<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>女 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bike<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>骑行<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>football<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>足球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>music<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>音乐<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>读取text的值<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>func1()<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>读取radio的值<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>func2()<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
</code></pre>
<blockquote>
<p>基本过滤器：</p>
</blockquote>
<pre><code>    1、选择第一个first，保留数组中的第一个dom对象
        $(&quot;选择器:first&quot;)
    2、选择最后一个last，保留数组中的最后一个dom对象
        $(&quot;选择器:last&quot;)
    3、选择数组中指定对象
        $(&quot;选择器:eq(数组索引)&quot;)
    4、选择数组中小于指定索引的所有dom对象
        $(&quot;选择器:lt(指定索引)&quot;)
</code></pre>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">
        div&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
            <span class="token property">background</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span>
        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/jquery-3.6.4.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//过滤器</span>
                <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div:first"</span><span class="token punctuation">)</span>
                obj<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background"</span><span class="token punctuation">,</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是div-0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>two<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是div-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>我是div-2
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>我是div-3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>我是div-4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>我是div-5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>我是span<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>获取第一个div<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
</code></pre>
<blockquote>
<p>表单属性过滤器：</p>
</blockquote>
<pre><code>    1、选择可用的文本框 
        $(&quot;:text:enabled&quot;)
    2、选择不可用的文本框
        $(&quot;:text:disabled&quot;)
    3、复选框选中的元素
        $(&quot;:checkbox:checked&quot;)
    4、选择指定下拉列表的被选中元素
        选择器&gt;option:selected
</code></pre>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/jquery-3.6.4.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":text:enabled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                obj<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":checkbox:checked"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>obj<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                    <span class="token function">alert</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>

            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"select>option:selected"</span><span class="token punctuation">)</span>
                <span class="token function">alert</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>文本框<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txt1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txt2<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text2<span class="token punctuation">"</span></span> <span class="token attr-name">disabled</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txt3<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txt4<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text4<span class="token punctuation">"</span></span> <span class="token attr-name">disabled</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>复选框<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>游泳<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>游泳<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>健身<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token punctuation">></span></span>健身<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>电子游戏<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token punctuation">></span></span>电子游戏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>下拉框<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>语言<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span> <span class="token attr-name">selected</span><span class="token punctuation">></span></span>java语言<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>python<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>python语言<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>c语言<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>功能按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>设置可用的text的value是hello<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>显示被选中的复选框中的值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>显示选中下拉列表框的值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
</code></pre>
<blockquote>
<p>函数：</p>
</blockquote>
<pre><code>    1、val
    操作数组中dom对象的value属性
    $(选择器).val()：无参数调用形式，读取数组中第一个dom对象的value属性值
    $(选择器).val(值)：有参形式调用；对数组中所有dom的value属性进行统一赋值

    2、text
    操作数组中所有的dom对象的【文字显示内容属性】
    $(选择器).text()：无参数调用，读取数组中所有dom对象的文字显示内容，将得到的内容拼接为一个字符串返回
    $(选择器).text(值)：有参数形式，对数组中所有dom对象的文字显示内容进行统一赋值

    3、attr
    对val、text之外的其他属性操作
    $(选择器).attr(&quot;属性名&quot;):获取dom数组第一个对象的属性值
    $(选择器).attr(&quot;属性名&quot;,&quot;值&quot;):对数组中所有dom对象的属性设为新值

    4、remove
    $(选择器).remove()：将数组中所有dom对象及其子对象一并删除

    5、empty
    $(选择器).empty():将数组中所有dom对象的子对象删除

    6、append
    为数组中所有dom对象添加子对象
    $(选择器).append(&quot;&lt;div&gt;我动态添加的div&lt;/div&gt;&quot;)

    7、html
    设置或返回被选元素的内容（innerHTML--html文件中写的内容）
    $(选择器).html()：无参数调用，获取dom数组第一个匹配元素的内容
    $(选择器).html(值)：有参数调用，用于设置dom数组中所有元素的内容

    8、each
    each是对数组，json 和 dom数组等的遍历，对每个元素调用一次函数
    语法1：$.each( 要遍历的对象，function(index,element) &#123;处理程序&#125; )
    语法2：jQuery对象.each( function(index,element) &#123;处理程序&#125; )
    $：相当于java的一个类名
    each：就是类中的静态方法
    index：数组的下标
    element：数组的对象
</code></pre>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">
        div&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>
            <span class="token property">background</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>
        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/jquery-3.6.4.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//使用remove：删除父和子所有的dom对象</span>
                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"select"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//使用empty：删除子dom对象</span>
                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"select"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>

            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//使用append(值)：增加dom对象</span>
                <span class="token comment" spellcheck="true">//$("#fatcher").append("&lt;input type='button' value='我是增加的按钮'/>");</span>

                <span class="token comment" spellcheck="true">//增加一个table</span>
                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#fatcher"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;table border=1>&lt;tr>&lt;td>第一列&lt;/td>&lt;td>第二列&lt;/td>&lt;/tr>&lt;/table>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>

            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn4"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//使用html()：获取数组中第一个dom对象的文本值（innerHTML）</span>
                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>

            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn5"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//使用html(值)：设置所有选中dom对象的文本值</span>
                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">"我是新的&lt;b>数据&lt;/b>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>

            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn6"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//循环普通数组</span>
                <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                $<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>element<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"循环变量："</span><span class="token operator">+</span>index<span class="token operator">+</span><span class="token string">"====数组成员"</span><span class="token operator">+</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>

            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn7"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//循环json</span>
                <span class="token keyword">var</span> json <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">:</span><span class="token number">21</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
                $<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"i是key="</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"，n是value="</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>

            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn8"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//循环json</span>
                <span class="token keyword">var</span> domArray <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//语法1</span>
                <span class="token comment" spellcheck="true">// $.each(domArray,function(i,n)&amp;#123;</span>
                <span class="token comment" spellcheck="true">//     //n是数组中的dom对象</span>
                <span class="token comment" spellcheck="true">//     alert("i="+i+"，n="+n.value);</span>
                <span class="token comment" spellcheck="true">// &amp;#125;)</span>
                <span class="token comment" spellcheck="true">//语法2</span>
                domArray<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"i="</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"，n="</span><span class="token operator">+</span>n<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>刘备<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>关羽<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>张飞<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>老虎<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>老虎<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>狮子<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>狮子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>豹子<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>豹子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>亚洲<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>亚洲<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>美洲<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>美洲<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>欧洲<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>欧洲<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fatcher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是第一个div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>我是mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>数据库<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>我是jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>使用remove删除父和子对象<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>使用empty删除子对象<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>使用append增加dom对象<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>获取第一个dom的文本值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>设置span的所有dom的文本值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>循环普通数组<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn7<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>循环json<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>循环dom数组<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
</code></pre>
<h3 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax:"></a>Ajax:</h3><blockquote>
<p>ajax函数：</p>
</blockquote>
<pre><code>1）$.ajax()：jQuery中实现ajax的核心函数
2）$.post()：使用post方式发送ajax请求
3）$.get()：使用get方式发送ajax请求

$.post() 和 $.get() 内部都是调用的 $.ajax()
</code></pre>
<blockquote>
<p>$.ajax()函数的使用：</p>
</blockquote>
<pre><code>    函数的参数表示请求的url、请求的方式、参数值、回调方法等信息。参数是一个json结构。
    例如：$.ajax( &#123; 名称1:值1, 名称2:值2...&#125; )
    
    例如：
    $.ajax( &#123;
        async:true,
        contentType:&quot;application/json&quot;,
        data:&#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:21&#125;,
        dataType:&quot;json&quot;,
        error:function()&#123;
            请求出现错误时，执行的函数
        &#125;,
        success:function(data)&#123;
            //data 就是responseText，是jQuery处理后的数据
            请求成功时，执行的函数
        &#125;,
        url:&quot;www.baidu.com&quot;,
        type:&quot;get&quot;
    &#125; )
    
    async：布尔值，表示请求是否异步处理。默认是true
    contentType：发送数据到服务器时所使用的数据类型，可以不写。例如application/json
    data：规定要发送到服务器的数据，可以是：字符串、数组，多数是json
    dataType：期望从服务器响应的数据类型
    error()：如果请求失败要运行的函数
    success(resp)：当请求成功时运行的函数，其中resp是自定义的形参名
    type：规定请求的类型（GET或POST等）。默认是GET,GET/POST不区分大小写
    url：规定发送请求的url
</code></pre>
<blockquote>
<p>$.get() 和 $.post() 函数的使用：</p>
</blockquote>
<pre><code>    $.get()方法使用 HTTP GET请求从服务器加载数据
    $.post()方法使用 HTTP POST请求从服务器加载数据
    语法：$.get(url,data,function(resp),dataType)
         $.post(url,data,function(resp),dataType)
</code></pre>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>关于列式数据库ClickHouse知识的学习</title>
    <url>/2023/051164496.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>关于多功能引擎ES知识的学习</title>
    <url>/2023/051139179.html</url>
    <content><![CDATA[<p>想必大家都知道ES，一款非常好用的工具，但是我还是想详细解释一下它的概念：ES全称Elasticsearch，是一个<strong>开源的高扩展的分布式全文搜索引擎</strong>，是整个Elastic Stack技术栈的核心。它可以近乎实时的存储、检索数据；本身扩展性很好，可以扩展到上百台服务器，处理PB级别的数据。可以看出ES功能非常强大，所以现在国内外很多公司都在使用。</p>
<p>看到这里又会有人说了：传统数据库不行吗？还真不行（也不是不行，就是效果不好），哈哈哈哈。传统数据库实现全文检索的话很鸡肋，因为一般不会用传统数据库存非结构化的像文本字段等数据。进行全文检索需要扫描整个表，如果数据量大的话即使对SQL的语法优化，也收效甚微。建立了索引，但是维护起来也很麻烦，对于insert和update操作都会重新构建索引。基于以上原因可以分析得出，在一些生产环境中，使用常规的搜索方式，性能是非常差的：</p>
<ul>
<li>搜索的数据对象是大量的非结构化的文本数据</li>
<li>文件记录量达到数十万或数百万个甚至更多</li>
<li>支持大量基于交互式文本的查询</li>
<li>需求非常灵活的全文搜索查询</li>
<li>对高度相关的搜索结果的有特殊需求，但是没有可用的关系数据库可以满足</li>
<li>对不同记录类型、非文本数据操作或安全事务处理的需求相对较少的情况</li>
</ul>
<p>为了解决这些问题，我们就需要<strong>全文搜索引擎</strong>，它的工作原理是计算机索引程序通过扫描文章中的每一个词，对每一个词建立一个索引，指明该词在文章中出现的次数和位置，当用户查询时，检索程序就根据事先建立的索引进行查找，并将查找的结果反馈给用户。这个过程类似于通过字典中的检索字表查字的过程。</p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>es</tag>
      </tags>
  </entry>
  <entry>
    <title>关于实时计算框架flink知识的学习</title>
    <url>/2023/042717719.html</url>
    <content><![CDATA[<p>这一篇文章我要分享的是flink实时计算框架，我先解释一下flink的基本概念：一个分布式的、有状态的实时流式处理系统（编程框架）。那么就会有人问：之前不是学习过spark streaming吗，也能做实时流式处理，为什么还要学习flink？其实答案很简单：flink比spark streaming更<strong>实时</strong>！spark streaming的流式处理是基于微批处理的思想，需要隔一点时间才会去处理，flink采用了基于操作符的连续模型，可以做到微秒级别的延迟</p>
<p>下面就是我分享的知识：</p>
<h3 id="1-快速认识flink"><a href="#1-快速认识flink" class="headerlink" title="1 快速认识flink"></a>1 快速认识flink</h3><h4 id="1-1-flink基本概念"><a href="#1-1-flink基本概念" class="headerlink" title="1.1 flink基本概念"></a>1.1 flink基本概念</h4><p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230505164747393.png" alt="image-20230505164747393"><figcaption>image-20230505164747393</figcaption></figure></p>
<p><strong>flink，以流处理方式作为基础的世界观，并通过引入有界流来实现批计算，从而实现流批一体，可以说是非常np</strong></p>
<h4 id="1-2-flink的运行架构"><a href="#1-2-flink的运行架构" class="headerlink" title="1.2 flink的运行架构"></a>1.2 flink的运行架构</h4><p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230505165006278.png" alt="image-20230505165006278"><figcaption>image-20230505165006278</figcaption></figure></p>
<p>flink集群采用 Master - Slave 架构：</p>
<ul>
<li>Master的角色为JobManager，负责集群和作业管理</li>
<li>Slave的角色是TaskManager，负责执行计算任务</li>
<li>客户端Client负责集群和提交任务，JobManager 和 TaskManager是集群的进程</li>
</ul>
<p>各角色主要职责说明：</p>
<ol>
<li>Client：是flink提供的CLI命令行工具，用来提交flink作业到flink集群，在客户端中负责 Stream Graph（流图）和 Job Graph（作业图）的构建</li>
<li>JobManager：根据并行度将flink客户端提交的flink应用分解为子任务，从资源管理器ResourceManager申请所需的计算资源，资源具备之后，开始分发到TaskManager执行Task，并负责应用容错，跟踪作业的执行状态，发现异常则恢复作业等</li>
<li>TaskManager：接收JobManager分发的子任务，根据自身的资源情况，管理子任务的启动、停止、销毁、异常恢复等生命周期阶段。flink程序中必须有一个TaskManager</li>
</ol>
<h4 id="1-3-flink的特性"><a href="#1-3-flink的特性" class="headerlink" title="1.3 flink的特性"></a>1.3 flink的特性</h4><ol>
<li><p>适用于几乎所有的流式数据处理管道</p>
<ul>
<li>事件驱动型应用</li>
<li>流、批数据分析</li>
<li>数据管道及ETL</li>
</ul>
</li>
<li><p>自带状态管理机制</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230505172208248.png" alt="image-20230505172208248"><figcaption>image-20230505172208248</figcaption></figure></p>
</li>
<li><p>强大的准确性保证</p>
<ul>
<li>exactly-once 状态一致性</li>
<li>事件时间处理</li>
<li>专业的迟到数据处理</li>
</ul>
</li>
<li><p>灵活丰富的多层api</p>
<ul>
<li>流、批数据之上的SQL查询</li>
<li>流、批数据之上的TableApi</li>
<li>datastream流处理算子api、dataset批处理算子api</li>
<li>精细可控的processFunction</li>
</ul>
</li>
<li><p>规模弹性扩展</p>
<ul>
<li>可扩展的分布式架构（集群级别的资源规模灵活配置，算子粒度的独立并行度灵活配置）</li>
<li>支持超大状态管理</li>
<li>增量checkpoint机制</li>
</ul>
</li>
<li><p>强大的运维能力</p>
<ul>
<li>弹性实施部署机制</li>
<li>高可用机制</li>
<li>保存点恢复机制</li>
</ul>
</li>
<li><p>优秀的性能</p>
<ul>
<li>低延迟</li>
<li>高吞吐</li>
<li>内存计算</li>
</ul>
</li>
</ol>
<h3 id="2-flink编程基础"><a href="#2-flink编程基础" class="headerlink" title="2 flink编程基础"></a>2 flink编程基础</h3><h4 id="2-1-flink的DataStream抽象"><a href="#2-1-flink的DataStream抽象" class="headerlink" title="2.1 flink的DataStream抽象"></a>2.1 flink的DataStream抽象</h4><ul>
<li>DataStream 代表一个数据流，<strong>它可以是无界的，也可以是有界的</strong></li>
<li>DataStream 类似于Spark的rdd，它是不可变的</li>
<li>无法对一个DataStream进行自由的添加或删除或修改元素</li>
<li>只能通过算子对DataStream中的数据进行转换，将一个DataStream转成另一个DataStream</li>
<li>DataStream可以通过source算子加载、映射外部数据而来；或者从已存在的DataStream转换而来</li>
</ul>
<h4 id="2-2-flink编程模板"><a href="#2-2-flink编程模板" class="headerlink" title="2.2 flink编程模板"></a>2.2 flink编程模板</h4><ol>
<li>获取一个编程、执行入口环境env</li>
<li>通过数据源组件、加载、创建DataStream</li>
<li>对DataStream调用各种处理算子表达计算逻辑</li>
<li>通过sink算子指定计算结果的输出方式</li>
<li>在env上触发程序提交运行</li>
</ol>
<h4 id="2-3-flink程序的并行概念"><a href="#2-3-flink程序的并行概念" class="headerlink" title="2.3 flink程序的并行概念"></a>2.3 flink程序的并行概念</h4><ul>
<li><p>flink程序中，每一个算子都可以成为一个独立任务（task）</p>
</li>
<li><p>flink程序中，视上下游算子间数据分发规划、并行度、共享槽位设置，可组成算子链成为一个task</p>
</li>
<li><p>每个任务在运行时都可拥有多个并行是运行实例（subtask）</p>
</li>
<li><p>且每个算子任务的并行度都可以在代码中显式设置</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230514180529758.png" alt="image-20230514180529758"><figcaption>image-20230514180529758</figcaption></figure></p>
</li>
</ul>
<h4 id="2-4-flink编程入口"><a href="#2-4-flink编程入口" class="headerlink" title="2.4 flink编程入口"></a>2.4 flink编程入口</h4><p>批处理入口</p>
<pre class=" language-java"><code class="language-java">ExecutionEnvironment env <span class="token operator">=</span> ExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnviroment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>流处理入口</p>
<pre class=" language-java"><code class="language-java">StreamExecutionEnvironment env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnviroment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>流批一体处理入口</p>
<pre class=" language-java"><code class="language-java">StreamExecutionEnvironment env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnviroment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//为env设置环境参数</span>
ExecutionConfig config <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//设置为批处理模式</span>
config<span class="token punctuation">.</span><span class="token function">setExecutionMode</span><span class="token punctuation">(</span>ExecutionMode<span class="token punctuation">.</span>BATCH<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>开启webui的本地运行环境处理入口</p>
<pre class=" language-java"><code class="language-java">Configuration conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
conf<span class="token punctuation">.</span><span class="token function">setInteger</span><span class="token punctuation">(</span><span class="token string">"rest.port"</span><span class="token punctuation">,</span><span class="token number">8081</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
StreamExecutionEnvironment env <span class="token operator">=</span> StreamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">getExecutionEnviroment</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<blockquote>
<p>要开启上述webui功能，需添加依赖：flink-runtime-web_2.12</p>
</blockquote>
<h4 id="2-5-基本source算子"><a href="#2-5-基本source算子" class="headerlink" title="2.5 基本source算子"></a>2.5 基本source算子</h4><p>source是用来获取外部数据的算子，按照获取数据的方式，可以分为：</p>
<ul>
<li>基于集合的Source</li>
<li>基于Socket网络端口的Source</li>
<li>基于文件的Source</li>
<li>第三方Connector Source</li>
<li>自定义Source</li>
</ul>
<p>在此我仅介绍 第三方Connector Source 和 自定义Source</p>
<p>在实际生产环境中，为了保证flink可以高效读取数据源中的数据，通常是跟一些分布式消息中间件结合使用，例如Kafka。Flink和Kafka整合可以高效的读取数据，并且可以保证Exactly Once（精确一次性语义）</p>
<h5 id="第三方Connector-Source"><a href="#第三方Connector-Source" class="headerlink" title="第三方Connector Source"></a>第三方Connector Source</h5><p>以 Kafka Source为例：首先引入依赖：flink-connector-kafka_2.12</p>
<blockquote>
<p>代码示例：</p>
</blockquote>
<pre class=" language-java"><code class="language-java">KafkaSource<span class="token operator">&lt;</span>String<span class="token operator">></span> kafkaSource <span class="token operator">=</span> KafkaSource<span class="token punctuation">.</span>&lt;String<span class="token operator">></span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setTopics</span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">)</span>	<span class="token comment" spellcheck="true">//设置主题</span>
                <span class="token punctuation">.</span><span class="token function">setGroupId</span><span class="token punctuation">(</span><span class="token string">"01"</span><span class="token punctuation">)</span>	<span class="token comment" spellcheck="true">//设置消费组ID</span>
                <span class="token punctuation">.</span><span class="token function">setBootstrapServers</span><span class="token punctuation">(</span><span class="token string">"node1:9092"</span><span class="token punctuation">)</span>	<span class="token comment" spellcheck="true">//设置kafka连接地址</span>
                <span class="token comment" spellcheck="true">//OffsetsInitializer.committedOffsets(OffsetResetStrategy.LATEST)   消费起始位移选择之前提交的偏移量（如果没有，则重置为LATEST）</span>
                <span class="token comment" spellcheck="true">//OffsetsInitializer.earliest() 消费起始位移直接选择为“最早”</span>
                <span class="token comment" spellcheck="true">//OffsetsInitializer.latest() 消费起始位移直接选择为“最新”</span>
                <span class="token comment" spellcheck="true">//OffsetsInitializer.offsets(Map&lt; TopicPartition,Long>) 消费起始位移为：方法所传入的每个分区和对应的起始偏移量</span>
                <span class="token punctuation">.</span><span class="token function">setStartingOffsets</span><span class="token punctuation">(</span>OffsetsInitializer<span class="token punctuation">.</span><span class="token function">committedOffsets</span><span class="token punctuation">(</span>OffsetResetStrategy<span class="token punctuation">.</span>LATEST<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setValueOnlyDeserializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleStringSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>	<span class="token comment" spellcheck="true">//设置反序列化Schema，SimpleStringSchema指的是读取kafka中的数据反序列化成String格式</span>

                <span class="token comment" spellcheck="true">//开启了Kafka底层消费者的自动位移提交机制，它会把最新的消费位移提交到Kafka的consumer_offsets中</span>
                <span class="token comment" spellcheck="true">//但是就算把自动位移提交机制开启，KafkaSource依然不依赖自动提交机制（宕机重启时，优先从flink算子自己的状态去获取偏移量&lt;更可靠>）</span>
                <span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"auto.offset.commit"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span>

                <span class="token comment" spellcheck="true">//把本source算子设置成 BOUNDED（有界流），将来本source去读取数据的时候，读到指定的位置，就停止读取并退出</span>
                <span class="token comment" spellcheck="true">//常用来补数或者重跑一段历史数据</span>
                <span class="token comment" spellcheck="true">//.setBounded(OffsetsInitializer.committedOffsets());</span>
                <span class="token comment" spellcheck="true">//把本source算子设置成 UNBOUNDED（无界流），但是并不会一直读取数据，而是达到指定位置就停止读取，但程序不退出</span>
                <span class="token comment" spellcheck="true">//主要应用场景：   需要从Kafka中读取某一段固定长度的数据，然后拿着这段数据去跟真正的无界流联合处理</span>
                <span class="token comment" spellcheck="true">//.setUnbounded(OffsetsInitializer.latest())</span>

                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>flink会把kafka消费者的消费位移记录在算子状态中，这样就实现了消费位移状态的容错，从而可以支持端到端的exactly-once</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230514185841763.png" alt="image-20230514185841763"><figcaption>image-20230514185841763</figcaption></figure></p>
<h5 id="自定义Source"><a href="#自定义Source" class="headerlink" title="自定义Source"></a>自定义Source</h5><p>本质上就是定义一个类，实现SourceFunction或继承RichParallelSourceFunction，实现run方法和cancel方法</p>
<blockquote>
<p>代码示例：</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyParallelSource</span> <span class="token keyword">extends</span> <span class="token class-name">RichParallelSourceFunction</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义一个 int 类型的变量，从 1 开始</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义一个 flag 标标志</span>
    <span class="token comment" spellcheck="true">//run 方法就是用来读取外部的数据或产生数据的逻辑</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>SourceContext<span class="token operator">&lt;</span>String<span class="token operator">></span> ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//满足 while 循环的条件，就将数据通过 SourceContext 收集起来</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> flag<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//为避免太快，睡眠 1 秒</span>
        ctx<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token string">"data："</span> <span class="token operator">+</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将数据通过 SourceContext 收集起来</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//cancel 方法就是让 Source 停止</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//将 flag 设置成 false，即停止 Source</span>
        flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>flink</tag>
      </tags>
  </entry>
  <entry>
    <title>关于数据仓库hive知识的学习(2)</title>
    <url>/2023/05142227.html</url>
    <content><![CDATA[<h3 id="第6章-SQL快速掌握"><a href="#第6章-SQL快速掌握" class="headerlink" title="第6章 SQL快速掌握"></a>第6章 SQL快速掌握</h3><h4 id="6-1-sql的运算模型-–-逐行运算模型"><a href="#6-1-sql的运算模型-–-逐行运算模型" class="headerlink" title="6.1 sql的运算模型 – 逐行运算模型"></a>6.1 sql的运算模型 – 逐行运算模型</h4><p>逐行运算：select后的运算表达式，是对每一行独立运算</p>
<p>表：一个数据的集合（集合中每一行就是一条数据：记录）</p>
<pre><code>select：
    对一条数据的运算逻辑
    -- 常量 :&quot;ok&quot; ,10 ,8.9
    -- 变量 : id , name ,  age,
    -- 运算符表达式：  age+10,  id+8 , id&gt;8  , id&gt;2 and id&lt;9
    -- 函数表达式：  upper(name) , greatest(s1,s2,s3) 
    -- 复合表达式：  greatest(s1,s2,s3)&gt;2 , greatest(s1,s2,s3)+10 , lower(substr(upper(name),0,3))
</code></pre>
<pre><code>from ：选择一个运算的数据集	 
</code></pre>
<pre><code>join：准备数据集（它可以将多个数据集拼成一个数据集，拼的时候可以带条件）
join的拼接有多种方式：
t1 join t2  --&gt; 笛卡尔积,结果的总行数的t1的行数*t2的行数；
t1 join t2 on t1.id=t2.id  --&gt;内连接，满足拼接条件的才拼接..
t1 left join t2 on t1.id=t2.id --&gt; 左（外）连接 left outer join ;左表所有行都保留，连接不上的右表字段为null
t1 right join t2 on t1.id=t2.id --&gt;右（外）连接 right outer join;右表的所有行都保留，连接不上的左表字段为null
t1 full join t2  on t1.id=t2.id --&gt;全（外）连接 full outer join;左、右表的行都保留，拼不上的字段为null
-- hive不支持不等值join
-- hive中有一种特别的join
    left semi join  --&gt;左半连接，是sql中in子句的一个变种实现！
    hive1.x中不支持in，现在的新版本hive支持in子句
</code></pre>
<pre><code>where：逐行过滤将要运算的数据集,where执行在select之前
   -- where id&gt;2
   -- where (id+10)&gt;2
   -- where upper(name) = &#39;ZHANGSAN&#39;
   -- where id in (select id from t_x)
</code></pre>
<pre><code>group by：
函数：类似java代码中的方法，接收变量，返回结果，也就是一个表达式
having：
紧跟group by之后，是对分组后的数据进行按组过滤，将不满足条件表达式的组去除；
</code></pre>
<h4 id="6-2-sql运算模型–分组聚合运算"><a href="#6-2-sql运算模型–分组聚合运算" class="headerlink" title="6.2 sql运算模型–分组聚合运算"></a>6.2 sql运算模型–分组聚合运算</h4><p>– 分组运算模型中，select后面的表达式只能有如下情形：</p>
<ol>
<li>常量</li>
<li>分组key</li>
<li>聚合函数</li>
</ol>
<h4 id="6-3-sql运算模型–开窗运算（窗口分析运算模型）"><a href="#6-3-sql运算模型–开窗运算（窗口分析运算模型）" class="headerlink" title="6.3 sql运算模型–开窗运算（窗口分析运算模型）"></a>6.3 sql运算模型–开窗运算（窗口分析运算模型）</h4><p>– 可以用窗口分析函数：row_number() over() 来实现</p>
<p>row_number() over(partition by sex order by salary desc) as rn</p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hive</tag>
      </tags>
  </entry>
  <entry>
    <title>关于数据仓库hive知识的学习</title>
    <url>/2023/042713923.html</url>
    <content><![CDATA[<p>hive在离线数据仓库中十分常用，那么hive是什么呢？有什么用？它是怎么工作的？怎么使用它？下面这篇文章将一一解答你的问题！</p>
<h3 id="第1章-hive入门"><a href="#第1章-hive入门" class="headerlink" title="第1章 hive入门"></a>第1章 hive入门</h3><h4 id="1-1-什么是hive"><a href="#1-1-什么是hive" class="headerlink" title="1.1 什么是hive"></a>1.1 什么是hive</h4><p>hive是基于hadoop的一个数据仓库工具，可以将结构化的数据文件映射为一张表，并提供类SQL查询功能（HQL）。</p>
<p>1)hive处理的数据存储在HDFS<br>2)hive分析数据底层的实现是Mapreduce&#x2F;Spark（分布式运行框架）<br>3)执行程序运行在yarn上</p>
<h4 id="1-2-hive的优缺点"><a href="#1-2-hive的优缺点" class="headerlink" title="1.2 hive的优缺点"></a>1.2 hive的优缺点</h4><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ol>
<li>操作接口采用类SQL语法，提供快速开发的能力（简单、容易上手）</li>
<li>避免了去写Mapreduce，减少开发人员的学习成本</li>
<li>hive的执行<strong>延迟比较高</strong>，因此hive常用于数据分析，对实时性要求不高的场合（历史数据分析等）</li>
<li>hive优势在于处理大数据，对于处理小数据没有优势，因为hive的执行延迟比较高</li>
<li>hive支持用户<strong>自定义函数</strong>，用户可以根据自己的需求来实现自己的函数</li>
</ol>
<h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ol>
<li><p>hive的HQL表达能力有限</p>
<p>（1）迭代式算法无法表达</p>
<p>（2）数据挖掘方面不擅长</p>
</li>
<li><p>hive的效率比较低</p>
<p>（1）hive自动生成的Mapreduce作业，通常情况下不够智能化</p>
<p>（2）hive调优比较困难，粒度较粗（快）</p>
</li>
</ol>
<h4 id="1-3-hive的应用场景"><a href="#1-3-hive的应用场景" class="headerlink" title="1.3 hive的应用场景"></a>1.3 hive的应用场景</h4><p>①hive不适合需要低延迟的应用<br>②hive不是为联机事务处理而设计的，hive不提供实时的查询和基于行级的数据更新操作<br>③hive的最佳使用场合是大数据集的批处理作业，如网络日志分析</p>
<h4 id="1-4-hive架构及工作原理"><a href="#1-4-hive架构及工作原理" class="headerlink" title="1.4 hive架构及工作原理"></a>1.4 hive架构及工作原理</h4><p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/hive%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86.png" alt="image-20230427164622923"><figcaption>image-20230427164622923</figcaption></figure></p>
<ol>
<li><p>用户接口：Client</p>
<p>CLI（hive shell）、JDBC（java访问hive）、WEB UI（浏览器访问hive）</p>
</li>
<li><p>元数据：Metastore</p>
<p>元数据包括：表名、列名、分区、表属性等信息称为hive元数据</p>
<p>默认存储在内嵌的derby数据库中，推荐使用MySQL存储Metastore。为什么呢？<strong>因为derby只能允许一个会话连接，而MySQL支持多用户会话</strong></p>
<p>那为什么不存储在hdfs中呢？<strong>因为hive元数据可能面临不断更新、修改和读取，不适合使用hdfs进行存储</strong></p>
</li>
<li><p>Hadoop</p>
<p>使用hdfs进行存储，使用Mapreduce进行计算</p>
</li>
<li><p>驱动器：Driver</p>
<ul>
<li>解析器(SQLParser): 将HQL字符串转换成抽象语法树AST，这一步一般都用第三方工具库完成，比如antlr；对AST进行 语法 分析，比如表是否存在、字段是否存在、SQL语义是否有误</li>
<li>编译器(Compiler)： 对hql语句进行词法、语法、语义的编译(需要跟元数据关联)，编译完成后会生成一个执行计划。 hive上就是编译成mapreduce的job</li>
<li>优化器(Optimizer)： 将执行计划进行优化，减少不必要的列、使用分区、使用索引等。优化job</li>
<li>执行器(Executer): 将优化后的执行计划提交给hadoop的yarn上执行。提交job</li>
</ul>
</li>
</ol>
<h5 id="hive工作原理"><a href="#hive工作原理" class="headerlink" title="hive工作原理"></a>hive工作原理</h5><p>①由hive驱动模块中的编译器对用户输入的HQL语言进行词法和语法解析，将HQL语句转换成抽象语法树AST<br>②由于抽象语法树的结构仍很复杂，因此，把抽象语法树转化为查询块<br>③把查询块转换为逻辑查询计划，里面包含了许多逻辑操作符<br>④重写逻辑查询计划，进行优化，合并多余操作，减少Mapreduce任务数量<br>⑤将逻辑操作符转换为需要执行的具体的Mapreduce任务<br>⑥对生成的Mapreduce任务进行优化，生成最终的Mapreduce任务执行计划<br>⑦由hive驱动模块中的执行器对最终的Mapreduce任务进行执行输出</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230427170924636.png" alt="image-20230427170924636"><figcaption>image-20230427170924636</figcaption></figure></p>
<h4 id="1-5-hive和传统数据库比较"><a href="#1-5-hive和传统数据库比较" class="headerlink" title="1.5 hive和传统数据库比较"></a>1.5 hive和传统数据库比较</h4><ul>
<li>数据存储格式不同：hive没有专门的数据存储格式，只需要在创建表时指定数据的列分隔符和行分隔符，hive就可以解析数据；传统数据库的数据存储格式由系统预先定义</li>
<li>数据验证不同：hive在数据加载过程中不进行数据验证，而是在数据查询时才进行验证；传统数据库在数据加载时进行验证，因此hive加载数据比传统数据库快</li>
<li>DML操作不同：hive不支持数据更新操作，支持批量数据导入；传统数据库支持各种DML操作，支持数据更新、单条或批量数据导入</li>
<li>延迟性不同：hive操作延迟性高，不适合低延迟操作；传统数据库延迟性低，适合低延迟操作</li>
<li>数据规模不同：hive存储在hdfs中，利用Mapreduce进行并行计算，适合大规模数据操作；传统数据库主要采用本地文件系统存储数据，存在容量上限，在本地运行，数据处理能力有限</li>
</ul>
<h3 id="第2章-hive安装部署"><a href="#第2章-hive安装部署" class="headerlink" title="第2章 hive安装部署"></a>第2章 hive安装部署</h3><p>这里附上一篇链接，我就不进行赘述了</p>
<p>[参考文章]: <a class="link" href="https://blog.csdn.net/W_chuanqi/article/details/130242723">https://blog.csdn.net/W_chuanqi/article/details/130242723 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>	“HIve安装配置（超详细）”</p>
<h3 id="第3章-hive数据类型"><a href="#第3章-hive数据类型" class="headerlink" title="第3章 hive数据类型"></a>第3章 hive数据类型</h3><h4 id="3-1-数据类型概述"><a href="#3-1-数据类型概述" class="headerlink" title="3.1 数据类型概述"></a>3.1 数据类型概述</h4><h5 id="3-1-1-基本数据类型"><a href="#3-1-1-基本数据类型" class="headerlink" title="3.1.1 基本数据类型"></a>3.1.1 基本数据类型</h5><p>TINYINT、SMALLINT、INT、BIGINT、BOOLEAN、FLOAT、DOUBLE、STRING、TIMESTAM-时间类型、BINARY-字节数组</p>
<h5 id="3-1-2-集合数据类型"><a href="#3-1-2-集合数据类型" class="headerlink" title="3.1.2 集合数据类型"></a>3.1.2 集合数据类型</h5><ul>
<li><p>STRUCT</p>
<p>和c语言中的struct类似，都可以通过“点”符号访问元素内容。例如，如果某个列的数据类型是STRUCT{first STRING, last STRING}，那么第1个元素可以通过字段’ .first ‘来引用</p>
</li>
<li><p>MAP</p>
<p>MAP是一组键-值对元组集合，使用数组标识法可以访问数据。例如，如果某个列的数据类型是MAP，其中键-&gt;值对是’ first ‘ -&gt;’ John ‘ 和 ‘ last ‘-&gt;’ Doe ‘，那么可以通过字段名[‘ last ‘]获取最后一个元素</p>
</li>
<li><p>ARRAY</p>
<p>数组是一组具有相同类型和名称的变量的集合。这些变量称为数组的元素，每个数组元素都有一个编号，编号从零开始。例如，数组值为[‘ John ‘,’ Doe ‘]，那么第2个元素可以通过数组名[1]进行引用</p>
</li>
</ul>
<h4 id="3-2-数据类型详解"><a href="#3-2-数据类型详解" class="headerlink" title="3.2 数据类型详解"></a>3.2 数据类型详解</h4><h5 id="3-2-1-数字类型"><a href="#3-2-1-数字类型" class="headerlink" title="3.2.1 数字类型"></a>3.2.1 数字类型</h5><p>TINYINT(1字节整数)<br>SMALLINT (2字节整数)<br>INT&#x2F;INTEGER (4字节整数)<br>BIGINT (8字节整数)<br>FLOAT (4字节浮点数)<br>DOUBLE (8字节双精度浮点数)</p>
<p>示例：<br><strong>create table t_test(a string ,b int,c bigint,d float,e double,f tinyint,g smallint)</strong></p>
<h5 id="3-2-2-时间类型"><a href="#3-2-2-时间类型" class="headerlink" title="3.2.2 时间类型"></a>3.2.2 时间类型</h5><p>TIMESTAMP（时间戳）–包含年月日时分毫秒的一种封装<br>DATE（日期）–只包含年月日<br></p>
<p>示例，假如有以下数据：<br>		1,zhangsan,1985-06-30<br>		2,lisi,1986-07-10<br>		3,wangwu,1985-08-09<br>那么，就可以建立一个表来对数据进行映射<br><strong>create table t_customer(id int, name string, birthday date)<br>row format delimited fields terminated by ‘,’;</strong><br>然后导入数据<br><strong>load data local inpath ‘&#x2F;root&#x2F;customer.dat’ into table t_customer;</strong></p>
<h5 id="3-2-3-字符串类型"><a href="#3-2-3-字符串类型" class="headerlink" title="3.2.3 字符串类型"></a>3.2.3 字符串类型</h5><p>STRING<br>VARCHAR(字符串1-65355长度，超长截断)<br>CHAR (字符串，最大长度255)</p>
<h5 id="3-2-4-其他类型"><a href="#3-2-4-其他类型" class="headerlink" title="3.2.4 其他类型"></a>3.2.4 其他类型</h5><p>BOOLEAN（布尔类型）：true false<br>BINARY (二进制数组)</p>
<h5 id="3-2-5-集合类型"><a href="#3-2-5-集合类型" class="headerlink" title="3.2.5 集合类型"></a>3.2.5 集合类型</h5><h6 id="3-2-5-1-STRUCT举例"><a href="#3-2-5-1-STRUCT举例" class="headerlink" title="3.2.5.1 STRUCT举例"></a>3.2.5.1 STRUCT举例</h6><p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230427182958022.png" alt="image-20230427182958022"><figcaption>image-20230427182958022</figcaption></figure></p>
<h6 id="3-2-5-2-MAP举例"><a href="#3-2-5-2-MAP举例" class="headerlink" title="3.2.5.2 MAP举例"></a>3.2.5.2 MAP举例</h6><p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230427182914489.png" alt="image-20230427182914489"><figcaption>image-20230427182914489</figcaption></figure></p>
<h6 id="3-2-5-3-ARRAY举例"><a href="#3-2-5-3-ARRAY举例" class="headerlink" title="3.2.5.3 ARRAY举例"></a>3.2.5.3 ARRAY举例</h6><p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230427183049077.png" alt="image-20230427183049077"><figcaption>image-20230427183049077</figcaption></figure></p>
<h4 id="3-3-类型转换"><a href="#3-3-类型转换" class="headerlink" title="3.3 类型转换"></a>3.3 类型转换</h4><h5 id="3-3-1-隐式转换"><a href="#3-3-1-隐式转换" class="headerlink" title="3.3.1 隐式转换"></a>3.3.1 隐式转换</h5><p>粗粒度–&gt;细粒度</p>
<h5 id="3-3-2-使用CAST操作"><a href="#3-3-2-使用CAST操作" class="headerlink" title="3.3.2 使用CAST操作"></a>3.3.2 使用CAST操作</h5><p>例如 CAST(‘1’ AS INT)会把字符串’1’转换成整数1；如果强制类型转换失败，如执行 CAST(‘X’ AS INT)，表达式返回空值NULL</p>
<h3 id="第4章-DDL语言"><a href="#第4章-DDL语言" class="headerlink" title="第4章 DDL语言"></a>第4章 DDL语言</h3><h4 id="4-1-创建数据库"><a href="#4-1-创建数据库" class="headerlink" title="4.1 创建数据库"></a>4.1 创建数据库</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> db_hive location <span class="token keyword">on</span> <span class="token string">'在hdfs上的位置'</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="4-2-查询数据库"><a href="#4-2-查询数据库" class="headerlink" title="4.2 查询数据库"></a>4.2 查询数据库</h4><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">//显示数据库</span>
<span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//查询通配符匹配的数据库</span>
<span class="token keyword">show</span> <span class="token keyword">databases</span> <span class="token operator">like</span> <span class="token string">'db_hive*'</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//显示数据库详细信息</span>
<span class="token keyword">desc</span> <span class="token keyword">database</span> <span class="token punctuation">[</span>extend<span class="token punctuation">]</span> db_hive<span class="token punctuation">;</span>
</code></pre>
<h4 id="4-3-修改数据库"><a href="#4-3-修改数据库" class="headerlink" title="4.3 修改数据库"></a>4.3 修改数据库</h4><p>用户可以使用ALTER DATABASE命令为某个数据库的DBPROPERTIES设置键-值对属性值，来描述这个数据库的属性信息，不可以修改数据库元数据信息</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">database</span> db_hive <span class="token keyword">set</span> dbproperties<span class="token punctuation">(</span><span class="token string">'createtime'</span><span class="token operator">=</span><span class="token string">'20170830'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="4-4-删除数据库"><a href="#4-4-删除数据库" class="headerlink" title="4.4 删除数据库"></a>4.4 删除数据库</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">databases</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> db_hive<span class="token punctuation">;</span> 

<span class="token comment" spellcheck="true">//如果数据库不为空，可以采用cascade命令，级联删除</span>
<span class="token keyword">drop</span> <span class="token keyword">database</span> db_hive <span class="token keyword">cascade</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="4-5-创建表"><a href="#4-5-创建表" class="headerlink" title="4.5 创建表"></a>4.5 创建表</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token punctuation">[</span>EXTERNAL<span class="token punctuation">]</span> <span class="token keyword">TABLE</span> <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span> table_name 	<span class="token comment" spellcheck="true">//①EXTERNAL关键字可以让用户创建一个外部表，在建表的同时指定一个指向实际数据的路径（LOCATION），Hive创建内部表时，会将数据移动到数据仓库指向的路径；若创建外部表，仅记录数据所在的路径，不对数据的位置做任何改变。在删除表的时候，内部表的元数据和数据会被一起删除，而外部表只删除元数据，不删除数据。</span>
<span class="token punctuation">[</span><span class="token punctuation">(</span>col_name data_type <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> col_comment<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">]</span> 
<span class="token punctuation">[</span><span class="token keyword">COMMENT</span> table_comment<span class="token punctuation">]</span> 	<span class="token comment" spellcheck="true">//COMMENT：为表和列添加注释。</span>

<span class="token punctuation">[</span>PARTITIONED <span class="token keyword">BY</span> <span class="token punctuation">(</span>col_name data_type <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> col_comment<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">]</span>	<span class="token comment" spellcheck="true">//PARTITIONED BY创建分区表</span>
<span class="token punctuation">[</span><span class="token keyword">CLUSTERED</span> <span class="token keyword">BY</span> <span class="token punctuation">(</span>col_name<span class="token punctuation">,</span> col_name<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">]</span>	<span class="token comment" spellcheck="true">//CLUSTERED BY创建分桶表</span>
<span class="token punctuation">[</span>SORTED <span class="token keyword">BY</span> <span class="token punctuation">(</span>col_name <span class="token punctuation">[</span><span class="token keyword">ASC</span><span class="token operator">|</span><span class="token keyword">DESC</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">INTO</span> num_buckets BUCKETS<span class="token punctuation">]</span> 	<span class="token comment" spellcheck="true">//SORTED BY不常用</span>

<span class="token punctuation">[</span><span class="token keyword">ROW</span> FORMAT row_format<span class="token punctuation">]</span>   <span class="token keyword">row</span> format delimited <span class="token keyword">fields</span> <span class="token keyword">terminated by</span> “分隔符”
<span class="token punctuation">[</span>STORED <span class="token keyword">AS</span> file_format<span class="token punctuation">]</span>	<span class="token comment" spellcheck="true">//STORED AS指定存储文件类型。常用的存储文件类型：SEQUENCEFILE（hadoop_kv序列文件）、TEXTFILE（文本）、RCFILE（列式存储格式文件）、PARQUETFILE(列式存储文件）。如果文件数据是纯文本，可以使用STORED AS TEXTFILE。如果数据需要压缩，使用 STORED AS SEQUENCEFILE。</span>
<span class="token punctuation">[</span>LOCATION hdfs_path<span class="token punctuation">]</span>	<span class="token comment" spellcheck="true">//LOCATION ：指定表在HDFS上的存储位置。</span>
<span class="token punctuation">[</span><span class="token operator">LIKE</span><span class="token punctuation">]</span>	<span class="token comment" spellcheck="true">//LIKE允许用户复制现有的表结构，但是不复制数据.</span>
</code></pre>
<h5 id="4-5-1-内部表（也称“管理表”）"><a href="#4-5-1-内部表（也称“管理表”）" class="headerlink" title="4.5.1 内部表（也称“管理表”）"></a>4.5.1 内部表（也称“管理表”）</h5><p>在上面代码块中的第①个解释中已说明</p>
<h5 id="4-5-2-外部表"><a href="#4-5-2-外部表" class="headerlink" title="4.5.2 外部表"></a>4.5.2 外部表</h5><p>同上</p>
<h5 id="4-5-3-内部表与外部表的互相转换"><a href="#4-5-3-内部表与外部表的互相转换" class="headerlink" title="4.5.3 内部表与外部表的互相转换"></a>4.5.3 内部表与外部表的互相转换</h5><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">//查询student1、student2表的类型</span>
<span class="token keyword">desc</span> formatted student1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--内部表</span>
<span class="token keyword">desc</span> formatted student2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--外部表</span>
<span class="token comment" spellcheck="true">//修改内部表student1为外部表</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">set</span> tblproperties<span class="token punctuation">(</span><span class="token string">'EXTERNAL'</span><span class="token operator">=</span><span class="token string">'TRUE'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//修改外部表student2为内部表</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> student2 <span class="token keyword">set</span> tblproperties<span class="token punctuation">(</span><span class="token string">'EXTERNAL'</span><span class="token operator">=</span><span class="token string">'FALSE'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

注意：<span class="token punctuation">(</span><span class="token string">'EXTERNAL'</span><span class="token operator">=</span><span class="token string">'TRUE'</span><span class="token punctuation">)</span>和<span class="token punctuation">(</span><span class="token string">'EXTERNAL'</span><span class="token operator">=</span><span class="token string">'FALSE'</span><span class="token punctuation">)</span>为固定写法，区分大小写！
</code></pre>
<h4 id="4-6-分区表"><a href="#4-6-分区表" class="headerlink" title="4.6 分区表"></a>4.6 分区表</h4><p>hive中的分区就是分目录</p>
<h5 id="4-6-1-静态分区"><a href="#4-6-1-静态分区" class="headerlink" title="4.6.1 静态分区"></a>4.6.1 静态分区</h5><p>创建静态分区表语法</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> 表名 <span class="token keyword">partition</span><span class="token punctuation">(</span>字段名 字段类型<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> partitioned <span class="token keyword">by</span><span class="token punctuation">(</span>分区字段名 分区字段类型<span class="token punctuation">)</span>
<span class="token keyword">row</span> format delimited <span class="token keyword">fields</span> <span class="token keyword">terminated by</span> <span class="token string">'\t'</span><span class="token punctuation">;</span>
</code></pre>
<p>加载数据到分区表中</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">load</span> <span class="token keyword">data</span> <span class="token keyword">local</span> inpath <span class="token string">'本地文件路径'</span> <span class="token keyword">into</span> <span class="token keyword">table</span> 数据库名<span class="token punctuation">.</span>表名 <span class="token keyword">partition</span><span class="token punctuation">(</span>分区字段名<span class="token operator">=</span><span class="token string">'分区字段值'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>增加分区</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">add</span> <span class="token keyword">partition</span><span class="token punctuation">(</span>分区字段名<span class="token operator">=</span><span class="token string">'分区字段值1'</span><span class="token punctuation">)</span> <span class="token keyword">partition</span><span class="token punctuation">(</span>分区字段名<span class="token operator">=</span><span class="token string">'分区字段值2'</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
</code></pre>
<p>删除分区</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">drop</span> <span class="token keyword">partition</span><span class="token punctuation">(</span>分区字段名<span class="token operator">=</span><span class="token string">'分区字段值1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">partition</span><span class="token punctuation">(</span>分区字段名<span class="token operator">=</span><span class="token string">'分区字段值2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
</code></pre>
<p>查看分区表分区</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> partitions 表名<span class="token punctuation">;</span>
</code></pre>
<p>多级分区：partitioned by 多个分区字段</p>
<p>把数据导入分区的三种方式：<br>(1)方式1：上传数据后修复<br>(2)方式2：上传数据后添加分区<br>(3)方式3：创建文件夹后load数据到分区</p>
<h5 id="4-6-2-动态分区"><a href="#4-6-2-动态分区" class="headerlink" title="4.6.2 动态分区"></a>4.6.2 动态分区</h5><p>按照某个字段的不同值自动将数据加载到不同分区中</p>
<p>创建动态分区表</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> 表名<span class="token punctuation">(</span>字段名 字段类型<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> partitioned <span class="token keyword">by</span><span class="token punctuation">(</span>分区字段名 分区字段类型<span class="token punctuation">)</span>
<span class="token keyword">row</span> format delimited <span class="token keyword">fields</span> <span class="token keyword">terminated by</span> <span class="token string">'\t'</span><span class="token punctuation">;</span>
</code></pre>
<p>设置开启动态分区参数</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>dynamic<span class="token punctuation">.</span><span class="token keyword">partition</span><span class="token operator">=</span><span class="token boolean">true</span> <span class="token comment" spellcheck="true">//使用动态分区</span>
<span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>dynamic<span class="token punctuation">.</span><span class="token keyword">partition</span><span class="token punctuation">.</span>mode<span class="token operator">=</span>nonstrick<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//无限制模式，如果模式是strict，则必须有一个静态分区且放在最前面</span>
<span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>max<span class="token punctuation">.</span>dynamic<span class="token punctuation">.</span>partitions<span class="token punctuation">.</span>pernode<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//每个节点生成动态分区的最大个数</span>
<span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>max<span class="token punctuation">.</span>dynamic<span class="token punctuation">.</span>partitions<span class="token operator">=</span><span class="token number">100000</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//生成动态分区的最大个数</span>
<span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>max<span class="token punctuation">.</span>created<span class="token punctuation">.</span>files<span class="token operator">=</span><span class="token number">150000</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//一个任务最多可以创建的文件数目</span>
<span class="token keyword">set</span> dfs<span class="token punctuation">.</span>datanode<span class="token punctuation">.</span>max<span class="token punctuation">.</span>xcievers<span class="token operator">=</span><span class="token number">8192</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//限定一次最多打开的文件数</span>
<span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">merge</span><span class="token punctuation">.</span>mapfiles<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// map端的结果进行合并</span>
<span class="token keyword">set</span> mapreduce<span class="token punctuation">.</span>reduce<span class="token punctuation">.</span>tasks <span class="token operator">=</span><span class="token number">20000</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//设置reduce task个数  增加reduce阶段的并行度</span>
</code></pre>
<p>加载数据</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span>  <span class="token keyword">table</span> demo2 <span class="token keyword">partition</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">--此处的分区变量x应该跟demo2中的分区变量名一致</span>
<span class="token keyword">select</span> id<span class="token punctuation">,</span> cost<span class="token punctuation">,</span> birthday <span class="token keyword">from</span> demo<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--select中的最后一个表达式birthday，会作为分区变量x的动态值，注意顺序</span>
</code></pre>
<p>4.8 SerDe组件</p>
<p>SerDe是Serialize&#x2F;Deserilize的简称，目的是用于序列化和反序列化。<br>用户在建表时可以用自定义的SerDe或使用Hive自带的SerDe，SerDe能为表切分、解析列，且对列指定相应的数据。</p>
<p>创建表</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">(</span>字段名 字段类型<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
<span class="token keyword">row</span> format serde <span class="token string">'org.apache.hadoop.hive.serde2.RegexSerDe'</span> 
<span class="token keyword">with</span> serdeproperties <span class="token punctuation">(</span><span class="token string">"input.regex"</span> <span class="token operator">=</span> <span class="token string">"id=(.*),name=(.*)"</span><span class="token punctuation">)</span> 
stored <span class="token keyword">as</span> textfile<span class="token punctuation">;</span>
</code></pre>
<h3 id="第5章-数据导入导出操作"><a href="#第5章-数据导入导出操作" class="headerlink" title="第5章 数据导入导出操作"></a>第5章 数据导入导出操作</h3><h4 id="5-1-数据导入"><a href="#5-1-数据导入" class="headerlink" title="5.1 数据导入"></a>5.1 数据导入</h4><h5 id="5-1-1-使用load向表中装载数据"><a href="#5-1-1-使用load向表中装载数据" class="headerlink" title="5.1.1 使用load向表中装载数据"></a>5.1.1 使用load向表中装载数据</h5><pre class=" language-SQL"><code class="language-SQL">load data [local] inpath '/opt/module/datas/student.txt' [overwrite] into table student [partition (partcol1=val1,…)];
</code></pre>
<ol>
<li>load data：表示加载数据</li>
<li>local：表示从本地加载数据到hive表；否则从HDFS加载数据到hive表</li>
<li>inpath：表示加载数据的路径</li>
<li>overwrite：表示覆盖表中已有数据，否则表示追加</li>
<li>into table：表示加载到哪张表</li>
<li>student：表示具体的表</li>
<li>partition：表示上传到指定分区</li>
</ol>
<h5 id="5-1-2-使用insert…values向表中插入数据"><a href="#5-1-2-使用insert…values向表中插入数据" class="headerlink" title="5.1.2 使用insert…values向表中插入数据"></a>5.1.2 使用insert…values向表中插入数据</h5><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">table</span>  student1 <span class="token keyword">partition</span><span class="token punctuation">(</span>month<span class="token operator">=</span><span class="token string">'201709'</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'wangwu'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h5 id="5-1-3-使用insert…select向表中插入数据"><a href="#5-1-3-使用insert…select向表中插入数据" class="headerlink" title="5.1.3 使用insert…select向表中插入数据"></a>5.1.3 使用insert…select向表中插入数据</h5><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> overwrite <span class="token keyword">table</span> student2 <span class="token keyword">partition</span><span class="token punctuation">(</span>month<span class="token operator">=</span><span class="token string">'201708'</span><span class="token punctuation">)</span> <span class="token keyword">select</span> id<span class="token punctuation">,</span> name <span class="token keyword">from</span> student1 <span class="token keyword">where</span> month<span class="token operator">=</span><span class="token string">'201709'</span><span class="token punctuation">;</span>
</code></pre>
<h5 id="5-1-4-用create-as创建表并加载数据"><a href="#5-1-4-用create-as创建表并加载数据" class="headerlink" title="5.1.4 用create as创建表并加载数据"></a>5.1.4 用create as创建表并加载数据</h5><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> student3
<span class="token keyword">as</span> 
<span class="token keyword">select</span> id<span class="token punctuation">,</span> name <span class="token keyword">from</span> student<span class="token punctuation">;</span>
</code></pre>
<h5 id="5-1-5-创建表时通过指定location加载数据路径"><a href="#5-1-5-创建表时通过指定location加载数据路径" class="headerlink" title="5.1.5 创建表时通过指定location加载数据路径"></a>5.1.5 创建表时通过指定location加载数据路径</h5><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> student4<span class="token punctuation">(</span>id <span class="token keyword">int</span><span class="token punctuation">,</span> name string<span class="token punctuation">)</span> <span class="token keyword">row</span> format delimited <span class="token keyword">fields</span> <span class="token keyword">terminated by</span> <span class="token string">'\t'</span> location <span class="token string">'/user/hive/warehouse/student4'</span><span class="token punctuation">;</span>
</code></pre>
<h5 id="5-1-6-import数据到指定Hive表中"><a href="#5-1-6-import数据到指定Hive表中" class="headerlink" title="5.1.6 import数据到指定Hive表中"></a>5.1.6 import数据到指定Hive表中</h5><pre class=" language-sql"><code class="language-sql"><span class="token keyword">import</span> <span class="token keyword">table</span> student2 <span class="token keyword">partition</span><span class="token punctuation">(</span>month<span class="token operator">=</span><span class="token string">'201709'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> <span class="token string">'/user/hive/warehouse/export/student'</span><span class="token punctuation">;</span>
</code></pre>
<blockquote>
<p>注意：先用export导出后，再将数据导入</p>
</blockquote>
<h4 id="5-2-数据导出"><a href="#5-2-数据导出" class="headerlink" title="5.2 数据导出"></a>5.2 数据导出</h4><h5 id="5-2-1-insert导出"><a href="#5-2-1-insert导出" class="headerlink" title="5.2.1 insert导出"></a>5.2.1 insert导出</h5><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> overwrite <span class="token punctuation">[</span><span class="token keyword">local</span><span class="token punctuation">]</span> directory <span class="token string">'/opt/module/datas/export/student1'</span>
<span class="token keyword">ROW</span> FORMAT DELIMITED <span class="token keyword">FIELDS</span> <span class="token keyword">TERMINATED BY</span> <span class="token string">'\t'</span>             
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span>
</code></pre>
<h5 id="5-2-2-export导出到HDFS上"><a href="#5-2-2-export导出到HDFS上" class="headerlink" title="5.2.2 export导出到HDFS上"></a>5.2.2 export导出到HDFS上</h5><pre class=" language-sql"><code class="language-sql">export <span class="token keyword">table</span> <span class="token keyword">default</span><span class="token punctuation">.</span>student <span class="token keyword">to</span> <span class="token string">'/user/hive/warehouse/export/student'</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="5-3-清除表中数据（Truncate）"><a href="#5-3-清除表中数据（Truncate）" class="headerlink" title="5.3 清除表中数据（Truncate）"></a>5.3 清除表中数据（Truncate）</h4><pre class=" language-sql"><code class="language-sql"> <span class="token keyword">truncate</span> <span class="token keyword">table</span> student<span class="token punctuation">;</span>
</code></pre>
<blockquote>
<p>注意：Truncate只能删除管理表（内部表），不能删除外部表中数据</p>
</blockquote>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hive</tag>
      </tags>
  </entry>
  <entry>
    <title>关于日志采集系统Flume知识的学习</title>
    <url>/2023/050462077.html</url>
    <content><![CDATA[<h3 id="第1章-Flume概述"><a href="#第1章-Flume概述" class="headerlink" title="第1章 Flume概述"></a>第1章 Flume概述</h3><h4 id="1-1-Flume定义"><a href="#1-1-Flume定义" class="headerlink" title="1.1 Flume定义"></a>1.1 Flume定义</h4><p>Flume是一个<strong>高可用，高可靠的，分布式的海量日志采集、聚合和传输的系统</strong><br>Flume基于流式架构，灵活简单<br>Flume最主要的作用就是，<strong>实时读取服务器本地磁盘的数据，将数据写入到HDFS</strong></p>
<h4 id="1-2-Flume基础架构"><a href="#1-2-Flume基础架构" class="headerlink" title="1.2 Flume基础架构"></a>1.2 Flume基础架构</h4><p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230504100830651.png" alt="image-20230504100830651"><figcaption>image-20230504100830651</figcaption></figure></p>
<h5 id="1-2-1-Agent"><a href="#1-2-1-Agent" class="headerlink" title="1.2.1 Agent"></a>1.2.1 Agent</h5><p>Agent是一个JVM进程，它以事件的形式将数据从源头送至目的地<br>Agent主要有3个部分组成，Source、Channel、Sink</p>
<h5 id="1-2-2-Source"><a href="#1-2-2-Source" class="headerlink" title="1.2.2 Source"></a>1.2.2 Source</h5><p>Source是负责接收数据到Flume Agent组件。Source组件可以处理各种类型、各种格式的日志数据</p>
<h5 id="1-2-3-Sink"><a href="#1-2-3-Sink" class="headerlink" title="1.2.3 Sink"></a>1.2.3 Sink</h5><p>Sink不断轮询Channel中的事件且批量移除它们，并将这些事件批量写入到存储或索引系统、或者被发送到另外一个Flume Agent</p>
<h5 id="1-2-4-Channel"><a href="#1-2-4-Channel" class="headerlink" title="1.2.4 Channel"></a>1.2.4 Channel</h5><p>Channel是位于Source和Sink之间的缓冲区。因此，Channel允许Source和Sink运作在不同的速率上。Channel是线程安全的，可以同时处理几个Source的写入操作和几个Sink的读取操作<br>Flume自带两种Channel：Memory Channel 和 File Channel<br>Memory Channel是内存中的队列。Memory Channel在不需要关心数据丢失的情景下适用。如果需要关心数据丢失，那么Memory Channel就不应该使用，因为程序死亡、机器宕机或者重启都会导致数据丢失<br>File Channel将所有事件写入磁盘。因此在程序关闭或机器宕机的情况下不会丢失数据</p>
<h5 id="1-2-5-Event"><a href="#1-2-5-Event" class="headerlink" title="1.2.5 Event"></a>1.2.5 Event</h5><p>传输单元，Flume数据传输的基本单元，以Event的形式将数据从源头送至目的地。Event由Header和Body两部分组成，Header用来存放该Event的一些属性，为K-V结构，Body用来存放该条数据，形式为字节数组</p>
<h3 id="第2章-Flume入门"><a href="#第2章-Flume入门" class="headerlink" title="第2章 Flume入门"></a>第2章 Flume入门</h3><h4 id="2-1-Flume入门案例–监控端口数据"><a href="#2-1-Flume入门案例–监控端口数据" class="headerlink" title="2.1 Flume入门案例–监控端口数据"></a>2.1 Flume入门案例–监控端口数据</h4><p>使用Flume监听一个端口，收集该端口的数据，并打印到控制台</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230504111054631.png" alt="image-20230504111054631"><figcaption>image-20230504111054631</figcaption></figure></p>
<p>实现步骤：</p>
<ol>
<li><p>在 flume 目录下创建 job 文件夹并进入 job 文件夹</p>
</li>
<li><p>在 job 文件夹下创建 Flume Agent 配置文件 flume-netcat-logger.conf</p>
</li>
<li><p>在 flume-netcat-logger.conf 文件中添加如下内容</p>
<pre><code># Name the components on this agent		a1：表示agent的名称
a1.sources = r1		r1：表示a1的source的名称
a1.sinks = k1		k1：表示a1的sink名称
a1.channels = c1	c1：表示a1的channel名称

# Describe/configure the source
a1.sources.r1.type = netcat		表示a1是输入源类型为netcat端口类型
a1.sources.r1.bind = localhost	表示a1的监听的主机
a1.sources.r1.port = 44444		表示a1的监听的端口号

# Describe the sink
a1.sinks.k1.type = logger	表示a1的输出目的地是控制台logger类型

# Use a channel which buffers events in memory	
a1.channels.c1.type = memory	表示a1的channel类型是memory内存型
a1.channels.c1.capacity = 1000	表示a1的channel总容量是1000个event
a1.channels.c1.transactionCapacity = 100	表示a1的channel传输时收集到了100条event以后再去提交事务

# Bind the source and sink to the channel
a1.sources.r1.channels = c1	表示r1和c1连接起来
a1.sinks.k1.channel = c1	表示k1和c1连接起来
</code></pre>
</li>
<li><p>开启Flume监听端口<br>第1种写法：bin&#x2F;flume-ng agent –conf conf&#x2F; –name a1 –conf-file job&#x2F;flume-netcat-logger.conf -<br>Dflume.root.logger&#x3D;INFO,console<br>第2种写法：bin&#x2F;flume-ng agent -c conf&#x2F; -n a1 -f job&#x2F;flume-netcat-logger.conf -Dflume.root.logger&#x3D;INFO,console<br>参数说明：</p>
<ul>
<li>–conf&#x2F;-c：表示配置文件存储在 conf&#x2F;目录</li>
<li>–name&#x2F;-n：表示给 agent 起名为 a1</li>
<li>–conf-file&#x2F;-f：flume 本次启动读取的配置文件是在 job 文件夹下的 flume-telnet.conf<br>文件</li>
<li>-Dflume.root.logger&#x3D;INFO,console ：-D 表示 flume 运行时动态修改 flume.root.logger<br>参数属性值，并将控制台日志打印级别设置为 INFO 级别。日志级别包括:log、info、warn、<br>error</li>
</ul>
</li>
<li><p>使用 netcat 工具向本机的 44444 端口发送内容</p>
<pre><code>nc localhost 44444
</code></pre>
</li>
</ol>
<h4 id="2-2-Flume入门案例–实时监控单个追加文件"><a href="#2-2-Flume入门案例–实时监控单个追加文件" class="headerlink" title="2.2 Flume入门案例–实时监控单个追加文件"></a>2.2 Flume入门案例–实时监控单个追加文件</h4><p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="/./%E5%85%B3%E4%BA%8E%E6%97%A5%E5%BF%97%E9%87%87%E9%9B%86%E7%B3%BB%E7%BB%9FFlume%E7%9F%A5%E8%AF%86%E7%9A%84%E5%AD%A6%E4%B9%A0/image-20230505173625217.png" alt="image-20230505173625217"><figcaption>image-20230505173625217</figcaption></figure></p>
<p>这里同上一个案例的区别主要是Flume Agent 配置文件不同</p>
<p>创建配置文件 flume-file-hdfs.conf</p>
<pre><code># Name the components on this agent
a2.sources = r2
a2.sinks = k2
a2.channels = c2

# Describe/configure the source
a2.sources.r2.type = exec
# hive的日志
a2.sources.r2.command = tail -F /opt/module/hive/logs/hive.log

# Describe the sink
a2.sinks.k2.type = hdfs
a2.sinks.k2.hdfs.path = hdfs://hadoop102:8200/flume/%Y%m%d/%H
#上传文件的前缀
a2.sinks.k2.hdfs.filePrefix = logs-
#是否按照时间滚动文件夹
a2.sinks.k2.hdfs.round = true
#多少时间单位创建一个新的文件夹
a2.sinks.k2.hdfs.roundValue = 1
#重新定义时间单位
a2.sinks.k2.hdfs.roundUnit = hour
#是否使用本地时间戳
a2.sinks.k2.hdfs.useLocalTimeStamp = true
#积攒多少个 Event 才 flush 到 HDFS 一次
a2.sinks.k2.hdfs.batchSize = 100
#设置文件类型，可支持压缩
a2.sinks.k2.hdfs.fileType = DataStream
#多久生成一个新的文件
a2.sinks.k2.hdfs.rollInterval = 60
#设置每个文件的滚动大小
a2.sinks.k2.hdfs.rollSize = 134217700
#文件的滚动与 Event 数量无关
a2.sinks.k2.hdfs.rollCount = 0

# Use a channel which buffers events in memory
a2.channels.c2.type = memory
a2.channels.c2.capacity = 1000
a2.channels.c2.transactionCapacity = 100

# Bind the source and sink to the channel
a2.sources.r2.channels = c2
a2.sinks.k2.channel = c2
</code></pre>
<p><strong>注意：对于所有与时间相关的转义序列，Event Header 中必须存在以 “timestamp”的key（除非 hdfs.useLocalTimeStamp 设置为 true，此方法会使用 TimestampInterceptor 自动添加 timestamp）</strong></p>
<h4 id="2-3-Flume入门案例–实时监控目录下多个新文件"><a href="#2-3-Flume入门案例–实时监控目录下多个新文件" class="headerlink" title="2.3 Flume入门案例–实时监控目录下多个新文件"></a>2.3 Flume入门案例–实时监控目录下多个新文件</h4><p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230505175242130.png" alt="image-20230505175242130"><figcaption>image-20230505175242130</figcaption></figure></p>
<p><strong>说明：在使用Spooling Directory Source时，不要在监控目录中创建目录并持续修改文件；上传完成的文件会以.COMPLETED结尾；被监控的文件每500毫秒扫描一次文件变动</strong></p>
<p>创建配置文件 flume-dir-hdfs.conf</p>
<pre><code>a3.sources = r3
a3.sinks = k3
a3.channels = c3

# Describe/configure the source
a3.sources.r3.type = spooldir
a3.sources.r3.spoolDir = /opt/module/flume/upload
a3.sources.r3.fileSuffix = .COMPLETED
a3.sources.r3.fileHeader = true
#忽略所有以.tmp 结尾的文件，不上传
a3.sources.r3.ignorePattern = ([^ ]*\.tmp)

# Describe the sink
a3.sinks.k3.type = hdfs
a3.sinks.k3.hdfs.path =
hdfs://hadoop102:9820/flume/upload/%Y%m%d/%H
#上传文件的前缀
a3.sinks.k3.hdfs.filePrefix = upload-
#是否按照时间滚动文件夹
a3.sinks.k3.hdfs.round = true
#多少时间单位创建一个新的文件夹
a3.sinks.k3.hdfs.roundValue = 1
#重新定义时间单位
a3.sinks.k3.hdfs.roundUnit = hour
#是否使用本地时间戳
a3.sinks.k3.hdfs.useLocalTimeStamp = true
#积攒多少个 Event 才 flush 到 HDFS 一次
a3.sinks.k3.hdfs.batchSize = 100
#设置文件类型，可支持压缩
a3.sinks.k3.hdfs.fileType = DataStream
#多久生成一个新的文件
a3.sinks.k3.hdfs.rollInterval = 60
#设置每个文件的滚动大小大概是 128M
a3.sinks.k3.hdfs.rollSize = 134217700
#文件的滚动与 Event 数量无关
a3.sinks.k3.hdfs.rollCount = 0

# Use a channel which buffers events in memory
a3.channels.c3.type = memory
a3.channels.c3.capacity = 1000
a3.channels.c3.transactionCapacity = 100

# Bind the source and sink to the channel
a3.sources.r3.channels = c3
a3.sinks.k3.channel = c3
</code></pre>
<p>2.4 Flume入门案例–实时监控目录下多个追加文件</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230505175422818.png" alt="image-20230505175422818"><figcaption>image-20230505175422818</figcaption></figure></p>
<p><strong>Exec Source适用于监控一个实时追加的文件，不能实现断点续传；Spooling Source适用于同步新文件，但不适合对实时追加日志的文件进行监听并同步；而Taildir Source适合用于监听多个实时追加的文件，并且能够实现断点续传</strong></p>
<p>创建配置文件 flume-taildir-hdfs.conf</p>
<pre><code>a3.sources = r3
a3.sinks = k3
a3.channels = c3

# Describe/configure the source
a3.sources.r3.type = TAILDIR
a3.sources.r3.positionFile = /opt/module/flume/tail_dir.json
a3.sources.r3.filegroups = f1 f2
a3.sources.r3.filegroups.f1 = /opt/module/flume/files/.*file.*
a3.sources.r3.filegroups.f2 = /opt/module/flume/files2/.*log.*

# Describe the sink
a3.sinks.k3.type = hdfs
a3.sinks.k3.hdfs.path =
hdfs://hadoop102:9820/flume/upload2/%Y%m%d/%H
#上传文件的前缀
a3.sinks.k3.hdfs.filePrefix = upload-
#是否按照时间滚动文件夹
a3.sinks.k3.hdfs.round = true
#多少时间单位创建一个新的文件夹
a3.sinks.k3.hdfs.roundValue = 1
#重新定义时间单位
a3.sinks.k3.hdfs.roundUnit = hour
#是否使用本地时间戳
a3.sinks.k3.hdfs.useLocalTimeStamp = true
#积攒多少个 Event 才 flush 到 HDFS 一次
a3.sinks.k3.hdfs.batchSize = 100
#设置文件类型，可支持压缩
a3.sinks.k3.hdfs.fileType = DataStream
#多久生成一个新的文件
a3.sinks.k3.hdfs.rollInterval = 60
#设置每个文件的滚动大小大概是 128M
a3.sinks.k3.hdfs.rollSize = 134217700
#文件的滚动与 Event 数量无关
a3.sinks.k3.hdfs.rollCount = 0

# Use a channel which buffers events in memory
a3.channels.c3.type = memory
a3.channels.c3.capacity = 1000
a3.channels.c3.transactionCapacity = 100

# Bind the source and sink to the channel
a3.sources.r3.channels = c3
a3.sinks.k3.channel = c3
</code></pre>
<p><strong>Taildir 说明：Taildir Source维护了一个json格式的position file，其会定期的往position file中更新每个文件读取到的最新的位置，因此能够实现断点续传</strong></p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>flume</tag>
      </tags>
  </entry>
  <entry>
    <title>那些年我做过的“学习用”项目</title>
    <url>/2023/042646735.html</url>
    <content><![CDATA[<h3 id="第一个项目：离线数仓（hadoop-flume-kafka-hive）"><a href="#第一个项目：离线数仓（hadoop-flume-kafka-hive）" class="headerlink" title="第一个项目：离线数仓（hadoop+flume+kafka+hive）"></a>第一个项目：离线数仓（hadoop+flume+kafka+hive）</h3><p>数据仓库</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230426233540128.png" alt="image-20230426233540128"><figcaption>image-20230426233540128</figcaption></figure></p>
<p>系统数据流程图</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230426233006098-1682523445038-4.png" alt="image-20230426233006098"><figcaption>image-20230426233006098</figcaption></figure></p>
<p>开始就是安装需要用到的软件：<br>hadoop<br>zookeeper<br>kafka<br>flume<br>mysql<br>maxwell<br>datax<br>hive<br>dolphinscheduler<br>superset</p>
<p>设置进程启停脚本：<br>lg.sh：运行hadoop102、hadoop103上生产日志数据的jar包，并把数据写入文件app.date.log文件<br>f1.sh：启动hadoop102、hadoop03上的flume进程，采集日志数据文件app.date.log中的数据到kafka的topic_log主题<br>mxw.sh：启动hadoop102上的maxwell进程，监控mysql中指定数据库的变化（首先需要开启mysql的binlog），将变化的数据写入kafka的topic_db主题<br>f2.sh：启动hadoop104上的flume进程，采集kafka的topic_log主题中的日志数据到hdfs中<br>gen_import_config.py：datax的配置文件生成脚本<br>gen_import_config.sh：datax的批量配置文件生成脚本<br>mysql_to_hdfs_full.sh：mysql全量表数据同步至hdfs的脚本<br>f3.sh：启动hadoop104上的flume进程，采集kafka的topic_db主题中的业务数据到hdfs中<br>mysql_to_kafka_inc_init.sh：mysql增量表首次全量同步业务数据至kafka<br>cluster.sh：启动和关闭zookeeper、hadoop、kafka、采集flume–f1、日志消费flume–f2、业务消费flume–f3、maxwell<br>hdfs_to_ods_log.sh：将hdfs中的日志数据导入hive的ods层中对应的表中<br>hdfs_to_ods_db.sh：将hdfs中的业务数据导入hive的ods层中对应的表中<br>ods_to_dim_init.sh：将hive的ods层数据首日装载到dim层中<br>ods_to_dim.sh：将hive的ods层数据每日装载到dim层中<br>ods_to_dwd_init.sh：将hive的ods层数据首日装载到dwd层中<br>ods_to_dwd.sh：将hive的ods层数据每日装载到dwd层中<br>dwd_to_dws_1d_init.sh：将hive中的dwd层数据 装载dws层最近1日数据表中<br>dws_1d_to_dws_nd.sh：将hive中的dws层最近1日数据 装载到dws层最近n日数据表中<br>dws_1d_to_dws_td_init.sh：将hive中的dws层最近1日数据 首日 装载到dws层历史至今数据表中<br>dws_1d_to_dws_td.sh：将hive中的dws层最近1日数据 每日 装载到dws层历史至今数据表中<br>dws_to_ads.sh：将dws层数据装载到ads层数据表中</p>
<p>在hive中创建按层次分布的数据仓库–使用DataGrip创建</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230426230726666.png" alt="image-20230426230726666"><figcaption>image-20230426230726666</figcaption></figure></p>
<p>ADS层</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230506185735889.png" alt="image-20230506185735889"><figcaption>image-20230506185735889</figcaption></figure></p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230506185753481.png" alt="image-20230506185753481"><figcaption>image-20230506185753481</figcaption></figure></p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230426231200000.png" alt="ADS层数据"><figcaption>ADS层数据</figcaption></figure></p>
<p>DWS层</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230506185645322.png" alt="image-20230506185645322"><figcaption>image-20230506185645322</figcaption></figure></p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230506185703842.png" alt="image-20230506185703842"><figcaption>image-20230506185703842</figcaption></figure></p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/DWS%E5%B1%82%E6%95%B0%E6%8D%AE.png" alt="image-20230426231355375"><figcaption>image-20230426231355375</figcaption></figure></p>
<p>DWD层</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230506185545495.png" alt="image-20230506185545495"><figcaption>image-20230506185545495</figcaption></figure></p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230506185604987.png" alt="image-20230506185604987"><figcaption>image-20230506185604987</figcaption></figure></p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/DWD%E5%B1%82%E6%95%B0%E6%8D%AE.png" alt="image-20230426231507605"><figcaption>image-20230426231507605</figcaption></figure></p>
<p>DIM层</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230506185233492.png" alt="image-20230506185233492"><figcaption>image-20230506185233492</figcaption></figure></p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230506185504319.png" alt="image-20230506185504319"><figcaption>image-20230506185504319</figcaption></figure></p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/DIM%E5%B1%82%E6%95%B0%E6%8D%AE.png" alt="image-20230426231557848"><figcaption>image-20230426231557848</figcaption></figure></p>
<p>ODS层</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230506185132757.png" alt="image-20230506185132757"><figcaption>image-20230506185132757</figcaption></figure></p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230506185152140.png" alt="image-20230506185152140"><figcaption>image-20230506185152140</figcaption></figure></p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/ODS%E5%B1%82%E6%95%B0%E6%8D%AE.png" alt="image-20230426231637998"><figcaption>image-20230426231637998</figcaption></figure></p>
<p>将报表数据（ADS层数据）导出到MySQL–使用DataX</p>
<p>使用脚本hdfs_to_mysql.sh：将ADS层数据导入MySQL</p>
<p>启动dolphinscheduler，并通过web ui访问</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230426162836842.png" alt="image-20230426162836842"><figcaption>image-20230426162836842</figcaption></figure></p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230426162721178.png" alt="image-20230426162721178"><figcaption>image-20230426162721178</figcaption></figure></p>
<p>查看虚拟机进程</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230426164046511.png" alt="image-20230426164046511"><figcaption>image-20230426164046511</figcaption></figure></p>
<p>管理项目</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230426162905277.png" alt="image-20230426162905277"><figcaption>image-20230426162905277</figcaption></figure></p>
<p>管理工作流</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230426162936789.png" alt="image-20230426162936789"><figcaption>image-20230426162936789</figcaption></figure></p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230426163008508.png" alt="image-20230426163008508"><figcaption>image-20230426163008508</figcaption></figure></p>
<p>为每个步骤添加脚本（这些脚本就是之前在虚拟机中编写的脚本）</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230426163045722.png" alt="image-20230426163045722"><figcaption>image-20230426163045722</figcaption></figure></p>
<p>执行任务</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230426163824085.png" alt="image-20230426163824085"><figcaption>image-20230426163824085</figcaption></figure></p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230426163901535.png" alt="image-20230426163901535"><figcaption>image-20230426163901535</figcaption></figure></p>
<p>使用superset进行可视化展示</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230426164823994.png" alt="image-20230426164823994"><figcaption>image-20230426164823994</figcaption></figure></p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230426164844424.png" alt="image-20230426164844424"><figcaption>image-20230426164844424</figcaption></figure></p>
<p>编辑各类表单</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230426165147121.png" alt="image-20230426165147121"><figcaption>image-20230426165147121</figcaption></figure></p>
<p>查看离线指标看板</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230426165057382.png" alt="image-20230426165057382"><figcaption>image-20230426165057382</figcaption></figure></p>
]]></content>
      <tags>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>关于消息队列Kafka知识的学习</title>
    <url>/2023/042039691.html</url>
    <content><![CDATA[<p>Kafka是一项非常重要的消息队列技术，在大数据场景中被主要采用。</p>
<h3 id="第1章-Kafka概述"><a href="#第1章-Kafka概述" class="headerlink" title="第1章 Kafka概述"></a>第1章 Kafka概述</h3><h4 id="1-1-Kafka的定义"><a href="#1-1-Kafka的定义" class="headerlink" title="1.1 Kafka的定义"></a>1.1 Kafka的定义</h4><p>Kafka传统定义：Kafka是一个分布式的基于发布&#x2F;订阅模式的消息队列（Message Queue），主要应用于大数据实时处理领域。</p>
<p>发布&#x2F;订阅：消息的发布者不会将消息直接发送给特定的订阅者，而是将发布的消息分为不同的类别，订阅者只接收感兴趣的消息。</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="C:\Users\28331\AppData\Roaming\Typora\typora-user-images\image-20230420120502679.png" alt="image-20230420120502679"><figcaption>image-20230420120502679</figcaption></figure></p>
<p>Kafka最新定义：Kafka是一个开源的分布式事件流平台，被数千家公司用于高性能数据管道、流分析、数据集成和关键任务应用。</p>
<h4 id="1-2-传统消息队列的主要应用场景"><a href="#1-2-传统消息队列的主要应用场景" class="headerlink" title="1.2 传统消息队列的主要应用场景"></a>1.2 传统消息队列的主要应用场景</h4><p>主要应用场景包括：缓冲&#x2F;消峰，解耦，异步通信</p>
<figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="C:\Users\28331\AppData\Roaming\Typora\typora-user-images\image-20230420113210146.png" alt="image-20230420113210146" style="zoom: 80%;"><figcaption>image-20230420113210146</figcaption></figure>

<figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="C:\Users\28331\AppData\Roaming\Typora\typora-user-images\image-20230420113250219.png" alt="image-20230420113250219" style="zoom: 80%;"><figcaption>image-20230420113250219</figcaption></figure>

<figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="C:\Users\28331\AppData\Roaming\Typora\typora-user-images\image-20230420113310640.png" alt="image-20230420113310640" style="zoom: 80%;"><figcaption>image-20230420113310640</figcaption></figure>

<h4 id="1-3-Kafka的特点"><a href="#1-3-Kafka的特点" class="headerlink" title="1.3 Kafka的特点"></a>1.3 Kafka的特点</h4><ul>
<li>高吞吐量、低延迟：Kafka每秒可以处理几十万条消息，它的延迟最低只有几毫秒，每个topic可以分为多个partition，由多个consumer group对partition进行consume操作</li>
<li>可扩展性：Kafka集群支持热扩展。</li>
<li>持久性、可靠性：消息被持久化到本地磁盘，并且支持数据备份防止数据丢失。</li>
<li>容错性：允许集群中有节点失败（若副本数量为n，则允许n-1个节点失败）</li>
<li>高并发：支持数千个客户端同时读写</li>
</ul>
<p>综合传统消息队列的主要应用场景和Kafka的特点，Kafka起到的作用可以归纳为：消峰填谷，解耦！在大数据流式计算领域中，Kafka主要作为计算机系统的前置缓存和输出结果缓存。其扮演的角色通常为：存储系统（持久性）；消息系统；流处理平台。</p>
<h4 id="1-4-Kafka的基础架构"><a href="#1-4-Kafka的基础架构" class="headerlink" title="1.4 Kafka的基础架构"></a>1.4 Kafka的基础架构</h4><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="C:\Users\28331\AppData\Roaming\Typora\typora-user-images\image-20230420115303092.png" alt="image-20230420115303092" style="zoom:80%;"><figcaption>image-20230420115303092</figcaption></figure>

<ol>
<li>Producer：消息生产者，就是向Kafka broker发消息的客户端</li>
<li>Consumer：消息消费者，向Kafka broker取消息的客户端</li>
<li>Consumer Group（CG）：消费者组，由多个consumer组成。消费者组内每个消费者负责消费不同分区的数据，一个分区只能由一个组内消费者消费；消费者组之间互不影响。所有的消费者都属于某个消费者组，即消费者组是一个逻辑上的一个订阅者</li>
<li>Broker：一台Kafka服务器就是一个broker。一个集群由多个broker组成。一个broker可以容纳多个topic</li>
<li>Topic：可以理解为一个队列，生产者和消费者面向的都是一个topic</li>
<li>Partition：为了实现扩展性，一个非常大的tipic可以分布到多个broker（即服务器）上，一个topic可以分为多个partition，每个partition是一个有序的队列</li>
<li>Replica：副本。一个topic的每个分区都有若干个副本，一个Leader和若干个Follower</li>
<li>Leader：每个分区多个副本的“主”，生产者发送数据的对象，以及消费数据的对象都是Leader</li>
<li>Follower：每个分区多个副本的“从”，实时从Leader中同步数据，保持和Leader数据的同步。Leader发生故障时，某个Follower会成为新的Leader</li>
</ol>
<h3 id="第2章-Kafka命令行操作"><a href="#第2章-Kafka命令行操作" class="headerlink" title="第2章 Kafka命令行操作"></a>第2章 Kafka命令行操作</h3><h4 id="2-1-主题命令行操作"><a href="#2-1-主题命令行操作" class="headerlink" title="2.1 主题命令行操作"></a>2.1 主题命令行操作</h4><ul>
<li><p>查看当前服务器中的所有topic                                                                                                                                             bin&#x2F;kafka-topics.sh –bootstrap-server 节点名称:9092 –list</p>
</li>
<li><p>创建主题</p>
<p>bin&#x2F;kafka-topics.sh –bootstrap-server 节点名称:9092 –create –partitions 分区数 –replication-factor 副本数 –topic 主题名称</p>
</li>
<li><p>查看指定主题详情</p>
<p>bin&#x2F;kafka-topics.sh –bootstrap-server 节点名称:9092 –describe –topic 主题名称</p>
</li>
<li><p>修改主题分区数</p>
<p>bin&#x2F;kafka-topics.sh –bootstrap-server 节点名称:9092 –alter –topic 主题名称 –partitions 修改后的分区数</p>
</li>
<li><p>删除主题</p>
<p>bin&#x2F;kafka-topics.sh –bootstrap-server 节点名称:9092 –delete –topic 主题名称</p>
</li>
</ul>
<h4 id="2-2-生产者命令行操作"><a href="#2-2-生产者命令行操作" class="headerlink" title="2.2 生产者命令行操作"></a>2.2 生产者命令行操作</h4><ul>
<li><p>发送消息</p>
<p>bin&#x2F;kafka-console-producer.sh  –bootstrap-server 节点名称:9092 –topic 主题名称</p>
</li>
</ul>
<h4 id="2-3-消费者命令行操作"><a href="#2-3-消费者命令行操作" class="headerlink" title="2.3 消费者命令行操作"></a>2.3 消费者命令行操作</h4><ul>
<li><p>消费指定主题中的消息</p>
<p>bin&#x2F;kafka-console-consumer.sh  –bootstrap-server 节点名称:9092 –topic 主题名称</p>
</li>
<li><p>把该主题中的所有数据读取出来（包括历史数据）</p>
<p>bin&#x2F;kafka-console-consumer.sh  –bootstrap-server 节点名称:9092 –from-beginning –topic 主题名称</p>
</li>
</ul>
<h3 id="第3章-Kafka生产者"><a href="#第3章-Kafka生产者" class="headerlink" title="第3章 Kafka生产者"></a>第3章 Kafka生产者</h3><h4 id="3-1-生产者消息发送流程"><a href="#3-1-生产者消息发送流程" class="headerlink" title="3.1 生产者消息发送流程"></a>3.1 生产者消息发送流程</h4><p>在消息发送的过程中，涉及到了两个线程–main线程和sender线程。在main线程中创建了一个双端队列RecordAccumulator。main线程将消息发送到RecordAccumulator，sender线程不断从RecordAccumulator中拉取消息发送到Kafka Broker</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="C:\Users\28331\AppData\Roaming\Typora\typora-user-images\image-20230420164903715.png" alt="image-20230420164903715"><figcaption>image-20230420164903715</figcaption></figure></p>
<p>ISR队列：Leader以及与Leader保持同步的Follower的正常存活副本队列</p>
<blockquote>
<p>注意：即使acks&#x3D;-1，也不能完全保证数据发送的100%完整性？因为，如果服务端目标partition的同步副本只有Leader自己了，此时，它受到数据就会给生产者反馈成功。但是一旦反馈之后就宕机，数据还未被持久化，则完整性不能得到保证</p>
</blockquote>
<p>注意：消息发送失败会自动重试，不需要我们在回调函数中手动重试</p>
<h4 id="3-2-异步发送API"><a href="#3-2-异步发送API" class="headerlink" title="3.2 异步发送API"></a>3.2 异步发送API</h4><p>创建MAVEN项目</p>
<p>导入Kafka依赖</p>
<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;
    &lt;artifactId&gt;kafka-clients&lt;/artifactId&gt;
    &lt;version&gt;3.0.0&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p>创建并配置 Kafka 生产者的配置对象</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 1. 创建 kafka 生产者的配置对象</span>
Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 2. 给 kafka 配置对象添加配置信息：bootstrap.servers</span>
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>BOOTSTRAP_SERVERS_CONFIG<span class="token punctuation">,</span>
<span class="token string">"hadoop102:9092"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// key,value 序列化（必须）：key.serializer，value.serializer</span>
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>KEY_SERIALIZER_CLASS_CONFIG<span class="token punctuation">,</span>
<span class="token string">"org.apache.kafka.common.serialization.StringSerializer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>VALUE_SERIALIZER_CLASS_CONFIG<span class="token punctuation">,</span>
<span class="token string">"org.apache.kafka.common.serialization.StringSerializer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 3. 创建 kafka 生产者对象</span>
KafkaProducer<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>  String<span class="token operator">></span>  kafkaProducer  <span class="token operator">=</span>  <span class="token keyword">new</span>
<span class="token class-name">KafkaProducer</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h5 id="3-2-1-不带回调函数的API代码"><a href="#3-2-1-不带回调函数的API代码" class="headerlink" title="3.2.1 不带回调函数的API代码"></a>3.2.1 不带回调函数的API代码</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 4. 调用 send 方法,发送消息</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
kafkaProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">,</span><span class="token string">"atguigu "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h5 id="3-2-2-带回调函数的API代码"><a href="#3-2-2-带回调函数的API代码" class="headerlink" title="3.2.2 带回调函数的API代码"></a>3.2.2 带回调函数的API代码</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 4. 调用 send 方法,发送消息</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 添加回调</span>
    kafkaProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span>  <span class="token class-name">ProducerRecord</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">,</span><span class="token string">"atguigu "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> 
    <span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 该方法在 Producer 收到 ack 时调用，为异步调用</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCompletion</span><span class="token punctuation">(</span>RecordMetadata metadata<span class="token punctuation">,</span>Exception exception<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">// 没有异常,输出信息到控制台</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 主 题 ： "</span>  <span class="token operator">+</span>
                metadata<span class="token punctuation">.</span><span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"->"</span> <span class="token operator">+</span> <span class="token string">"分区："</span> <span class="token operator">+</span> metadata<span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">// 出现异常打印</span>
                exception<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 延迟一会会看到数据发往不同分区</span>
    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p>回调函数会在 producer 收到 ack 时调用，为异步调用，该方法有两个参数，分别是元<br>数据信息（RecordMetadata）和异常信息（Exception），如果 Exception 为 null，说明消息发<br>送成功，如果 Exception 不为 null，说明消息发送失败</p>
<h4 id="3-3-同步发送API"><a href="#3-3-同步发送API" class="headerlink" title="3.3 同步发送API"></a>3.3 同步发送API</h4><p>只需在异步发送的基础上，调用一下get()方法即可</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 4. 调用 send 方法,发送消息</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 同步发送</span>
    kafkaProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">,</span><span class="token string">"kafka"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p>注意：不论是异步发送还是同步发送，都还有非常重要的一步：关闭资源</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 5. 关闭资源</span>
kafkaProducer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="3-4-生产者分区"><a href="#3-4-生产者分区" class="headerlink" title="3.4 生产者分区"></a>3.4 生产者分区</h4><h5 id="3-4-1-分区好处"><a href="#3-4-1-分区好处" class="headerlink" title="3.4.1 分区好处"></a>3.4.1 分区好处</h5><ol>
<li>便于合理使用存储资源，每个partition在一个Broker上存储，可以把海量的数据按照分区切割成一块一块存储在多台Broker上。合理控制分区的任务，可以实现负载均衡的效果</li>
<li>提高并行度，生产者可以以分区为单位发送数据；消费者可以以分区为单位消费数据</li>
</ol>
<h5 id="3-4-2-生产者发送消息的分区策略"><a href="#3-4-2-生产者发送消息的分区策略" class="headerlink" title="3.4.2 生产者发送消息的分区策略"></a>3.4.2 生产者发送消息的分区策略</h5><ol>
<li><p>指明partition的情况下，直接将指明的值作为partition的值；例如：partition&#x3D;0，所有数据写入分区0</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 4. 调用 send 方法,发送消息</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 指定数据发送到 1 号分区，key 为空（IDEA 中 ctrl + p 查看参数）</span>
    kafkaProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span>  <span class="token class-name">ProducerRecord</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"atguigu "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> 
    <span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCompletion</span><span class="token punctuation">(</span>RecordMetadata metadata<span class="token punctuation">,</span>Exception e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 主 题 ： "</span>  <span class="token operator">+</span>
            metadata<span class="token punctuation">.</span><span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"->"</span> <span class="token operator">+</span> <span class="token string">"分区："</span> <span class="token operator">+</span> metadata<span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
</li>
<li><p>没有指明partition值但有key的情况下，将key的hash值与topic的partition数进行取余得到partition的值；例如：key1的hash值&#x3D;5，key2的hash值&#x3D;6，topic的分区数&#x3D;2，那么key1对应的value1写入1号分区，key2对应的value2写入0号分区</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 4. 调用 send 方法,发送消息</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 依次指定 key 值为 a,b,f ，数据 key 的 hash 值与 3 个分区求余，分别发往 1、2、0</span>
    kafkaProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span>  <span class="token class-name">ProducerRecord</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"atguigu "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> 
    <span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCompletion</span><span class="token punctuation">(</span>RecordMetadata metadata<span class="token punctuation">,</span>Exception e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 主 题 ： "</span>  <span class="token operator">+</span>
            metadata<span class="token punctuation">.</span><span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"->"</span> <span class="token operator">+</span> <span class="token string">"分区："</span> <span class="token operator">+</span> metadata<span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
</li>
<li><p>既没有partition值又没有key值的情况下，Kafka采用Sticky Partition（黏性分区器），会随机选择一个分区，并尽可能一直使用该分区，待该分区的batch已满或者已完成，Kafka再随机选一个分区进行使用（和上一次的分区不同）；例如：第一次随机选择0号分区，等0号分区当前批次满了（默认16k）或者linger.ms设置的时间到，Kafka再随机选择一个分区进行使用（如果还是0会继续随机）</p>
<blockquote>
<p>代码示例如–3.2.2 带回调函数的API代码</p>
</blockquote>
</li>
<li><p>自定义分区器</p>
<ol>
<li>定义类实现Partitioner接口</li>
<li>重写partition()方法</li>
<li>在生产者的配置对象中添加自定义分区器</li>
</ol>
</li>
</ol>
<p>例：实现一个分区器实现，发送过来的数据中如果包含 atguigu，就发往 0 号分区，不包含 atguigu，就发往 1号分区。</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//setup1、setup2</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>Partitioner<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>common<span class="token punctuation">.</span>Cluster<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">/**
* 1. 实现接口 Partitioner
* 2. 实现 3 个方法:partition,close,configure
* 3. 编写 partition 方法,返回分区号
*/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyPartitioner</span> <span class="token keyword">implements</span> <span class="token class-name">Partitioner</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/**
    * 返回信息对应的分区
    * @param topic 主题
    * @param key 消息的 key
    * @param keyBytes 消息的 key 序列化后的字节数组
    * @param value 消息的 value
    * @param valueBytes 消息的 value 序列化后的字节数组
    * @param cluster 集群元数据可以查看分区信息
    * @return
    */</span>		
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span>  <span class="token keyword">int</span>  <span class="token function">partition</span><span class="token punctuation">(</span>String  topic<span class="token punctuation">,</span>  Object  key<span class="token punctuation">,</span>  <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keyBytes<span class="token punctuation">,</span> Object value<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> 			valueBytes<span class="token punctuation">,</span> Cluster cluster<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 获取消息</span>
        String msgValue <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 创建 partition</span>
        <span class="token keyword">int</span> partition<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 判断消息是否包含 atguigu</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>msgValue<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"atguigu"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        partition <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        partition <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 返回分区号</span>
        <span class="token keyword">return</span> partition<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 关闭资源</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 配置方法</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> configs<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
<span class="token comment" spellcheck="true">//setup3</span>
<span class="token comment" spellcheck="true">// 添加自定义分区器</span>
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>PARTITIONER_CLASS_CONFIG<span class="token punctuation">,</span><span class="token string">"com.atguigu.kafka.producer.MyPartitioner"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="3-5-生产经验–生产者如何提高吞吐量"><a href="#3-5-生产经验–生产者如何提高吞吐量" class="headerlink" title="3.5 生产经验–生产者如何提高吞吐量"></a>3.5 生产经验–生产者如何提高吞吐量</h4><ol>
<li>修改batch.size大小，修改为32k</li>
<li>修改linger.ms等待时间，修改为5~100ms</li>
<li>修改compress.type压缩模式，修改为“snappy”</li>
<li>修改RecordAccumulator缓冲区大小，修改为64M</li>
</ol>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// batch.size：批次大小，默认 16K</span>
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>BATCH_SIZE_CONFIG<span class="token punctuation">,</span> <span class="token number">16384</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// linger.ms：等待时间，默认 0</span>
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>LINGER_MS_CONFIG<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// RecordAccumulator：缓冲区大小，默认 32M：buffer.memory</span>
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>BUFFER_MEMORY_CONFIG<span class="token punctuation">,</span><span class="token number">33554432</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// compression.type：压缩，默认 none，可配置值 gzip、snappy、lz4 和 zstd</span>
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>COMPRESSION_TYPE_CONFIG<span class="token punctuation">,</span><span class="token string">"snappy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="3-6-生产经验–数据可靠性"><a href="#3-6-生产经验–数据可靠性" class="headerlink" title="3.6 生产经验–数据可靠性"></a>3.6 生产经验–数据可靠性</h4><blockquote>
<p>ack应答原理：</p>
</blockquote>
<p>ack&#x3D;0：生产者发送过来的数据，不需要等数据落盘应答<br>ack&#x3D;1：生产者发送过来的数据，Leader收到数据后应答<br>ack&#x3D;-1：生产者发送过来的数据，Leader和ISR队列里面的所有节点收齐数据后应答</p>
<blockquote>
<p>思考：Leader收到数据，所有Follower都开始同步数据，但有一个Follower，因为某种故障，迟迟不能与Leader进行同步，那这个问题怎么解决呢？</p>
</blockquote>
<p>Leader维护了一个动态的in-sync replica set（ISR） ），意为和Leader保持同步的Follower+Leader集合(leader：0，isr:0,1,2)。如果Follower长时间未向Leader发送通信请求或同步数据，则该Follower将被踢出ISR。该时间阈值由replica.lag.time.max.ms参数设定，默认30s。例如2超时，(leader:0, isr:0,1)。</p>
<p><strong>数据完全可靠条件 &#x3D; ACK级别设置为-1 +  分区副本大于等于2 + ISR里应答的最小副本数量大于等于2</strong></p>
<blockquote>
<p>代码配置</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 设置 acks</span>
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>ACKS_CONFIG<span class="token punctuation">,</span> <span class="token string">"all"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 重试次数 retries，默认是 int 最大值，2147483647</span>
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>RETRIES_CONFIG<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="3-7-生产经验–数据去重"><a href="#3-7-生产经验–数据去重" class="headerlink" title="3.7 生产经验–数据去重"></a>3.7 生产经验–数据去重</h4><h5 id="3-7-1-数据传递语义"><a href="#3-7-1-数据传递语义" class="headerlink" title="3.7.1 数据传递语义"></a>3.7.1 数据传递语义</h5><ul>
<li>至少传递一次 &#x3D;  ACK级别设置为-1 +  分区副本大于等于2 + ISR里应答的最小副本数量大于等于2<br>可以保证数据不丢失，但是不能保证数据不重复（在Leader准备应答时，Leader发生故障，但是Follower已经同步数据）</li>
<li>最多一次 &#x3D; ACK级别设置为0<br>可以保证数据不重复，但是不能保证数据不丢失</li>
<li>精确一次：对于一些非常重要的信息，比如和钱相关的数据，要求数据既不能重复也不丢失</li>
</ul>
<p><strong>Kafka 0.11版本以后，引入了一项重大特性：<em>幂等性和事务</em></strong></p>
<h5 id="3-7-2-幂等性"><a href="#3-7-2-幂等性" class="headerlink" title="3.7.2 幂等性"></a>3.7.2 幂等性</h5><p><strong>幂等性</strong>就是指Producer不论向Broker发送多少次重复数据，Broker端都只会持久化一条，保证了不重复</p>
<p>精确一次（ （Exactly Once） ） &#x3D;  幂等性 +  至少一次（ （ ack&#x3D;-1 +  分区副本数&gt;&#x3D;2 + ISR 最小副本数量&gt;&#x3D;2） ）  </p>
<p>重复数据的判断标准：具有**&lt;PID, Partition, SeqNumber&gt;**相同主键的消息提交时，Broker只会持久化一条。其中PID是Kafka每次重启都会分配一个新的会话ID（所以幂等性只能保证的是在单分区单会话内不重复）；Partition 表示分区号；Sequence Number是单调自增的。</p>
<p>那么如何使用幂等性呢？<em><strong>开启参数 enable.idempotence 默认为 true，false关闭</strong></em></p>
<h5 id="3-7-3-生产者事务"><a href="#3-7-3-生产者事务" class="headerlink" title="3.7.3 生产者事务"></a>3.7.3 生产者事务</h5><blockquote>
<p>Kafka事务原理</p>
</blockquote>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230428154752478.png" alt="image-20230428154752478"><figcaption>image-20230428154752478</figcaption></figure></p>
<blockquote>
<p>代码配置</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 设置事务 id（必须），事务 id 任意起名</span>
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>TRANSACTIONAL_ID_CONFIG<span class="token punctuation">,</span><span class="token string">"transaction_id_0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">--</span><span class="token operator">-</span>
<span class="token comment" spellcheck="true">// 1 初始化事务</span>
<span class="token keyword">void</span> <span class="token function">initTransactions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 2 开启事务</span>
<span class="token keyword">void</span> <span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ProducerFencedException<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 3 在事务内提交已经消费的偏移量（主要用于消费者）</span>
<span class="token keyword">void</span> <span class="token function">sendOffsetsToTransaction</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>TopicPartition<span class="token punctuation">,</span> OffsetAndMetadata<span class="token operator">></span> offsets<span class="token punctuation">,</span>
String  consumerGroupId<span class="token punctuation">)</span>  <span class="token keyword">throws</span>
ProducerFencedException<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 4 提交事务</span>
<span class="token keyword">void</span> <span class="token function">commitTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ProducerFencedException<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 5 放弃事务（类似于回滚事务的操作）</span>
<span class="token keyword">void</span> <span class="token function">abortTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ProducerFencedException<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 初始化事务</span>
kafkaProducer<span class="token punctuation">.</span><span class="token function">initTransactions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 开启事务</span>
kafkaProducer<span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 4. 调用 send 方法,发送消息</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 发送消息</span>
kafkaProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span>  <span class="token class-name">ProducerRecord</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">,</span>
<span class="token string">"atguigu "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// int i = 1 / 0;</span>
<span class="token comment" spellcheck="true">// 提交事务</span>
kafkaProducer<span class="token punctuation">.</span><span class="token function">commitTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 终止事务</span>
kafkaProducer<span class="token punctuation">.</span><span class="token function">abortTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 5. 关闭资源</span>
kafkaProducer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="3-8-生产经验–数据有序"><a href="#3-8-生产经验–数据有序" class="headerlink" title="3.8 生产经验–数据有序"></a>3.8 生产经验–数据有序</h4><p>单分区内，有序<br>多分区，分区与分区之间无序</p>
<h4 id="3-9-生产经验–数据乱序"><a href="#3-9-生产经验–数据乱序" class="headerlink" title="3.9 生产经验–数据乱序"></a>3.9 生产经验–数据乱序</h4><ol>
<li><p>Kafka在1.x版本之前保证数据单分区有序，条件如下：<br>max.in.flight.requests.per.connection&#x3D;1（不需要考虑是否开启幂等性）</p>
</li>
<li><p>Kafka在1.x及以后版本保证数据单分区有序，条件如下：<br>（1）未开启幂等性<br>max.in.flight.requests.per.connection需要设置未1<br>（2）开启幂等性<br>max.in.flight.requests.per.connection需要设置小于等于5<br>原因说明：因为在Kafka1.x以后，启用幂等后，Kafka服务端会缓存producer发来的最近5个request的元数据，故无论如何，都可以保证最近5个request的数据都是有序的</p>
<p><strong>如果开启了幂等性且缓存的请求个数小于5个，会在服务端重新排序</strong></p>
</li>
</ol>
<h3 id="第4章-Kafka-Broker"><a href="#第4章-Kafka-Broker" class="headerlink" title="第4章 Kafka Broker"></a>第4章 Kafka Broker</h3><h4 id="4-1-Kafka-Broker工作流程"><a href="#4-1-Kafka-Broker工作流程" class="headerlink" title="4.1 Kafka Broker工作流程"></a>4.1 Kafka Broker工作流程</h4><h5 id="4-1-1-Zookeeper存储的Kafka信息"><a href="#4-1-1-Zookeeper存储的Kafka信息" class="headerlink" title="4.1.1 Zookeeper存储的Kafka信息"></a>4.1.1 Zookeeper存储的Kafka信息</h5><p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230503225140019.png" alt="image-20230503225140019"><figcaption>image-20230503225140019</figcaption></figure></p>
<blockquote>
<p>注：在0.9版本之前Kafka的offset信息存储在Zookeeper中，在0.9版本之后，存储在Kafka的topic_offsets主题中</p>
</blockquote>
<h5 id="4-1-2-Kafka-Broker总体工作流程"><a href="#4-1-2-Kafka-Broker总体工作流程" class="headerlink" title="4.1.2 Kafka Broker总体工作流程"></a>4.1.2 Kafka Broker总体工作流程</h5><p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230503225259694.png" alt="image-20230503225259694"><figcaption>image-20230503225259694</figcaption></figure></p>
<h4 id="4-2-生产经验–节点服役和退役"><a href="#4-2-生产经验–节点服役和退役" class="headerlink" title="4.2 生产经验–节点服役和退役"></a>4.2 生产经验–节点服役和退役</h4><h4 id="4-3-Kafka副本"><a href="#4-3-Kafka副本" class="headerlink" title="4.3 Kafka副本"></a>4.3 Kafka副本</h4><h5 id="4-3-1-副本基本信息"><a href="#4-3-1-副本基本信息" class="headerlink" title="4.3.1 副本基本信息"></a>4.3.1 副本基本信息</h5><ol>
<li>Kafka副本作用：提高数据可靠性</li>
<li>Kafka默认副本1个，生产环境一般配置为2个，保证数据可靠性；太多副本会增加磁盘存储空间，增加网络上数据传输，降低效率</li>
<li>Kafka中副本分为：Leader 和 Follower。Kafka生产者只会把数据发往Leader，然后Follower找Leader进行同步数据</li>
<li>Kafka分区中的所有副本统称为AR<br>AR &#x3D; ISR + OSR<br><em><strong>OSR</strong></em>，表示Follower与Leader副本同步时，延迟过多的副本</li>
</ol>
<h5 id="4-3-2-Leader选举流程"><a href="#4-3-2-Leader选举流程" class="headerlink" title="4.3.2 Leader选举流程"></a>4.3.2 Leader选举流程</h5><p>Leader选举流程为4.1.2Broker总体工作流程图中的（1）、（2）、（3）、（4）步</p>
<p><strong>Kafka集群中有一个broker的Controller会被选举为Controller Leader，负责管理集群broker的上下线，所有topic的分区副本分配和Leader选举等工作</strong></p>
<h5 id="4-3-3-Leader-和-Follower故障处理细节"><a href="#4-3-3-Leader-和-Follower故障处理细节" class="headerlink" title="4.3.3 Leader 和 Follower故障处理细节"></a>4.3.3 Leader 和 Follower故障处理细节</h5><p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230503231507905-1683126934125-1.png" alt="image-20230503231507905"><figcaption>image-20230503231507905</figcaption></figure></p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/xuanyin02/ImgHosting/article_img/image-20230503231437092.png" alt="image-20230503231437092"><figcaption>image-20230503231437092</figcaption></figure></p>
<h4 id="4-4-文件存储"><a href="#4-4-文件存储" class="headerlink" title="4.4 文件存储"></a>4.4 文件存储</h4><h5 id="4-4-1-文件存储机制"><a href="#4-4-1-文件存储机制" class="headerlink" title="4.4.1 文件存储机制"></a>4.4.1 文件存储机制</h5><p>1）topic数据的存储机制	</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="/./%E5%85%B3%E4%BA%8E%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97Kafka%E7%9F%A5%E8%AF%86%E7%9A%84%E5%AD%A6%E4%B9%A0/image-20230508203739197.png" alt="image-20230508203739197"><figcaption>image-20230508203739197</figcaption></figure></p>
<p>2）index 和 log 文件详解</p>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="/./%E5%85%B3%E4%BA%8E%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97Kafka%E7%9F%A5%E8%AF%86%E7%9A%84%E5%AD%A6%E4%B9%A0/image-20230508212208719.png" alt="image-20230508212208719"><figcaption>image-20230508212208719</figcaption></figure></p>
<h5 id="4-4-2-文件清理策略"><a href="#4-4-2-文件清理策略" class="headerlink" title="4.4.2 文件清理策略"></a>4.4.2 文件清理策略</h5><p>Kafka中<strong>默认的日志保存时间为7天</strong>，可以通过调整如下参数修改保存时间：</p>
<ul>
<li>log.retention.hours，最低优先级–小时，默认7天</li>
<li>log.retention.minutes，分钟</li>
<li>log.retention.ms，最高优先级–毫秒</li>
<li>log.retention.check.interval.ms，负责设置检查周期，默认5分钟</li>
</ul>
<p>那么日志一旦超过了设置的时间，怎么处理呢？Kafka中提供的日志清理策略有<strong>delete 和 compact</strong>两种</p>
<p>1）delete日志删除：将过期数据删除</p>
<ul>
<li>log.cleanup.policy &#x3D; delete	所有数据启用删除策略</li>
</ul>
<p>（1）基于时间：默认打开。以segment中所有记录中的最大时间戳作为该文件时间戳</p>
<p>（2）基于大小：默认关闭。超过设置的所有日志总大小，删除最早的segment</p>
<p>​	log.retention.bytes，默认等于-1，表示无穷大</p>
<p>2）compact日志压缩：对于相同key的不同value值，只保留最后一个版本</p>
<ul>
<li>log.cleanup.policy &#x3D; compact	所有数据启用压缩策略</li>
</ul>
<p><figure class="image-caption"><img lazyload src="/images/loading.svg" data-src="/./%E5%85%B3%E4%BA%8E%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97Kafka%E7%9F%A5%E8%AF%86%E7%9A%84%E5%AD%A6%E4%B9%A0/image-20230508215050506.png" alt="image-20230508215050506"><figcaption>image-20230508215050506</figcaption></figure></p>
<p>压缩后的offset可能是不连续的，比如上图中没有6，当从这些offset消费消息时，将会拿到比这个offset大的offset对应的消息，实际上会拿到offset为7的消息，并从这个位置开始消费<br>这种策略只适合特殊场景，比如消息的key是用户ID，value是用户的资料，通过这种压缩策略，整个消息集里就保存了所有用户最新的资料</p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>项目中遇到的问题以及解决办法</title>
    <url>/2023/042428729.html</url>
    <content><![CDATA[<h3 id="第一个项目：离线数仓（hadoop-flume-kafka-hive）"><a href="#第一个项目：离线数仓（hadoop-flume-kafka-hive）" class="headerlink" title="第一个项目：离线数仓（hadoop+flume+kafka+hive）"></a>第一个项目：离线数仓（hadoop+flume+kafka+hive）</h3><h3 id="第二个项目：flink实时数仓（flink-kafka-hbase-clickhouse）"><a href="#第二个项目：flink实时数仓（flink-kafka-hbase-clickhouse）" class="headerlink" title="第二个项目：flink实时数仓（flink+kafka+hbase+clickhouse）"></a>第二个项目：flink实时数仓（flink+kafka+hbase+clickhouse）</h3><blockquote>
<p>问题1：使用Maxwell实现业务数据增量同步时，Maxwell无法启动，日志报错：无法找到监控的数据库–xxx（是在MySQL中建立Maxwell元数据库之后，才创建的xxx数据库），Maxwell元数据库中无xxx数据库信息</p>
</blockquote>
<p>解决办法：删除Maxwell元数据库，直接启动Maxwell或（先在MySQL中重新创建Maxwell元数据库再启动Maxwell）  </p>
<p>问题2：</p>
<p><a href="%22%5B(21%E6%9D%A1%E6%B6%88%E6%81%AF">🪂参考文章</a> 解决Maxwell报错RuntimeException: Couldn‘t find database xxx_伯利恒教堂的博客-CSDN博客](<a class="link" href="https://blog.csdn.net/m0_46503302/article/details/129854142">https://blog.csdn.net/m0_46503302/article/details/129854142 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>)”)</p>
<hr>
<h3 id="第三个项目：spark-streaming实时商品推荐系统（大作业）"><a href="#第三个项目：spark-streaming实时商品推荐系统（大作业）" class="headerlink" title="第三个项目：spark streaming实时商品推荐系统（大作业）"></a>第三个项目：spark streaming实时商品推荐系统（大作业）</h3>]]></content>
      <tags>
        <tag>分享</tag>
      </tags>
  </entry>
</search>
